								Java :

Manual tetsing :    checking the appl fucntianltiy or verifying the appl funciotnality with help og manual efforts    whether it is working properly or not as per CRS  or FRS

CRS - client req specification  or customer 
FRS:  Functional Req Sepcification

Here manual efforts :

Login :    open browser , enter usl

 enter user name in username 

enter pwd in pwd field,
click login button 

Verify the home page is displayed or not ..


Automation testing :   with help of Automation tool --  by writing some code 

 code 1 ;  -- open browser 

Disadavnatges of Manual tetsing :

-   Time consuminh taks --   5 resourcses  

        login -   500 user    

for 1 user - 5 min

    2 users -  2* 5min = 10 min


 
  500 -  500*5

-  human beings tired   --   may not execute / test some functionalties --  defcets

- cannot provide accurate reslts    

    emp sal   =   1034324.342;

- To over come all disadavnted of manual  ----> Automation  

 
      Very fast in checking 

   -   can release the appl/ prrod into market very fast

 -  tools are not tired --    

-   provides accurate results ....


Selenium :

  open source autoation tool  -- can be used to automate web based appl only but not desktop appl


-  suppprts multiple browseer
      chrome, FF, IE, Edge, Safari browser (MAc  o/s  or mac book


       Microft -  stopped support IE browser --  Edge browser

	
- suppots multiple o/s  
                 windows, Linux, Mac 


Supports multiple lang -   java, Python, Javascript, C#.net, Perl, ruby ....etc

commercial tools or paid tool:
 
   buy tool - purchase tool -- to gte lience --   1 yr 

 
  15 days or 30 days --  trial version --   licence expired..  

ex:   QTP, UFT, Test complete,,,,Katalon studio 

  -- vbscript 

- windows o/s only 


Disadvanatges of Selenium :
--------------------------------
-  Cannot automate desktop appl  
          
            
         3rd paty s/w --  Auto IT 

-  cannot genreate test results automatically

         line1;
	
  line2;
line3;
               3rd part tools -  TestNG

-   cannot test recpatcha testing 
- cannot automate bar code testing--

-    object --  username, pwd  , login button 


    OR --   can store all objects info 

--  Dont have Obj repo  concept -  by default 

    Paid tools -   OR concept  

Java :    open source 


  programming language 

   Lang:      establish communication b/w human beings

  english -- 

  Telugu -   


 -- machine -- only programmnial  or machine lang
- to communictae with mahcine ---   need Progrma lang

  stamt1;
stm2;
stm3:         to peform specific taks

  ex:   to perform addition of 2 nos

           a=10
   b=20
c= a+ b
  =  10 +  20 ==  30 

- Java  - obj oriented programming lang ;
           reprsented in the form obj,     class
         simple java program - we must define  class

     no class--   no java program

- if any progrm lang -- supports oops features --   Obj oriented programming lang


OOPS features:
   
	Class and object 

	Inheritance 
	Abstarction
	Encapsulation 
	Polymorphism

40 to 50%  of core java --           100%

Terminologies:

platform independent lang:   

		windows, Linux, MAc o/s

     Java program - can be run on difff platform / o/s --

     sample .java    --->    window   --   Result x
                                     Linux            x
		       MAc               x

 c, c++ ex  - platform dependent - 
           windows   ---   Res1
	Linux            Res3

  s/w s:

  JDK - downlaod   ..exe  -- 
Eclipse   

Check Java installed :
   2 ways:

    1.   check in  C:\Program Files\Java\jdk1.8.0
    2.   through command prompt :

        open cmd propmt:    wind +   R  -   type cmd 

        check java verison :    cmd  -  java -version
					jaav 1.8.0 

   JDK:   Jaav Development Kit --  
	 used to write java program and run  java program
    
  JDK. exe   --->  dbl clk .exe >  clk next >  next ..........

 download JDK s/w -- JDK  8 or 9 ......  

   -  conatins JRE -- check in C:\Program Files\Java\jdk1.8.0\JRE

 install JDK --  JRE alos installed 

JRE: Java Runtime Environment --  -
               install JRE  separetly -
          --  Run jav program only   (  canot write java progr

JDK --  write java  +  run java
JRE --  run onlt java progr, --  cannot  develope java progr--  cannot write progr.

FAQ: JDK and JRE

Diff JDK and JRE?

Revission:


JVM :  Java virtual Machine  -set of programs or specifictions
        

            responsible to execute java program..


JDK --  JRE   ---> JVM  +   bin + Lib   folders

JRE -   conatins JVM  

FAQ:   who is responsible to execute java program ?

 JVM --

How ro create Java Project:

File > NEw  > Project or java project  >  Enter project name  =  SampleJavaProject  > click next  >   SampleJavaProject is created in Project explorer window

Project explorer window >  we can see all projects what ever we created

Default  structure:       src  
                                 JRE syssten Library file

how can we go / refer we we created java Project in our system ?


Select Proj name  >  Rt clk >  Properties >  Location:  C:\brahma\Practise\seleniumpractise\SampleJavaProject

create package :

Package :       collection of classes and Interfaces

  pkg1 -  cl1
	cl2

	I1
	I2


How to Learn Java lang:

 lang :            alphabets  ABc ..... Z

               words   -- apple, Bat..

 
make statemnts - with words

Ram is good boy.


we have keywords / reserved words / predefined words;

     words  -  have specific meaning in java

sys wont understand our lang --


ex:    class ,    public  ,      

 int  - 10, 20 , 30  --  int  - integrer numbers

   float  --  10.75f , 1000.76f

  char  -   store     'A'    , 'B'     dont use like this   'ADBDSVSg'

    boolean  -  true / false  ---  "Ram", 10 


while makeing engl stmt :  ---- 
                  Grammar rules

  Is good Ram boy ?


Progeammin  ---->  syntax rules -- must follow 

                              error  --
x int ;//  
datatype  var;
int x;


    JVM  --    check it has syntax error ---        run 


 keywords :   >     how to make stmt

Stamt:   collection of words   
  
             Ram is good boy ..

 stmt or lines of code1 


package Package1;

public class Class1 // def of class or declaring the class 
{
	
	public static void main(String args[])  // special method..  JVM alway 
	{
		// program execution always  starts from  main method only 
		System.out.println("Hi Java "); // stmt   		
             // semi colo stmt terminator 	 - comments 	
		System.out.println("How are you");
		System.out.println("I am fine");
		
	}
	
	

}

***********************************************************
package Pkg1;

public class C1 // Declartion of class  or Def of the class 
{
	// commenets :  note  why this method has been written and what is the purpose of this method
	//Note :     comment -   ctrl + /
	//  comments will be ignored  and will not be executed
	
	public static void main(String args []) // Main() - special method 
	{
		// progr execution starts from main  
		// JVM -execute java progr
		//
		
		// display some msg in o/p window 
		System.out.println("Hi Java");
		// semi colon ; is stmt terminator  - must end with ;
		System.out.println("How are you") ;		
		
		System.out.print("This is Ram");
		System.out.print("This is sita");
		
		// FAQ  Diff println() and print()
		
		
		/*
		System.out.println("How are you") ;			
		System.out.print("This is Ram");
		System.out.print("This is sita");
		*/
		
		//Note :   ctrl+ shft + / to comment multiple lines
		
		
		
		
	}
	
	

}

package Pkg1;

public class C2 {

	public static void main(String[] args) {
		
		//Note :  type syso  -press ctrl +  space -- displays println()  automatically
//		System.out.print("Hi  java");
//		System.out.print("Hi  java");
//		System.out.print("Hi  java");
		
		// Hi  javaHi  javaHi  java
		
		System.out.print("Hi  java \n");// \n  - new line
		System.out.print("Hi  java \n");
		System.out.print("Hi  java \n");
		
//		o/p
//		Hi  java
//		Hi  java
//		Hi  java 
		
		

	}

}


Revise:

FAq : 
difff println() and print()  ?


\n   - new line 
  
1.       run   java --  eclipse
 
   2.  we can write java code in notepad 
              save file name as    c4.java   

    class name and file name must be same

  run java progr  throug cmd prompt window :

                              1.   compile   ----  command    javac c4.java   
                          
		   2.  run java         --  java c4


FAQ :   with out compiling java file - can we run java program 


  Create java project :

create pakcages:


pakcage :     group of classes and interfaces 

      pkg1   -   class1
		cl2

                    interface1
                  i2


•       Datatypes in Java 
             
            1,20,,-10,  10.06

                   what type of date we are storing  in var
             
        1.  primitive data type :


                    store only one value at a time ..
                    10
	      20 
      
             cannot store multiple values  

1. int :             to store number - int 
              byte       Memory   1 byte         range    -128 to 127 
  	short		2 bytes

	int		4 bytes    --- usually we prefer int 
	long		8 bytes

	
   2.    deciaml no    10.54 ,,   4.34

       float  -               4 Bytes                         specific range of values

      double  -             8 bytes

3.  char :   to store single character which must be enclosed in ''
	  2 Bytes 
  
ex:        'A'   ,  '1'  ,  'Z'

   invalid   'ABC' 

Note:    char -   store number allso

4. boolean :    true/ false 
                          1 bit 
          
•       Variables :


Declare Variable :      

variable :    some name which can be be used to store some val



 x=10   //   x is variable 

 x= x+5    //    
      10 + 5 = 15
          // x= 15 
y = x+5  //   y is varaible 
   =  15 + 5 =20
            /// y = 20 

Declare var:
 
syntax :
               datatype   varname;

       int  eid; //  eid is var of type int
 //   eid - store intger numbers only


     declare long var:

   long l; //  l is var  of type long
             // so in l var we can store long values --  i.e  numbers

// HW Declare byte, short  variables ?

Declare float var:

  float f; //   f is var of type float . so in f var we can store decimal nos


HW :   Declare double var ?


Declare char variable :

char  ch;//   ch is var name of type char . so ch , we can store char value .. single char

// HW  Declare boolean var ?


      x   = 10   //    x conatins 10 
 //   to strore some value in var .. we have to use = operator . Assignment operator

  //   =    can be used to assign value to variable  .i.e to left side

    x = 20    //  20 value is assigned to left side var name .i.e x 

    Assign Value to variable :
---------------------------------------------

         varname = value ;

//  left side always we have to write var name .

Right side -  we can write some value / var / expression 

   x = 10;
   y = x;//    assigning 
//       =10 



y = x+5; //  expression 
      // 10 + 5 
     y =  15; //   expression is calculated / evaluated and result will be stored in left side var i.e y

- If we want to use any var, we must declare 
 
   int x;
 x  =10; ///  error

int y;
 y = x+ 5;

Declaring multiple variables in the same line:
--------------------------------------
     syntax:
       datatype var1;

     datatype  var1 , var2 , var3 .....;

 declaring variables a,b ,c  in single line:
   int  a, b,c ;//   a is of type int type, b is of type int, c is of type int
// so all variables i.e a,b,c  can store int numbers only..


+  - can be used to perform addition values intger numbers

+  can be be used to join String values
    "Ram" + 10     ///  Ram10

    "Sita" + "Ram"  // joins  SitaRam

   x=10;
   "sita" + x   ==  Sita10

    "30" + 10 =   3010  //  
-----------------------------------

package VariablesBasics;

public class VariableBasics1 {

	//  write main () 
	public static void main(String args[])
	{
		// declare var x of type int
		int x;

		//  assignning value  to var i.e x		
		x=10 ;

		//  display value of variable
		System.out.println("x"); // x  displays String as it is in  "" 
		System.out.println(x);// 10 displays value of variable name-x

		// 2  
		//		 10 =z; //error left side  always we have write var anme only
		int z;
		z = 10;
		z = x; //   value of var x is copied into left side var i.e 10 is copied into z
		//  z= 10
		System.out.println(z);
		//    value of z= 10
		System.out.println("value of z=10");//value of z=10
		System.out.println("value of z=" + z);// value of z=10
		//		   +   -  can be used to perform addition  10 + 20 =  30 

		//   "Ram" + 10  --  can be use to join 2 Values //  Ram10
		//     String is collection of characters - must be enclosed in double quotes "abc"
		System.out.println("Ram" + "sita");// Ramsita  
		System.out.println("Ram" + "10");// Ram10
		System.out.println("10" + 10); //  1010	   
		System.out.println("Ram" + 10); // Ram10


		//int y;// if we dont declare var name -y, it throws error
		int y;
		y = x+5 ;// y cannot be resolved to a variable
		// 10 +  5
		//   15 
		// y =15 
		//  display y value
		System.out.println(y); // 15



	}


}

---------------------
package VariablesBasics;

public class floatVariable {

	public static void main(String[] args) {

		float f; //   f is of type flat -- decimla 
		//		  f = 10.86;// Type mismatch: cannot convert from double to float
		f = 10.86f;//  at end we ahve to write f
		System.out.println("value of f=" + f);
		// value of f=10.86

		// Declare multiple float variables in single line
		float f1 , f2;
		f1 = 1.3f;
		f2 = 3.5f;

		//  HW display  f1 and f2 


		// double variables
		double d1;
		d1 = 1.45;// dont use d at the end 
		// default 1.45 is of type double ..if we dont write f at end , it will consider value as double data type

		//   //  HW display d1 value 

		// HW  declare multiple double variables and store/ assign some values to variables and display it



	}

}

-----------------------
package VariablesBasics;

public class charBasics {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// delcare char var
		char ch;
		
		//  store some value into char var
		//  single char  must enclose 'A'
		ch = 'A';
		System.out.println("ch value ="+ ch);//ch value =A
		
//		ch = 'ABc';// error :  char var - we have to store single character
		//Invalid character constant		
		
		

	}

}
//*******************************************
Aug 13 2022 Sat
---------------------
package VariablesBasics;

public class ByteBasics {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		//  byte 
		byte b1;
		b1 = 10;
		System.out.println("b1="+ b1);// b1= 10

		//  Declare multiple var  in single line



		// Declare multiple and assigne values in single line?
		// Data type var1 = val1 , var2 =  val2, var3 =  val3...etc ;
		byte b2=11,b3 =22,b4 =44;

		// can we declate d
		//			int a, float f,char ch;//  should not declare 2 diff data types in the same line
		int a;
		float f;

		//			int a, b=20;// valid 

		//  
		int x, y,z;

		x = y = z = 11;
		//  so all varisble x, y,z conatins  value 11

		System.out.println("x="+x);
		System.out.println("y="+y);
		System.out.println("z="+z);
		//			         x=11
		//					 y=11
		//					 z=11


		//HW  short 



		//HW  long



	}

}


--------------------------
package VariablesBasics;

public class floatVariable {

	public static void main(String[] args) {

		float f; //   f is of type flat -- decimla 
		//		  f = 10.86;// Type mismatch: cannot convert from double to float
		f = 10.86f;//  at end we ahve to write f
		System.out.println("value of f=" + f);
		// value of f=10.86

		// Declare multiple float variables in single line
		float f1 , f2;
		f1 = 1.3f;
		f2 = 3.5f;

		//  HW display  f1 and f2 
		System.out.println("f1=" +  f1);// f1=1.3
		System.out.println("f2=" +  f2);// f2=3.5
		
		// we can store number in float var 
		 f1 = 10; // no error
		 System.out.println("f1="+ f1);// f1=10.0
		 //   10 -  int data ---->   float val 
		 
		 //  type casting :  converting one data type to other data type 
		 //  converting int data type to float data type 		 
		 


		// double variables
		double d1;
		d1 = 1.45;// dont use d at the end 
		// default 1.45 is of type double ..if we dont write f at end , it will consider value as double data type

		//   //  HW display d1 value 
		System.out.println("d1=" +  d1 );// d1= 1.45

		// HW  declare multiple double variables and store/ assign some values to variables and display it
		   double d2, d3;
		   
		   d2 = 1.5677;
		   d3 = 67.676;
		   System.out.println("d2="+ d2);//  d2= 1.5677
		   System.out.println("d3="+ d3);	// d3= 67.676    
		   
		    
		   // error : Duplicate local variable d1
		   // Note :  no 2 var can have same name
		   //  duplicate local variables is not allowedd.
		   //   var name -- alyays unique 
		   //   we should give diff name for var
//		    int d1 ;// erro :  as it is duplicate var
		    //  it is decalred  with same name	

	}

}

--------------------
package VariablesBasics;

public class charBasics {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// delcare char var
		char ch;
		
		//  store some value into char var
		//  single char , must enclose 'A'
		ch = 'A';
		System.out.println("ch value ="+ ch);//ch value =A
		
		//ch = 'ABc';// error :  char var - we have to store single character only but not multiple character
		//Invalid character constant	
		//Note:   char var , we can store number also
		ch = 65;
		System.out.println("ch="+ ch);// does not display 65
		//    ch=A
		//  for each char - there ASCII no 
		//  65 --  A
		//  66 --  B
		//  97  -- a
		
		//ch = 1.23f; // error: Type mismatch: cannot convert from float to char
		
//		ch = 1.35 ;// Type mismatch: cannot convert from  double to char
		
//		ch = true; //  type mismatch we cannot convert from  boolean to char 
		
		

	}

}

-------------------------
package VariablesBasics;

public class booleanBascics {

	public static void main(String[] args) 
	{
		// declare boolean variable
		boolean  b1;// must declate 
		b1 = true;		
			
		//System.out.println("b1=" +  b);// error:  b var is not declared in main() method
		System.out.println("b1=" +  b1);// b1 = true
		
		b1 = false;
		System.out.println("b1="+ b1);// b1 = false
//		boolean b1;  // duplicate var name is  not allowed
		
//		x=10;
//		x= x+5;// 15
		
//		boolean b2 = 100;
		// Type mismatch: cannot convert from int to boolean
		
//		boolean b2 = 1.54f;
		// Type mismatch: cannot convert from float to boolean
		
//		boolean b2 = 'a';// 
//		Type mismatch: cannot convert from char to boolean
		
	}

}

-------------------------------
Aug 14 
--------------
Rules to Declare Varaible:
-----------------------------


package VariablesBasics;

public class RuleToWriteVarName 
{

	public static void main(String args[])
	{



		//Names can contain letters, digits, underscores, and dollar signs
		//   int mpid123_$;

		//
		//Names must begin with a letter
//		    float empsal;  
//		float 2empsa;  //   invalid    var name must start with alphbet but not number

		//Names should not contain whitespace
		      
//		       float emp   sal;// Invalid we should not give spaces in var name 
		       
		
		//Names can also begin with $ and _ (but we will not use it in this tutorial)
//		       int $eid;// valid
//		       int _eid;// valid 
		       
//		       int 2eid;// error :  should not  start with number
		       
		       
		//Names are case sensitive ("myVar" and "myvar" are different variables)
		       float esal;// valid  
		       float ESAL;// valid
		       
		       		       
		//Reserved words (like Java keywords, such as int or boolean) cannot be used as names
		  //   we should use predefined words as var name  
//		       int class;
//		       int float;		       
//		       int char;
//		       
//		       int if;
//		       int public;
		       
		 // Duplicate varibale names are not allowed 
		       int a;
//		       int a;// Duplicate local variable a
		       
	}

}


Data types:
   1. primitive data types :;   store only one value at a time

                  byte, short, int , long
		float, double
	char 
	boolean
	
   2. reference data types:
              we can store multiple values
	any class  is ex of reference data type
          Array :   can be store group of values
                       10,20, 30, 40 ....

	String - is predefined class in java 
                       often used in the form of data type

                    --   colllection of characters   and must be enclosed ""  doble quotes
                    "Ram" ,  "101" 

	int eid;
	String s;
	s= "Ram";


package VariablesBasics;

public class StringBasics 
{
	public static void main(String args[])
	{
		// Declaring String var
		
		String s;
		s =  "Ram";
		System.out.println("s="+  s);
		
	}
	

}

// s=Ram

FAQ:  What is the diff primitive data type and Reference data type?
1. Def 
2. ex:
--------------------------------------------

package VariablesBasics;

public class StringBasics 
{
	public static void main(String args[])
	{
		// Declaring String var
		
		String s;
		s =  "Ram";
//		s = 'ram';//  error //  char data type -- can store single char
//		s= 'A';// Type mismatch: cannot convert from char to String
		System.out.println("s="+  s);// s= Ram
		
		s = "123";// ok
		System.out.println("s="+  s);// s= 123
		
//		s= 123;// Type mismatch: cannot convert from int to String
		System.out.println("s="+  s);// s=123
		
//		s =  10.85f;
		
//		s=  true;// Type mismatch: cannot convert from boolean to String
		s=  "true";
		System.out.println("s="+  s);// s= true
		
		
	}
	

}

//o/p:
//s=Ram
//s=123
//s=123
//s=true


Opeartors:
1.Arithematic operators:
package OperatorsBasics;

public class ArithematicOpeartorsBasics {

	public static void main(String[] args) {
		//   + , - , *, / , % 
//		+   - to perform addition
//		- -              substarction
//		*  -  			multiplication
//		/   -			division (Quitient value )
//		%	-			modulus operator (Remainder value)
		
		//    10 +  2
		
//		int a, b;
//		a=10;
//		b= 2;
		
		// or
		int a=10 , b=2;
		
		//  perform addi and store result in var
		int addi= a + b;
		//       10 +  2   
//		        addi =   12
		System.out.println("addi="+ addi);// addi=12
		
		// substraction
		int sub = a - b;
		        //   10 -2
				// 8 value is stored in left side var i.e sub
		System.out.println("sub="+ sub);// sub = 8
		
		
		//HW  Multiplication
		
		
		
		// Division / --  quoteint vals
		int div = a / b ;
		        // 10 /2 
				//  5  (quotient)
		System.out.println("div="+ div);// div = 5
		
		// %  - remainder val
		 int rem = a % b ;
		         // 10 % 2
		 		//   0   - remainder
		 System.out.println("rem="+ rem);// rem=0		
		

	}

}

--------------------------------

2 .Relational operators:
    < , > , <= , >= ,  == , != 

package OperatorsBasics;

public class RelationalOperatorsBasics {

	public static void main(String[] args) {
		
		// < , > , <= , >= , ==, != // true/ false
		//   10 > 2 -   true
		int a=10, b=2;
//		int res = a > b;// Type mismatch: cannot convert from boolean to int
		//   int res=   true
		
		// Note :  int data type- we cannot store boolean values
		//   if we want to store boolean values i/e true/ false- we must declare boolean data type only
		
		boolean res = a > b;
					// 10 > 2 
					  // true  val is stored in ledft side var i.e res. so res  contains true
		System.out.println("res a>b= "+ res );// res a>b= true
		
		//    10 < 2  -  false
		boolean lessResult = a < b;
							// 10 < 2
							// false  will be stored in left side var i.e lessResult
							// so lessResult  conatain false
		System.out.println("lessResult="+lessResult);//lessResult=false
		
		//   10 > =5  true
		System.out.println("10 > =5 -->   "+ (10 >=5)  );
		// 10 > =5 -->   true
		
		//  10 >= 10   true
		System.out.println("10 >= 10  --> "+ (10 >= 10));
		
		// HW  execute all these ?
		
		// 10 <=5 false
		// 10 <=10  true
		
		//  10 == 10  true
		//   10 == 5   false
		
		//  10 != 5  true
		//  10 != 10    false
				
		
	}

}

//*************************
Aug 16 
********************
package OperatorsBasics;

public class CompoundOperatorBasics {

	public static void main(String args[])
	{
		//		Compound operators:
		//		      += , -= , *=, /=. %=,
		int a,b,c;
		//		int a;

		a=10;


		a += 5;
		//   a = a + 5
		//		        10 + 5
		//		        15 is stored in left side var i.e a
		System.out.println("a+=" + a);//
		//		+ -  adddition 
		//		+  - conctaneate or join 2 string 
		//		ex:      10 +20 = 30
		//		  "Ram" + 10  ==Ram10
		//		  10 + "sita" =  10sita
		// "ram" + "sita" =  ramsita
		//   "a+=" + a  =  a+=10



		a = 20;
		a -= 5; // or
		//		    a = a-5;
		//   a=   a-5
		//       20- 5
		//		    a=    15
		System.out.println("a-= " + a);

		b=2;
		b *= 2;
		//  b=  b*2
		//      b=  2*2

		System.out.println("b="+ b);	// b= 5	 

		// / =
		b=10;
		b /= 2;
		//    10/2 = quotient 5 
		//  b= 5
		System.out.println("b="+b);// b=5


		// %=
		//    %  modulus - remainder val

		b %=2;
		//   b is not  10%=2 wrong val
		//   5 %2 =1 remaindder
		System.out.println("b="+ b);// b=1
	}

}

----------------------
package OperatorsBasics;

public class LogicalOperartorsBasics {

	public static void main(String[] args) {
		//	Logical operators
		//		&& - Logical and operartor -- *  multiplication operations
		//   & - ampersands 
		//		|| - Logical or operator  --  +  addition
		//    | pipe symbol  or 2 vertical lines
		//		! - Not operator          -- >  invertion operation/  Reverse operation/  negation

		//   boolean values 

		// &&  
		//		a    b		a&&b  -- two ampersands 
		//		---------------------
		//		0	0		0		false	false	false
		//		0	1		0		false	true	false
		//		1	0		0		true	false	false
		//		1	1		1		true	true	true
		//		1 - true  , 0 false
		//  if any value is false -  o/p  - false
		// if both values are true -         true

		//		boolean  a = false, b= false;
		//		//		 int  res=   a && b;//
		//		boolean res =  a && b;
		//            false && false
		//		System.out.println("res="+ res);// res=false

		//*************
		//		boolean  a = false, b= true;
		//	
		//		boolean res =  a && b;
		////		               false && true
		//		System.out.println("res="+ res);// res=false

		//  **************************

		//		boolean  a = true, b= false;
		//		
		//		boolean res =  a && b;
		////		               true && false
		//		System.out.println("res="+ res);// res=false

		//*************
		boolean  a = true, b= true;

		boolean res =  a && b;
		//		        true && true
		System.out.println("res="+ res);// res=true

		
		













	}

}

//*************************
package OperatorsBasics;

public class LogicalOROperartorsBasics2 {

	public static void main(String[] args) {

		//		|| - Logical or operator  --  +  addition
	
		//   boolean values 

		//  
		//		a    b		a || b     +
		//		---------------------
		//		0	0		0		false	false	false
		//		0	1		1		false	true	true
		//		1	0		1		true	false	true
		//		1	1		1		true	true	true
		//		1 - true  , 0 false
		//  if any one value is true -  o/p  - true
		// if both values are false -         false

//				boolean  a = false, b= false;
////						 int  res=   a || b;//
//				boolean res =  a || b; // pipe symbol 
//		          //       false && false
//				System.out.println("res="+ res);// res=false

		//*************
//				boolean  a = false, b= true;
//			
//				boolean res =  a || b;
//		//		               false || true
//				System.out.println("res="+ res);// res=true

		//  **************************
//
//				boolean  a = true, b= false;
//				
//				boolean res =  a || b;
//		//		               true || false
////								1  +  0 = 1  true
//				System.out.println("res="+ res);// res=true

		//*************
		boolean  a = true, b= true;

		boolean res =  a || b;
		//		        true || true
		//				1  + 1 = 1 true
		System.out.println("res="+ res);// res=true

		
		













	}

}

//*********************

package OperatorsBasics;

public class ConctenationOperators {

	public static void main(String[] args) {
		
		System.out.println(10 +20); // 30  ==  addition
		
		System.out.println("Ram" + "sita");// Ramsita -- joining
		System.out.println("Ram"  + 10); // Ram10		- joining
		System.out.println(10 + "Sita");// 10sita		-- joining
		
		System.out.println("10" + "20");//   wrong o/p 30 
		// "10"  - string
		//    10  -  number -int number
					   // String  +  String  --  joinining
		
		int a=10; 
		System.out.println("Ram"  + a);
		//     						wrong -  Rama  - invlaid o/p 
//							String +  10 = Ram 10 
		
		int b =25;
		System.out.println(b + "Raju");// 
		//                 25Raju

	}

}

//*************************
package OperatorsBasics;

public class IncrementOpeartors {

	public static void main(String[] args) {
		  //  ++ -  increment operator
		//    increase number by 1 
		// synatx :
			//   ++ varname;
		
		 int a=10;
		 ++ a; //  incetemt of a +  1
		 //  Pre increment perator 
		 //  a=  a+1 //  10
//		 		a=  10 +1
//		 a=	  11
		 System.out.println("a="+a);// 11
		 
		 
		 // Post increment operator 
		 //    synatc:    var ++;
		 a ++;
		 //   a +1 
		 //   11 + 1
		 System.out.println("a="+a);// 12 
		 
		 
	}

}


//*********************

package OperatorsBasics;

public class DecrementOperator {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//  --  Decrement 

		//  -- -  increment operator
		//    decrease  number by 1 
		// synatx :
		//   -- varname;

		int a=10;
		-- a; //  decreemnt  of a +  1
		//  Pre decrement operator 
		//  a=  a - 1 //  10
		//			 		a=  10 -1
		//			 a=	  9
		System.out.println("a="+a);// 9


		// Post Decrement operator 
		//    synatc:    var --;
		a --;
		//   a -1 
		//   9 - 1
		System.out.println("a="+a);// 9


	}

}

//*****************************
Aug 17 
******************
comments :

//		 to comment    Ctrl + / 
//		uncomment  -   ctrl + /
//		System.out.println("a="+a);// 9
//		System.out.println("a="+a);// 9

//		commment multiple lines  --  select multiple lines - press ctrl + /
//		uncommment multiple lines  --  select multiple lines - press ctrl + /
//		System.out.println("a="+a);// 9
//		System.out.println("a="+a);// 9

		// comment multiple lines
		/*
		 * 
		 * this is comment . ignore comments will not excuted
		 */

		/*
		 * System.out.println("a="+a);// 9 System.out.println("a="+a);// 9
		 * System.out.println("a="+a);// 9
		 */

//		Note:  ctrl  +  shft + / - to commment multiple lines
//          ctrl +  shft + \     - to uncomment multiple lines
		
		
		  System.out.println("a="+a);
		  System.out.println("a="+a);// 9

//*************************

package OperatorsBasics;

public class NotOperator {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// not - negation - reverse -  opposite
		//  ! - not operator
//		!true   -  false
//		! false -  true
		
		System.out.println("Not -performs negation operation--> " + !true);// false
		System.out.println("Not -performs negation operation--> " + !false);// true
		
		boolean  res= !true;
		              //  false . stoored left side var i.e res
		System.out.println("res="+ res);// false
		
		

	}

}


//-------------------------------
package OperatorsBasics;

public class IncrementOpeartors2 {

	public static void main(String[] args) {
	// pre increment  ++a
		
		 int a=10;
		 int b = ++a;
		 //   first it performs preincrement operation and   a= 10 + 1 =11
		        //  10 + 1  after that it will assigne value to left side var i.e b
		 //  b=  11
		 System.out.println("b="+ b);// 11
		 System.out.println("a="+a); // 11
	
		 
		 int p=5;
		 int q= ++p;
		 //    p= p+1
		 //     p=  5+1= 6
		 // p =6
		 // q= p;
		 //  q=6
		 System.out.println("p="+p);// p= 6
		 System.out.println("q="+q);	// q=6	 
		 
		 
//		 int m = 10;
//		 int m = ++m;//  We should not declare same var name again i.e m 
//		 System.out.println("m="+ m);
				 
		//  **************
		 
//		 // Post increment operator 
//		 //    synatc:    var ++;

		 int x= 5;
		 int y =  x ++;
		 //   post increment --  first it performs assignment i.e y=x
		 //   2nd it performs increment operation
		 
		 //    1.  y =x   y=  5
		 //   x=   x +1  = 6
		 
//		   y++;
//		   y= y+1
		 System.out.println("y="+y);// 5
		 System.out.println("x="+x);// 6
		 
//		 ex2:
		 
		 int d = 3;
		 int e= d++;
		 // 1. assignment  e= d
//		 					 e=  3
		 // 2 . d=  d+1
		 //       d=  3+1
		 //         d= 4
		 System.out.println("d="+d);//4
		 System.out.println("e="+e);// 3
		 
//		 HW ex3:
		 
		 int f = 7;
		  int g = ++f;
		 
		 
		 // HW  ex4
		 int  h = 9;
		 int i = h++;
		 
		 
		 
		 
		 
		 
	}

}

------------------

package OperatorsBasics;

public class PrePostDecrementOperator2 {

	public static void main(String[] args) {
		
//			--
//		predecr   --a;
//		postdecre  a  --;
		
		int a= 8;
		int b = --a;
		// 1 it performs decrement     --a; 
//		a=  a-1	
//		   a= 8-1
		// a=7
		
		//2 nd it performs assignment   b =a 
		//  b = 7
		System.out.println("a="+a);// 7
		System.out.println("b="+b);// 7
		
		//		postdecre  a  --;
		
		int x= 5;
		int y = x --;
		// 1st it performs assignment  y= x
		//								 y= 5
		//2 performs decrement  x--;
//		          x= x-1
//		          x= 5-1
//				x=4
		System.out.println("x="+ x);	// x=4 
		System.out.println("y="+ y); // y=5
		
		
		// HW Ex2:
		int p = 4;
		int q = --p;
		      //   p = p-1
//						4-1= 3
			//  p= 3
//		2.  q= p
		//   q=  3
		System.out.println("p="+ p); // 3
		System.out.println("q="+ q); // 3
		
		// HW 
		int g= 3;
		int h = g--;	
		
	
	}

}

--------------------
package ControlStatementsBasics;

public class IfBasics {

	public static void main(String[] args) {
		//  Control stmts:
		//   we can control flow of execution  based on condition
//		ex: 1.  if -  to check given conf
//		2. if else stmt
//		3. swith 
		//1 if - predefined key word in java -
//		synatx
//		 if(cond) //  true/ false //  age = 30 >18  - true
//		 {
//			 stmt1
//			 stmt2;
//		 }
		
		if(30 > 5) //   true
		{
			System.out.println("stmt-1");
			System.out.println("stmt-2");
		}
		//  comment
		System.out.println(" out of if block");
		System.out.println("  write anything ");
	
		
		

	}

}
--------------------

package ControlStatementsBasics;

public class IfBasics 
{

	public static void main(String[] args) 
	{
		//  Control stmts:
		//   we can control flow of execution  based on condition
//		ex: 1.  if -  to check given conf
//		2. if else stmt
//		3. swith 
		//1 if - predefined key word in java -
//		synatx
//		 if(cond) //  true/ false //  age = 30 >18  - true
//		 {
//			 stmt1
//			 stmt2;
//		 }
		
//		if(30 > 5) //   true -  if cond is true ,  it goes to if block, it executed stmt-1 and stm-2
		// if cond - false , it does not go to if block or enter if block
		//  block -  is collecton of stmts and must be enlcosed in {  }
		if( 30 < 5) //  false
		{  //  block
			System.out.println("stmt-1");
			System.out.println("stmt-2");
			
		} // end of if block
	

		System.out.println(" out of if block");//  always gets executed if cond = true/ false
		System.out.println("  write anything ");		
		

	}

}

//*******************
package ControlStatementsBasics;

public class IFElseBasics {

	public static void main(String[] args) {
//		 if else
//		if(cond) // true/ false
//		{    //  gets executed if cond is true
//			stmt1;
//			stmt2;
//		}
//		else  //  gets executed if cond - false
//		{
//			stmt-3;
//			stmt-4
//		}
//		stmt-5;	 // always gets execuetd if cond - true/ false
		
//		if(10> 2) // true
		if(10 < 2)	// false
		{  //    gets excited if cond i s true
			System.out.println("stmt -1");
			System.out.println("stmt -2");
		}
		else
		{ // executes else block - if cond os false 
			System.out.println("stmt -3");
			System.out.println("stmt -4");
		}
		
		System.out.println("stmt-5");

		
			
		
	}

}

//*******************

package ControlStatementsBasics;

public class VotingEligibiity {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
//		int age  =20;
		int age  =15;
		// check person is eligible for voting
		//  age > 18 -   voting
		//            esle   not eligible for votinh
		
		if( age > 18) //  20 > 18 //  true
			//  15 > 18 false 
//		if(true)
		{
			System.out.println("eligible for voting as age is > 18 .persosn age="+ age);
		}
		else // false
		{
			System.out.println("Not eligible for voting as age is < 18 .persosn age="+ age);
		}
		
		
		

	}

}

//*********************************************
Aug 18 
*************

package ControlStatementsBasics;

public class IfElseIfBasics {

	public static void main(String[] args) {

		//  if elseif else if
		//		syntax:
		//		  if(cond) //  true
		//		  {
		//			  
		//		  }
		//		  
		//		  else if(cond) // true
		//		  {
		//			  
		//		  }
		//		  else if(cond) // true
		//		  {
		//			  
		//		  }
		//		  else // if all conditions are false
		//		  {
		//			  
		//		  }

		//		int a = 10;
		//		int a = 5;
//		int a = -1;
		int a= 0;
		
		if(a ==10) //  
			// 10 == 10 /true
			// 5 ==10 false
			//  -1 == 10 false	
		{
			System.out.println("10==10");
		}
		else if(a> 0)
			//  5 >0  true
			// -1 >0 false
		{
			System.out.println("a is positive no");
		}

		else if(a ==10)
			//  -1 ==10 fALSE
		{
			System.out.println("a ==10");
		}
		else if(a<0)
			//  -1 < 0   TRUE
		{
			System.out.println(" a is negative no");
		}


		System.out.println("outo of if block"); //   this stmt always get executed even if cond - is true / false also
		


	}
}

------------------------

package ControlStatementsBasics;

public class SwitchCondBasics {

	public static void main(String[] args) {
		
		//  else - k/w in java lang.
		
		 // switch - is k/w in java lang.
		//    can be used to execute set of cases
		//   alternative for if else if()....
//		swicth, case, break , default --  are keywords in java
//		syntax:
//		switch(expre)
//		{
//		case 1:
//			      stmt1;
//			      break;
//		case 2:
//				stmt2;
//				break;
//		case 3: 
//				stmt3;
//				break;
//		default:
//			   stmt4;			   	
//		}
		
		//   1- Sunday,  2 - Monday , 3 - Tuesday
//		int caseno = 1;
//		int caseno = 2;
//		int caseno = 3;
		int caseno = 4;
		switch(caseno)
		       // 1 , 2 ,3 , 4
		{
		case 1 :
				System.out.println("1- is Sunday");
				System.out.println("1- is Sunday");
				System.out.println("1- is Sunday");
				break;//  break is k/w , can be used to come out of swicth stmt or block
		case 2:
			  System.out.println( "2 is  Monday ");
			  break;
		case 3:
			System.out.println("3- is Tuesday");
			break;
		
		default:
				System.out.println("invalid case no -"+ caseno);
			  
		}//  end of swicth block
		
		System.out.println("out of swicth block");
		
		

	}

}

---------------

package ControlStatementsBasics;

public class SwitchCondBasics2 {

	public static void main(String[] args) {
		
	
		
		//   1- Sunday,  2 - Monday , 3 - Tuesday
		int caseno = 1;
//		int caseno = 2;
//		int caseno = 3;
//		int caseno = 4;
		switch(caseno)
		       // 1 , 2 ,3 , 4
		{
		case 1 :
				System.out.println("1- is Sunday");
//				break;//  break is k/w , can be used to come out of swicth stmt or block
		case 2:
			  System.out.println( "2 is  Monday ");
//			  break;
		case 3:
			System.out.println("3- is Tuesday");
//			break;
		
		default:
				System.out.println("invalid case no -"+ caseno);
			  
		}//  end of swicth block
		
		System.out.println("out of swicth block");
		
		// note:  if we dont  write break stmt in each cases, it executes all cases  i.e case -1, Cas -2, Case-3  and also default stmt
		

	}

}



o/p:
1- is Sunday
2 is  Monday 
3- is Tuesday
invalid case no -1
out of swicth block

---------------------
package ControlStatementsBasics;

public class SwitchCondBasics2 {

	public static void main(String[] args) {
		
	
		
		//   1- Sunday,  2 - Monday , 3 - Tuesday
		int caseno = 1;
//		int caseno = 2;
//		int caseno = 3;
//		int caseno = 4;
		switch(caseno)
		       // 1 , 2 ,3 , 4
		{
		case 1 :
				System.out.println("1- is Sunday");
//				break;//  break is k/w , can be used to come out of swicth stmt or block
		case 2:
			  System.out.println( "2 is  Monday ");
			  break;
		case 3:
			System.out.println("3- is Tuesday");
//			break;
		
		default:
				System.out.println("invalid case no -"+ caseno);
			  
		}//  end of swicth block
		
		System.out.println("out of swicth block");
		
		// note:  if we dont  write break stmt in each cases, it executes all cases  i.e case -1, Cas -2, Case-3  and also default stmt
		

	}

}

o/p:
1- is Sunday
2 is  Monday 
out of swicth block

---------------

package ControlStatementsBasics;

public class SwitchCondBasics3 {

	public static void main(String[] args) {
		

//		float caseno = 1.23f;
//		char caseno = 'A';
		char caseno = 'B';
		//  Expression -  should not float value. we should not give float value in swicth cond
		switch(caseno) // Cannot switch on a value of type float. Only convertible int values, strings or enum variables are permitted
		       // 1 , 2 ,3 , 4
		{
		case 'A':
				System.out.println("A-Apple");
				break;//  break is k/w , can be used to come out of swicth stmt or block
		case 'B':
			  System.out.println( "B-Ball ");
			  break;
		case 'C':
			System.out.println("C-Cat");
			break;
		
		default:
				System.out.println("invalid case no -"+ caseno);
			  
		}//  end of swicth block
		
		System.out.println("out of swicth block");
		
				

	}

}

o/p:
B-Ball 
out of swicth block


--------------------
package ControlStatementsBasics;

public class SwitchCondBasics4 {

	public static void main(String[] args) {
		
		
//		String val = "Mon";
		String val = "Tue";
		switch(val) 
		       // Mon
		{
		case "Mon":
				System.out.println("Monday");
				break;//  break is k/w , can be used to come out of swicth stmt or block
				
		case "Tue":
			  System.out.println( "Tuesday");
			  break;
			  
		case "Wed":
			System.out.println("Wednesday");
			break;
		
		default:
				System.out.println("invalid day -"+ val);
			  
		}//  end of swicth block
		//  after switch block
		System.out.println("out of swicth block");
		
				

	}

}

Revision:

Switch ()   - k/w
  swicth(exp/ var/ int var/  char var/ String var but not float var, double var)
{
   case val1 :
		stmt1l
		break;
case val2:	
		stm2;
		break;

default:
	stmt 3;
	
}


HW Can we use double var,  boolean var in Switch stmt?


package LoopStmtBasics;

public class LoopBasics1 {

	public static void main(String[] args) {
		 //   if stmt, if else stnmts
		//  if else if   else if ....stmts
		// loop stmts:
		// loop
		
		
//		System.out.println("Hi java");
//		System.out.println("Hi java");
//		
//		// again we have write
//		System.out.println("Hi java");
//		System.out.println("Hi java");
//		
//		//
//		System.out.println("Hi java");
//		System.out.println("Hi java");
//		
//		System.out.println("Hi java");
//		System.out.println("Hi java");
	
	//   100 times,  1000 times
		//  go for loop -  -  when ever we wwant to execute group of same stmts multiple times
		//       repeatedly i wnt to execure same set of stmts
//		 types:  
//		1. for loop
//		2. while loop
//		3. do while loop
		
//		1. for loop:
		
//		syntax:
		
//		for( initialisation;  cond ; Increment/ Decrement operator)
//		{
//			
//		}
						
		for(int i=0; i<=100; i++)
//			   1.   2. 0 < =5  true ,   4 th step increment  i = 0+1 =1  , 1+1,=2 , 3,4 , 5 , 6
//			           1 <=5 true
//						2< =5 true
//						3<=5 true
//						4<=5  true
//						5<=5 true
//						6<=5  false -- it will not enter for loop   and come out of for loop and it executes stmts after for loop
			
		{ //  begining of for loop
			                                     // 3rd step
			//   goes inside for looop  if cond is true /  if cond is false, it will not enter for loop at all
			System.out.println("Hi java");
		} // end of for loop
		
		System.out.println("out of loop");
		
		// Hi java
		// Hi java
		//Hi java
		//Hi java
		//Hi java
		//Hi java
//		out of loop
		
		
		
		
		
		
		
		
		
		
		

	}

}

//*****************************

Aug 19 
*************************

package IfPrograms;

public class EvenNo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int num =  5;
		//  check 4 is even no 
		//    num %2 =  remainder val = 0- even no  else it is not even no
		
		if(num %2 == 0)
		 // 4 % 2  == 0
//			0 ==0  true 
			// 3% 2 = 		5 %2 = (1 ==0)   false 
			// 1 == 0 false
		{
			System.out.println("Given No="+ num + " is even no");
		}
		else
		{
			System.out.println("Given No="+ num + " is not even no");
		}
		
		

	}

}


--------------------------------
package IfPrograms;

public class OddNo {

	public static void main(String[] args) {
		
		// odd no 
		//    3 %2 ==  rem =1 ==1
//		int num = 3;
		int num = 4;
		
		if(num%2 == 1)
		// 3%2                  4 %2 
//			 1 ==1   true		0 == 1  false
		{
			System.out.println("given no ="+ num  + " is odd no");/// ok 
		}
		else
		{
			System.out.println("given no ="+ num  + " is  not odd no");
		}

	}

}

-----------------------------
package IfPrograms;

public class NumbersEqualORNot {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int a, b;
		a=10;
		b=10;
		b=20;
		
		if( a == b )
		{ // 10 == 10 // true
		// 10 == 20 false
			System.out.println("a = " + a +" and  b="  + b+  "values are equal");
		}
		else
		{
			System.out.println(" a= " + a + " and  b ="  + b +   " values are not equal");	
		}		
		

	}

}

-----------------------------
package IfPrograms;

public class divisibleBy4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
//		number / 4 =    gives / returns quotient value
//		number % 4 =    gives / returns  remainder value
//		int num = 12;
		int num = 13;
		
		if( num % 4 == 0 )
		{ // 12 %4 				13%4
			// 0 == 0  true       1 == 0 false
			
			System.out.println("given no =" + num  + " is divisible by 4");
		}		
		else
		{
			System.out.println("given no =" + num  + " is not divisible by 4");
		}	

	}

}

------------------

package IfPrograms;

public class PositiveNumber {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//  any number is > 0 
//		ex  1, 2 ,3,  99
		// -ve umber    number < 0  
//		ex: -1 , -2, -5...
		
//		int num = 3;
		int num =  -1;
		
		if(num > 0) //  +ve no
		{ // 2 >0  true
			// 3> 0  true 
			//  -1 >0   false
			System.out.println("Given no ="+ num +" is a +ve no");
		}
		else //  Not a +ve no
		{
			System.out.println("Given no ="+ num +" is not a +ve no");
		}
		
		

	}

}

//*******************************

HW:  WAP to check given employee salary is greater than 50000 and display appropirate msg

HW:  WAP to to check given employee salary is Lesser than 50000 and increase salary by 2000?

Loop:
package LoopStmtBasics;

public class LoopBasics1 {

	public static void main(String[] args) {
		 //   if stmt, if else stnmts
		//  if else if   else if ....stmts
		// loop stmts:
		// loop
		
		
//		System.out.println("Hi java");
//		System.out.println("Hi java");
//		
//		// again we have write
//		System.out.println("Hi java");
//		System.out.println("Hi java");
//		
//		//
//		System.out.println("Hi java");
//		System.out.println("Hi java");
//		
//		System.out.println("Hi java");
//		System.out.println("Hi java");
	
	//   100 times,  1000 times
		//  go for loop -  -  when ever we wwant to execute group of same stmts multiple no of  times
		//       repeatedly i want to execute same set of stmts
//		 types:  
//		1. for loop
//		2. while loop
//		3. do while loop
//		4. for each loop --  array , Colllection objects
		
//		1. for loop:
		
//		syntax:
		
//		for( initialisation;  cond ; Increment/ Decrement operator)
//		{
//			stmt1;
//			stmt2;
		
//		}
						
//		for(int i=0; i<=3; i++)// i =0 +1 = 1		 
////			         0<=3  true 
////					 1<=3  true
////				      2<=3 true
////			          3<=3 true
////			           4<=3  false  -- does not enter for loop
//		{ //  begining of for loop
//			                                     // 3rd step
//			//   goes inside for looop  if cond is true /  if cond is false, it will not enter for loop at all
//			System.out.println("Hi java");
//		} // end of for loop
//		
//		System.out.println("after for loop -- out of loop");		
		
		//*******************************
		
		// display numbers 1 to 3
		//  o/p:  1
////				  2
////				  3
//		for(int i=1; i<=3; i++) //i =1 +1 =2 +1 =3 +1 =4
//		{           // 1<=3   true     
////						2<=3  true
////						3<=3 true
////				        4<=3 false
//			System.out.println(i);
//		}
//	
//	System.out.println("after loop");	
		
	//    1
//		  2
//		  3
		
	//*****************************
	
		// display numbers 2 to 5
		
//		for(int i=2;i<=5;i++) // i = 2 +1 =3 +1= 4 +1 =5 +1 =6
//		{          // 6<=5 false
//			System.out.println(i);
//		}
//		
//		2 ok
//		3 ok
//		4  ok
//		5  ok
	
	
		//************************************
		
		//   displays numbers 3 to 1
//		for(int i =3; i <=1 ; i++) 
//		{          //  3 <=1  flase - does not enter -- come s out of for loop
//			System.out.println(i);
//		}
//		
//		System.out.println("after loop");
//		
//----------------------------------------------
//		for(int i =3; i >=1 ; i++)  //  i= 3 +1 =4 +1 = 5 +1 =6
//		{          // 3 >=1  true - 
//				  //  4 >= 1 true
//			//        5>=1  true
//			//        6>=1  true ////     this is infinite loop - as cond is always true and it does not become false at all
//			System.out.println(i);
//		}
//		
//		System.out.println("after loop");
		
		// 3 
		// 4
		// 5
		//---------------------------
		// 
//		for(int i =3; i >=1 ; i--)  //  i= 3-1 =2 -1 =1 -1 =0 
//		{          // 3 >=1  true - 
//				  //   2 >=1 true
//			//         1>=1  true
//			//         0 >= 1  false - does not enter for loop
//		
//			System.out.println(i);
//		}
//		
		// 3
		// 2
		// 1
		
		// HW  display numbers from  20  to 5
for(int i=20; i >=5;i--) // i = 20-1 =19 -1 =18. .....6 -1 = 5 -1= 4
//		{          // 20 >=5 true
//			//        19>=5  true
//			//		  18 >=5 trye
//			//			6>=5  true
//			//			5>=5 true
//			//			4>=5  false
//			System.out.println(i);// 20  19 18.....6 5
//		}
		

		
		// HW  display numbers  from 7  to 45
			int i;
		for(i= 7; i<=45;i++)// i = 7+1 =8 +1= 9 .... 45+1 =46
		{       // 7<=45 true 
			//	8 <=45  true
			//9 <=45 true
			// 45 < =45 trye
			// 46 <=45  false
			System.out.println(i);// 7  8  9...... 45
		}
		
				
		//  instead of increment operator , we can use i = i+ 2
			// i= i+3
		
		for(int i=1;i<=5; i = i+2 ) // i = 1+2 =3+2 =5 +2 =7
		{         // 1 <=5 true 
			 //      3 <=5 true
			//       5<=5  true
			//       7<=5  false
			System.out.println(i);
		}
		//   1 
		//   3
		//   5
		

	} // main
}

***************************************************
Aug 20 
**************
package LoopStmtBasics;

public class InfiniteLoop {

	public static void main(String[] args) {
		// infinite loop :   block of stmts - keep on executing continously
		//  cond - is always false . it never becomes false
//		
//		for(int i =3; i >=1 ; i++) // 3.  i =3 + 1 =4 +1 =5  +1
//		{           // 3 >=1 true 
//					// 4>=1  true
//			//			5>=1 true
////						6>=1  7 , 8  , 9  ,10.........100
//			System.out.println("Hi");
//		}
		
		// ex2:
		
		for(;;) //  cond is not specified , it assumes that cond =  true by default
		{  //   true
			System.out.println("Hi Java");//  infinite loop
		}
		// Hi Java
		// Hi Java
		// ...
		// ....
		// Hi Java --- infinite looop
		
		//  Note:  Terminate button in console window 
		// click terminate button to stop program execution
		
		

	}

}



package LoopStmtBasics;

public class WhileLoopBasics {

	public static void main(String[] args) {
		// While loop:  while - predefined word in java
		//		syntax:
		//		while(cond)  // if cond - true - it enters while loop,
		//		{            //          - false - it does not enter while loop  and comes out of while loop. ctrl goes after while loop
		//			//  stmt1;
		//			// stmt2;

		//		   ++ Inc;  --Decr; // Dont forget to increment / decrement operator
		//		}
		//		
		//		int i=1;
		//		while(i<=3)
		//		{   // 1<=3 true
		//			// 1<=3  true
		//			// 1<=3 true
		//			// 1<=3 true....... infinite loop .  i value is always =1 only as we did not increment / decreement value of i
		// 			System.out.println("Hi");
		//		}

		// Hi
		// Hi
		// Hi
		// ............. infinite loop

		//*********************
		//		int i=1;
		//		while(i<=3)
		//		{   // 1<=3 true
		//			// 2<=3 true
		//			// 3<=3 true
		//			// 4<=3 false --  comes out of while loop
		// 			System.out.println("Hi");
		// 			//++i; // i = 1 +1 =2 +1 =3  +1 =4
		//		}

		// Hi
		// Hi
		// Hi

		//**************************************
		//		ex
		//		
		//		while(true)// 
		//		{
		//			System.out.println("Hi Java");//   infinite loop
		//		}
		//**************************************

		//		int i=10;
		//		while(i<1)
		//		{  // 10 <1 - false - it does not enter loop , comes after while loop , executes next stmts.
		//			System.out.println("Hi Java");
		//		}
		//		
		//		System.out.println("after loop");
		//		after loop

		//********************************
		//  WAP  to display numbers 1 to 10 
		//		
		//		int i =1;
		//		while(i <=10 )
		//		{   // 1 <=10 true 
		//			// 2<=10 true
		//			// 3<=10 .....7,8,9,10<=10 true   11<=10 = false
		//			System.out.println(i);
		//			i++;//  i =1 +1 =2 +1 =3..... 10 +1 =11
		//		}
		//		
		// 1
		// 2
		//....  10 

		//*****************************************
		// WAP to display numbers 3  to 1 

		int i= 3;
		while(i >=1 )
		{ //   3 >=1 true
			// 2 >=1 true
			// 1>=1 true
			//  0>=1 false --  it does not enter while loop and comes out of loop ,  
			System.out.println(i); // 3  2 1
			i--;// i =3 -1 =2 -1 =1 -1 =0 
			//			i++;// it goes to infinite loop
		}

		System.out.println("after while loop");
		//		3
		//		2
		//		1
		//		after while loop
		//		

		// HW   WAP to display numbers 3 to 6


		// HW   WAP to display numbers  4 to 2


		//**************************************

	}

}

//-------------------
package LoopStmtBasics;

public class DoWhileLoopBasics1 {

	public static void main(String[] args) {
//		synatx:  do while
//		do
//		{
//			// stmt1;
//			// stm2;   //  stmt1 and stm2 gets executed atleast once 
//		}		
//		while(cond);//  cond is checked at end only
		//  if cond = true it goes to do loop , 
		//       .......
		//     cond = false ,it does not enter loop , comes out of loop
		
//		int i=1;
//		do 
//		{
//			System.out.println("hi Ram");
//			System.out.println("hi sita");
//		}
//		while(i>10);
//		//    1 > 10 false 
//		
//		System.out.println("after do while loop");
		
		//hi Ram
//		hi sita
//		after do while loop

		// ****************************
		int i=1;
		do 
		{
			System.out.println("hi Ram");
			System.out.println("hi sita");
			i++;// i =1 +1 =2 + 1 =3 +1 =4
		}
		while(i<=3); //  this loop gets excuted 3 times 
		//  1 <=3 true 
		//  2 <=3 true
		// 3<=3 true
		//  4 <=4  false
		System.out.println("after do while loop");
		
//		hi Ram
//		hi sita
//		hi Ram
//		hi sita
//		hi Ram
//		hi sita
//		after do while loop

		// Difff b/w while loop and do while loop?

//		while() //  cond is checked intially only  but not at end
//		{
//			
//		}
//		do while loop - cond is checked at end . so do block gets executed at least once even if cond is false

		//**************************************

	}

}

---------------
package LoopStmtBasics;

public class breakBasics {

	public static void main(String[] args) {
		// break - k/w in java
		//   break stmt used to come out of loop (for, While, do while loop) 
////		swicth
//		case 1 :
//				break;
		//*******************************
//		for(int i=1; i<=3;i++) // i=1 +1 =2 +1 =3
//		{          // 1 <=3  true
//			// 		 2<=3 true
//			System.out.println("i="+i);//  i=1 , 2 ,3
//			if( i== 3) 
//			{ // 1 == 3 false
//				// 2 ==3 false
//				// 3 ==3 true , it enters if block
//				break;//  come out of loop
//			}
//		}
//		
//		System.out.println("after loop");
		
//		        i=1
//				i=2
//				i=3
//				after loop
		
		//*******************************
		// break in while loop
		int i=1;
		while(i<=3)
		{ //  1 <=3 true
			// 2<=3 true
			if(i==2)// 1 == 2 false
			{       //  2==2  true
				System.out.println("i="+ i);// i =2
				break;//  comes out of loop
			}
			
			i++;// i = 1 +1 =2
		}
		// after while loop
		System.out.println("ends here");
		
//		i=2
//				ends here
//		Note:   break stmt can be used switch,  for loop, while loop, do while loop.
		//  swicth -- break can be used  to come out of swicth block
		// for loop --                   to come out of for loop
		// while loop--					 to come out of while loop
		// do while loop-                to come out of do while loop   
		
		
		//*******************************
		
		
		
	}

}

-------------------------------------

package LoopStmtBasics;

public class ContinueBasics {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//  continue is k/w in java;
		//		ex:  continue;		

		for(int i=1;i<=4;i++) // i =1 +1 =2 + 1 =3
		{           // 1 <=4  true
			// 			2<=4 true 
			//  3 <=4 true
			if(i==2)// 1 == 2 false
			{ // 2==2  true	,  it executes continue stmt,  goes to next iteration 
				//  3== 2 false
				continue;// to continue next iteration , by skipping iteration  - goes next increment value				
			}
			System.out.println("i=" + i);// 1	3		
		}

		//				i=1
		//						i=3
		//						i=4

	}

}

****************************************
		Aug 21 
******************************************
package LoopStmtBasics;

public class NestedIfBasics {

	public static void main(String[] args) {
		//nested if :   wiring if cond stmt inside if cond stmt -
		// int i=3;
		int i=6;
		if(i>=5) // outer if cond 
		{ // 3 > =5 false
		 // 6 >=5  true
			System.out.println("i >=5");// i >=5
			if(i>=2) //  inner if
			{ // 6 <=2 false
				System.out.println("i >=2");
			}
			
		}  // end of if 
		
		System.out.println("after if");

	}

}


----------------------

package LoopStmtBasics;

public class NestedForLoop {

	public static void main(String[] args) {
		
		// nested for loop :
		// writing for loop inside for loop is called - nested for loop
		for(int i=1;i<=3;i++) // outer for loop, i=1  +1 =2 +1 =3
		{	  //     1<=3 true
			//      2<=3 true
			for(int j=1;j<=3;j++) // inner for loop, j=1 +1 =2 + 1 =3 + 1 =4
			{          // 1<=3 true
						// 2<=3 true 
					//     3<=3  true
				// 		4<=3  false
				System.out.println("i="+ i + ", j="+j) ;// i=1 , j=1
			} // end of inner loop
			System.out.println("coming out of inner loop");
		} // end of outer loop
		
	}

}

// i=1 , j=1
// i=1 , j=2
// i=1 , j=3

// i=2  j =1
//i=2		j =2
//	i=2	j=3		
				
---------------------------------
package ArrayBasics;

public class ArrayPrograms {

	public static void main(String[] args) {
		//
		int a =10;
		int a2 =20;
		int a3 =30;
		int a4 =40;
		//...... 100  values , we should declare 100 variables a1, a2, ..... a100.
	  
//		We willl go for array
//		Array :   to store group of same data type values in single variable
		 
//		ex:    10,20 ,30 ,40 .....
//		ex2:     10.3f, 2.3,4.5f
		
		// invlaid :   10, 3.4f, 4.5, 'A'...
		//  in array, we can store similra data type of values
		//                            same type of values
		// we cannot store in one int val, one float val, one char val in array
		//   homogeneous value --    same type of values
		
//		Syntax:
//		Declare array :
		//  create int array 
		int arr []  =  new int [3];
		// new is a key word -  create array /  create obj 
		//   [3 ]  -- represents size of array
		//   we can store max 3 values . 
		//  in array , vlaues are stored in index no.
		//10   indexno =0
		// 11, index no =1..
		//always index no starts 0 to 2
		
		//  assigne value to array
		arr[0] = 10 ; //  storing 10 value in arr[0]
		arr [1]  =20; //  20 value is stored in left side var  arr [1]
		arr[2]  = 30; //  30 values is stored in left side var  arr [2]
		
//		arr[3] =  40;//Error:  index no is not exist
		//size  =3 we can store max 3 values, index = 0 to size-1 . i.e o to 3-1 =2
		//Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
//		at ArrayBasics.ArrayPrograms.main(ArrayPrograms.java:42)
		
		// fn + f5 --  light in keyboard
			// -ve arr[3]
		System.out.println("arr [0]=" +  arr[0]);
		System.out.println("arr [1]=" +  arr[1]);
		System.out.println("arr [2]=" +  arr[2]);
//		System.out.println("arr [3]=" +  arr[3]);
		
//		arr [0]=10
//				arr [1]=20
//				arr [2]=30
		// get size of arra
		int len= arr.length;
		System.out.println("length of array = " + len);//  3
		
		//  how to get values from array / iterarte values from array
//		for(int i=0; i<=2;i++ )
		for(int i=0; i<= arr.length -1 ;i++ ) // 3-1 =2  arr.length =100  i=0 to 99
				// 0<=2
		{            // 1<=2
					// 2 < =2
			//     3<=2 false
//			arr[0];
//			arr[1];
			//  arr [99];
			System.out.println("values from array="+ arr[i]);// arr[3] 
		}
		
//		values from array=10
//				values from array=20
//				values from array=30
		
		// for each loop -- to read values from array 
		
//		for(datatype var : arrname)
//		{
//			
//		}
		System.out.println("use for each loop");
		for(int eachval : arr )
		{
			System.out.println(eachval);
		}
		
		
		// HW  declare  float array and store some  4 values  and display array values

		// HW  declare  double array and store some  3 values  and display array values
		// HW Declare char array and store some 5 values and display  array values
		// HW Declare boolean array and store some 3 values and display  array values
		// HW Declare String array and store some 3 values and display  array values
		
		// HW Repeat above programs with for  loop
		// HW Repeat above programs with for each loop
		
		
		// Note:  in ararry . can we store diff data type value?
		
//		int barr[]  = new int [4];
//		barr[0] =10;
//		barr[1] = 3.2f;// error 
//		barr[2]  =  'A';//no error :   65 -A, a- 97 
//		barr[3] = "Ram";
		
		
 		// HW diplay array values in reverse order /
		//  10,20,30 
//		o/p  :  30  20  10
		
		// WAP  to check array contains 20 value is there or not
		// WAP to check array contain 40 or not.
		
		

	}

}
***************************************
	Aug 23 
***************************************

package ArrayBasics;

public class floatArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// HW  declare  float array and store some  4 values  and display array values
		
				float farr [] =  new float [3];
				// Note: if we dont store/ assign any values float array, it store 0.0 in array by default.
//				 i.e 0.0
				System.out.println("Default values in float array- 0.0");
				for(int i=0;i<=farr.length-1;i++)
				{
					System.out.println(farr[i]);
				}
				
//				0.0
//				0.0
//				0.0
//				
				farr[0] = 1.1f;
				farr[1] =  2.2f;
				farr[2] =  3.3f;
				System.out.println("arr length="+ farr.length);// 3
				for(int i=0;i<=farr.length-1;i++)
				{
					System.out.println(farr[i]);
				}
				
				//o/p:
//				1.1
//				2.2
//				3.3
				
				//  for each loop
				System.out.println(" get all values from farr using for each loop");
				for(float fval : farr)
				{
					System.out.println(fval);
				}
				
//				 get all values from farr using for each loop
//				 1.1
//				 2.2
//				 3.3

	}

}

-----------------------------
package ArrayBasics;



public class ArrayValuesinreverseOrder {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int a [] = new int [3];
		a[0] = 10;
		a [1] = 20;
		a[2] = 30;
		
		System.out.println("dispaly array values in reverse order");
		
		for(int i=2 ; i>=0 ;i-- )// i =2 -1 =1 -1 =0 -1 = -1
		{             //2>=0 true
					// 1 >=0  true
			//     0>=0  true
			//     -1 >=0  false
			    //  a[2]- 30 -
				//  a[1]  -20
				//  a[0]
			System.out.println(a[i]);// a[2] -30 , 20,10
 		}
		
//		dispaly array values in reverse order
//		30
//		20
//		10
	}

}

		
		//  For each -  iterarte/ get  values in forward direction
		           // cannot be used to displays vals in revers order


------------------------
package ArrayBasics;



public class ArraycontainsGivenVal {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int a [] = new int [3];
		a[0] = 10;
		a[1] = 20;
		a[2] = 30;  //  10 , 20 , 30
		
//		int expectedNo = 20;
		int expectedNo = 5;
		// 3-1
		String valfound = "No";
		for(int i=0;i<=a.length-1;i++)
		{
//			System.out.println(a[i]);
			if(a[i] == expectedNo)
			{  // 10 == 5 
				// 20 == 5  false
				// 30 == 5 false
				System.out.println("array contains given value="+ expectedNo);
				valfound = "Yes";
				break;//  to come out of loop 
			}
//			else
//			{
//				System.out.println("array does not contain given value="+ expectedNo);
//			}
			
		}
			
		if(valfound.equals("No"))
		{   // No  No = true
			System.out.println("array does not contain given value="+ expectedNo);
		}
		
		
		System.out.println("ends here");
		
		
		
	}

}


---------------
package ArrayBasics;

public class TwoDimArray {

	public static void main(String[] args) {
			// Two Dimmensionall array --  rows and columns
		
		int arr [] [] = new int [2] [3];
		//  2 represents - rows -  o -1
		// 3 - columns   0- 2
		
		//  asisgn values in array
		
		// 1st row
		arr [0] [0] = 00;
		arr [0] [1] = 01;
		arr [0] [2] = 02;
		
		// 2nd row
		arr [1] [0] = 10;
		arr [1] [1] = 11;
		arr [1] [2] = 12;
		
		System.out.println("arr [0] [1]=" + arr[0] [1]);//arr [0] [1]=1
		
		// get all vals from 2 Dim array using for looop
		
		for(int i=0;i<=1;i++)//   to iterate rows data i= 0 +1 =1 +1 =2
		{//        // 0<=1 true
			//  1<=1 true
			// 2<=1  false
			for(int j=0;j<=2;j++) // to iterate columns  j =0 +1 =1 +1 =2 +1 =3
			{          // 0<=2 true  
						// 1<=2 true
				// 2<=2 tr
				// 3<=2 false
				System.out.println("values="+ arr [i] [j]);
			}
			
		}
				
		// arr [0] [0] -0 
		// arr [0] [1] -1
		// arr [0] [2]  -2
		
 		// arr [1] [0] -10
		// arr [1] [1] -11
		// arr [1] [2] -12
		
		
		
//		int a=00;
//		a= 0.1;
//		System.out.println("a="+a);// a=0
		
		

	}

}

package ArrayBasics;

public class typeCasting {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		  int a=10;
		  float b  = a;//  default type casting is done 
		  //  here converting int value to float value
		  // 10 to 10.0 
		  // int  --->  float 
		  //     b   = 10  in the form of 10.0
		  
		  System.out.println("b="+ b);// 10.0
		  
		  
		  // ex2:
		  //  convertinf dec no  --> int 
		  float f = 10.85f;
		  
//		  int c = f;// Type mismatch: cannot convert from float to int
		  
		  int c= (int) f;// typecasting is done by programmer --   explicitly
		  //  10.85  --->  10   --  loosing some data 
		  System.out.println("c="+c);// c=10 int 
		  
		  
//		  types of casting :
//		  1. widening :                 ex:  widening road    small --- > large
//		  													  smaller data type ---> higher datatype
//		  Widening Casting (automatically) - converting a smaller type to a larger type size
//		  byte -> short -> char -> int -> long -> float -> double
//		  1B       2B		2B       4B		8B		4B		8B
		  // long to float
		  long l1 =2134;
		  float f1= l1;
		  System.out.println("f1=" +f1); 
		  
		  
//		  2. narrowing :
//		  		                 large -->  smaller
//		  		                 ex: higher data type -->   smaller data type
//		  Narrowing Casting (manually) - converting a larger type to a smaller size type
//		  double -> float -> long -> int -> char -> short -> byte
		  //  8B      4B	  8B	   4B	 2B			2B   1B
		  
		  
//		  HW   convert char to int 
		  
		  // HW  Convert int to char 
		  
		

	}

}

// Pattern programs:
HW :  use 2   for loops
*
* *
* * *

// HW  use 2 for loops
1
1 2
1 2 3
1 2 3 4
*******************************************
	24-Aug - 2022
*******************************************

Type casting :


Method:

Type catsing :

       converting one primitive data type to another primitive data type

 ex:  int  -->  float
    float --> int

2 types of type casting:

1. widening --  when we convert lower data type value to higher data type value -- theris no problem- compiler will accept.
it is acceptible -
- automatic type casting is done by compiler
- do not loss data

2. narrowing :  
when we convert higher data type value to lower data type value -- there is lost of data-so  compiler will not accept and will not typecast. 
-  type casting is done by programmer explicitly
- there is loss of data

Method :--
--------------
 collection of stsmts  to perform specific taks
ex :   addition of 2 task
     sub., Miultiple of 2 nos..
  
  M1()
{
    stmt1;
    stmt2;

}


Define Method :  in side mthod -  write business logic or  collection of stmts of to perform specific atsk


main () :     JVM  call main ()  method automatically when we run the program

    public static void main(String args [])
{
	stmt1;
	stmt2;
	
}

String args []  -- >  is it array or not  --  string array --  array anme - args 
  
Can I Declare args only in main ()?
  public static void main (String arr[])   //  valid // acceptible
{

} 


public static void main(String [] arr)  //  valid  [] we can write before var anme or after var name 

o   Types of methods :
1.  user defined method 

2. Predefined Method

1. User defined method :   if method is defined by programmer -  user defined method

Define method:/ write method:
	
synatx :    accessspecifier  nonaccesspecifier   returntype  MethodName( args  or with out args)

{


}
       public static void main(string args[])


Access specifier:
  4 types of access specifiers in java 

1. public  -  k/w 
2. private  -  k/w
3.protected -   k/w in java 
4. default -  

  ex :  
  public static void      M1() 
 private static void      M1() 
 protected static void      M1() 
  static void      M1()    //  default  if we dont write any access spcifier public, private, protcted --  then we can say  default access specifier


nonacces specifier :
  2 types
   1. static 
   2. non static 

  public static  void M1()  -- static 
 public   void M2()   -- non static 

Return  type :   void , String,  int , float......etc


package MethodBasics;

public class MethodBasics1 {

	
	//  Method :   is collection of stmts to perform 	
	
	// Method without arguments / inputs
	//  define method - add()
	 public static void add()  // Method  definition
	  {
		  //  Method body  or implementation of method
		  System.out.println("I am in add - Metohd");
	  }
	
	 public static void sub()
	 {
		 
		 System.out.println("I am in sub method");
		 System.out.println("stmt-2");
	 }
	
	public static void main(String [] arr) {
		
			System.out.println("Hi");
			//  call method   --Methodname() ;
		   add();
		   
		   //  call sub Method
		     sub();
			
		    // HW  WAP  to define Multiplication Method and call that method
		     // HW WAP  to define Division Method  and call that method
	}

}

o/p:
Hi
I am in add - Metohd
I am in sub method
stmt-2
-----------------------------------------
package MethodBasics;

public class MethodWithInputArgs {

//	o	o	Method Input arguments
	 public static void add( int a, int b ) //  defined 2 arguments 
	 {
		 System.out.println("in add method");
		  int res;
		    res =  a + b;// 10 + 20 =30
		    //    res=  30  val is stored in left side var/ so res var contains 30 
		    System.out.println("add of 2 nos=" + res); //  30
	 }
	
	
	public static void main(String[] args) {
		
		     // call add ()
		  //add();// The method add(int, int) in the type MethodWithInputArgs is not applicable for the arguments ()
		  add(10,20);
		  // Note :  if method has has 2 args, in calling method also We have to pass 2 values
		  
//		  add(10,20,30);// The method add(int, int) in the type MethodWithInputArgs is not applicable for the arguments (int, int, int)
		  
		  add(2,3);
		  System.out.println("ends");
		  
		  // if we defines 1st arg is int, 2nd arg is int, we must pass same values
		  // We cannot one int val, 2nd one float value
//		  add(2, 3.5f);// CE :The method add(int, int) in the type MethodWithInputArgs is not applicable for the arguments (int, float)
		  
//		  add();// error :  add()  we have defined 2 args 		  
		  		  
	}

}

o/p:
in add method
add of 2 nos=30
in add method
add of 2 nos=5
ends

---------------------
package MethodBasics;

public class MethodWith3args {

	// Method with 3 args
	public static void add(int a , int b, int c)
	{                   // a=10        b=20    c= 30   
		System.out.println("calling metohd 3 args");// ok
		int res  = a+b+c;
//		           10 + 20 +  30
//		         res  = 60 val is stored in left side var  i.e res . so res var conatins value 60
		System.out.println("res="+ res);// res= 60
	}
	
	
	public static void main(String[] args) {
		
			// call add metohd
		    add(10,20,30);
		    System.out.println("after calling method");
		    
	}

}


o/p:

calling metohd 3 args
res=60
after calling method

-----------------
//public static  void display() //  we cannot define method  out side of class
//  {  // always we have to define method inside the class only 
//	  
//  }


     // WAP  to perform substraction of 2 nos  and display o/p
		    // WAP to perform Multiplication of 2 nos  and display o/p
		    // WAP to perform Division of 2 nos  and display o/p
		    
***************************************************
	25-aug -2022
***************************************************

Method with Diff Data type arguments :
----------------------------------
package MethodBasics;

public class MethodwithDiffDataTypeArguments {

	// define method with diff ddata type arguments
	 public static void createEmployee(int empId, float empSal, String empName)
	 {									// empid =101  empSal=98350.78f  , empName= "Ramu"
		 System.out.println("Empid: " + empId);//  101
		 System.out.println("Emp Salary: " + empSal); // 98350.78
		 System.out.println("Emp Name: " + empName);// Ramu		
		 System.out.println("*********************");
	 }
	
	
	public static void main(String[] args) {
		System.out.println("stmt1");
		
		// calling createEmployee by passing one int val,  decimal no of float, 3rd val -String
		createEmployee(101, 98350.78f , "Ramu" ) ;
		
		// Note: We can call method any no of times
		createEmployee(102, 1000.50f, "Swathi");
		createEmployee(103, 1000.50f, "Raju");
		
		System.out.println("stmt2");
		

	}

}

o/p:
stmt1
Empid: 101
Emp Salary: 98350.78
Emp Name: Ramu
*********************
Empid: 102
Emp Salary: 1000.5
Emp Name: Swathi
*********************
Empid: 103
Emp Salary: 1000.5
Emp Name: Raju
*********************
stmt2

----------
package MethodBasics;

public class NestedMethod {

	public static void add()
	{
		System.out.println("in add");
		//  define method 
		// note : we cannot defined method inside another method
		// nested method is not allowed in java
		     public static void sub() //  erro as we defined method inside another method.
		     {
		    	 System.out.println("in sub");
		     }
		
	}
	
	
	public static void main(String[] args) {
			
//		nested if :
//		if()
//		{
//			if()
//			{
//				
//			}
//		}

		// nested for loop:
//		for()
//		{
//			for()
//			{
//				
//			}
//		}
		
//		No nested method in java
		
		
		
		
	}

}



-------------

package MethodBasics;

public class MethodReturnsSub {

	//  Define sub () with 2 args perform substraction and return o/p 
	
	public static int sub(int a, int b)
	{                    // a=5      b = 3
		int res;
		res = a-b;
////			  5 - 3
////			 = 2  value will be stored in left side var i.e res. so res contains 2
//		 System.out.println("res="+ res);      
//		// if we dont write return stmt, it throws error : This method must return a result of type int
		return res; //  return 2;
//		System.out.println("after return stmt");// Unreachable code
		
		// Note:   After return stmt, dont write any code...
		// return is last executable stmt inside method, it can be used to come out of method
		//  break :   to come out loop (for, while, do while),  Switch
		//   return:         to come out of method
		
		//or
//		return a-b;// return 5-3 ; 2 
//		return ;// error :this method must return a result of type int
		// So we must return some int value	
		
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int subRes = sub(5,3);//
		           //    subRes=  2      
		System.out.println("sub Res="+ subRes); // 2
		
		subRes =  subRes +100;		
		
		subRes = sub(10,2);//
		System.out.println("sub Res="+ subRes);// 8
		
		subRes = sub(8,7);//
		System.out.println("sub Res="+ subRes);// 1		

	}

}
 
o/p:
sub Res=2
sub Res=8
sub Res=1


---------------------

package MethodBasics;

public class MethodReturnsSub {

	//  Define sub () with 2 args perform substraction and return o/p 
	
	public static int sub(int a, int b)
	{                    // a=5      b = 3
		int res;
		res = a-b;
////			  5 - 3
////			 = 2  value will be stored in left side var i.e res. so res contains 2
//		 System.out.println("res="+ res);      
//		// if we dont write return stmt, it throws error : This method must return a result of type int
		return res; //  return 2;
//		System.out.println("after return stmt");// Unreachable code
		
		// Note:   After return stmt, dont write any code...
		// return is last executable stmt inside method, it can be used to come out of method
		//  break :   to come out loop (for, while, do while),  Switch
		//   return:         to come out of method
		
		//or
//		return a-b;// return 5-3 ; 2 
//		return ;// error :this method must return a result of type int
		// So we must return some int value	
		
		// HW  WAP   to define some method and return float value  and display in the main ()
		
		
		// HW WAP  to define method  and return char value and display in the main ()
		
		// HW WAP to define method and return boolean value and display in the main ()
		
		// HW WAP  to define method and return String value and display in the main ()
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("stmt1 ");
//		int subRes = sub(5,3);//
//		           //    subRes=  2      
//		System.out.println("sub Res="+ subRes); // 2
//		
//		subRes =  subRes +100;		
//		
//		subRes = sub(10,2);//
//		System.out.println("sub Res="+ subRes);// 8
//		
//		subRes = sub(8,7);//
//		System.out.println("sub Res="+ subRes);// 1	
				
		sub(5, 3);
		//   2   this method gives/ returns o/p  2 and we are not storing into any varible 

	}

}
 
----------------------------------
package MethodBasics;

public class MethodWithDiffArguments {
	
	
	public static  float add(int a, float f , char ch)
	{						//  10      2.5f       'A'    
		float result = a  + f + ch ;
//		               10 +  2.5f  +  'A' - ASci Value - 65 , B - 66, C- 67........ Z-  // a -  97 b- 98.......z   . , () ...
//					   10  + 2.5f +   65
		//		result=	  77.5f
		
		return result;// 77.5f
//		return 2.45f; // We should write only on return stmt inside method 
		
	}
	
	
	public static void main(String[] args) {
		
//		add(10, 2.5, 'A');// erro : we must pass 2nd value as float data type

	float myResult=	add(10, 2.5f, 'A');
					// 5.4 
	///         myResult =     77.5f
		System.out.println("my Result=" + myResult);// 77.5f
		
	}

}

o/p:
my Result=77.5

-------------------------------------------
package MethodBasics;

public class MethodWithDiffArguments {
	
	
	public static  float add(int a, float f , char ch)
	{						//  10      2.5f       'A'    
		float result = a  + f + ch ;
//		               10 +  2.5f  +  'A' - ASci Value - 65 , B - 66, C- 67........ Z-  // a -  97 b- 98.......z   . , () ...
//					   10  + 2.5f +   65
		//		result=	  77.5f
		
		return result;// 77.5f
//		return 2.45f; // We should write only on return stmt inside method 
		
//		return true;// eror  return value is boolean
//		Method return is float,  We returning boolean value
		//  Return type of method  and return value must be same type usually
//		return "Ramu";// return value is String  here
	}
	
	
	
	
	public static void main(String[] args) {
		
//		add(10, 2.5, 'A');// erro : we must pass 2nd value as float data type

	float myResult=	add(10, 2.5f, 'A');
					// 5.4 
	///         myResult =     77.5f
		System.out.println("my Result=" + myResult);// 77.5f
		
	}

}


************************************************
	26-Aug- 2022
************************************************

Return type :  void , int, float, String...   etc

Note:  
if method return type is int , we must retuen int value only
	  		 float, we must return float value
if Method return is boolean, we must return boolean value

ex:
    public static int add()
{

   return 10/ intvar;
}

Method return type is float:
------------------------
    public static float add()
{

   return 3.4f / floatvar;
}

Method return type is char
------------------------
public static char add()
{

   return 'A' / charVar;
}
--------------
package MethodBasics;

public class MethodReturnTypes {

	public static int add() //  No args
	{
	 int a=25;	
//		return 53;
		
		//  return  val/ var/ expression;
		return 10;
//		return  a;//   return value of var  but not 'a'
//		return a+5; // a+5 expression is evalueated  and result will be returned
		//return  10,20,40; // we cannot return multiple values 
	}
	
	public static void main(String[] args) {
		
		int   result =  add();//   gives some o/p   or returns some o/p i.e 10
//		          result =    10

		System.out.println("res="+ result);// res=10
		
	}

}


----------------------
package MethodBasics;

public class MethodReturnTypeFloatValue {

	public static float add() //  No args
	{
		int a=25;	
		return 10.23f;

	}

	public static void main(String[] args) {

		//		int   result =  add();//   gives some o/p   or returns some o/p i.e 10
		// error :   add() return float  value so. left side we must declate float variable only but not int var.
		float result =  add();

		System.out.println("res="+ result);// res=10.23f

	}

}


----------------------------
package MethodBasics;

public class MethodReturnTypeFloatValue {

	public static float add() //  No args
	{
		int a=25;	
		return 10;//   10 vlaue  will be typecasted to float val as method return type is float

	}

	public static void main(String[] args) {

		//		int   result =  add();//   gives some o/p   or returns some o/p i.e 10
		// error :   add() return float  value so. left side we must declate float variable only but not int var.
		float result =  add();

		System.out.println("res="+ result);// res=10.0

	}

}

-----------------------
Type Casting :
package MethodBasics;

public class MethodReturnTypes {

	public static int add() //  No args
	{
		int a=25;	
		//return 10.54f;//Type mismatch: cannot convert from float to int
	     return (int) 10.54f; // we have to type cast explicitly - (programmer)
	     // returns int vaue 10  and it ignores deciaml part  
	}

	public static void main(String[] args) {

		int   result =  add();//   gives some o/p   or returns some o/p i.e 10
		//		          result =    10

		System.out.println("res="+ result);// res=10

	}

}

----------------------

package MethodBasics;

public class MethodReturnTypeString {

	public static String add() //  No args
	{
		int a=25;	
//		return 10;//  Type mismatch: cannot convert from int to String
//		return 1.23f;// error:  Type Mismatch cannot from float to String
//		return 'A'; // errorType Mismatch cannot from char to String
		return "Ramu";// ok 
//		System.out.println("stmt-2");// Unreachable code
//		System.out.println("stmt-3");
	}

	public static void main(String[] args) {

		String  result= 	add();
		          //  result= Ramu
		System.out.println("result = "+ result );// Ramu
			
	}

}


-------------------------------------
package MethodBasics;

public class MethodReturnTypeString {

	public static String add() //  No args
	{
		int a=25;	
//		return 10;//  Type mismatch: cannot convert from int to String
//		return 1.23f;// error:  Type Mismatch cannot from float to String
//		return 'A'; // errorType Mismatch cannot from char to String
		return "Ramu";// ok 
//		System.out.println("stmt-2");// Unreachable code
//		System.out.println("stmt-3");
	}

	public static void main(String[] args) {

		add();
		// this method return o/p  Ramu. But this o/p we are not storing in any var
		
		//String  result= 	add();
		          //  result= Ramu
//		System.out.println("result = "+ result );// Ramu
			
	}

}

-------------------------------------------

package MethodBasics;

public class MethodReturnTypeVoid {

	//  void -  k/w in java -
	//  void - null -  it does not return any value
	// if method return type is void , it does not return any value/   give any o/p.
	
	//if method return type is void, we should not use return stmt inside method
	public static void add() //  No args
	{
		System.out.println("Hi Ram");
		System.out.println("How Are you");
//		return 10;// if we write return stmt inside void method , it throws erro : Void methods cannot return a value
	}

	public static void main(String[] args) {

//		void result= add();// Error 
//		  int result =  add();// Type mismatch: cannot convert from void to int
		add(); // This method does give o/p or does return any valu. so dont declate  variable left side
		System.out.println("ends here");	
	}

}

//o/p:
//Hi Ram
//How Are you
//ends here
---------------------------------------
package MethodBasics;

public class MethodReturnTypeInt2 {

	public static int add(int a, int b) // 
	{
		int result;
		result = a+b;
		return result;
	}

	//we can write multiple methods inisde teh class
	public static int sub(int a, int b)
	{ 
		int result = a-b;
		return result;		
	}
	
	
	public static void main(String[] args) {
			
		//   2 no addition - result1		
		//  2 nos substarction  - result-2    and result 1   * result2		
		int a=2;
		int b= 3;
		int result1 = add(a,b);// Method call, we can pass not only val,  we can pass variable also
		System.out.println("resul1= "+ result1);// 5
		
		int result2= sub(a,b);
		System.out.println("result2= "+ result2);// -1
		
		int multipliResult = result1 * result2;// -1
		System.out.println("multipliResult="+ multipliResult);	// -5	
		
		System.out.println("ends here");	
	}

}

//o/p:
//	resul1= 5
//	result2= -1
//	multipliResult=-5
//	ends here
----------------------------------------------

Note:   most of times, we return some value from method.
// It is always better to return some value from method but not compulsory.

USer defined metohd :  if programmer defines some method we can say it is user defined method
2. Predefined Methods or Built in Libraries:
------------------------------
     if methods are already defined in the Java class libraries
	java development or it comes as part of Java s/w -  predefined

package MethodBasics;

public class PreDefinedMetohds {

//	 float Max()//  user defibed
//	{
//		
//	}
	
	
//	public static int max (int a, int b)
//	{
//		return b;		
//	}
	
	public static void main(String[] args) {
//		2. Predefined Methods or Built in Libraries:
//			------------------------------
//			     if methods are already defined in the Java class libraries
//				java development or it comes as part of Java s/w -  predefined
//
//			ex:   
		
			int maxVal= Math.max(3, 7);// max value i.e 7		  //   7
			System.out.println("maxVal =" + maxVal);// maxVal =7
			
			// see/ View Method  definition of max()
			// move moouse over on max() ,  press ctrl +  open declaration--   it goes Math - class and max() .
					
			int minVal= Math.min(2, 4); //  2
			System.out.println("min val=" + minVal); //2 
			
			double  sqrtResult =  Math.sqrt(25.00); // 5.0
			System.out.println("sqrtResult =" + sqrtResult);	// sqrtResult =5.0
			
			double  sqrtResult2 =  Math.sqrt(25); 
			System.out.println("sqrtResult2=" + sqrtResult2);// 5.0 
			
			System.out.println("pi="+ Math.PI);// pi=3.141592653589793
			double pow= Math.pow(2, 3);
				System.out.println("pow 2,3=" + pow); // poweod 2 ^3 =  8  -- > 8.0
	}

}
 
**************************************************** 
	28-Aug -2022
****************************************************
package StringBasics;

public class StringBasics1 {

	public static void main(String[] args) {
//		String :  is collection of characters ,  enclosed in ""
//		ex:   "abc",  "r123",   "123" but not integer
//		String is predefined class in java but it often used in the form datatype
//		int a=10;
		// float f = 3.45f;
		
//		Declare String   and Assign value :
		// Synatx :  Data tyoe  var = "value";
		String s = "Ramu"; //  each class is ex for reference data type eX:  String , array
		// or 
		
		String s2 ;
		s2 = "sita";
		
		//  display String value 
		System.out.println("s =" + s);// Ramu
		
//		String Class Methods:
		//			Length() :  get length of string  "Ramu" length= 4
		//  Length = getting characters cnt from String   and and return type int
		
		int  Slength= s.length();
		System.out.println(" string length=" + Slength);// 4
				
//			toUpperCase():  Ramu -->   RAMU
		String upperCase = s.toUpperCase();
		//   it converts each char to upper case and  return type string value
		//               upperCase=  RAMU
		System.out.println("upperCase=" +upperCase);//upperCase=RAMU
		//HW  RAMU -->   toupperCase -- >  RAMU
		
		
//			toLowerCase() :  it converts each char to lower case  and return type string value
		    //  Ramu -->  ramu
		 String toLowerCase= s.toLowerCase();
		 System.out.println("toLowerCase=" +toLowerCase); // toLowerCase=ramu		
		
//			charat():
		 char  charAtIndex0=  s.charAt(0); // R
		 //   gets character value at index no =0  and return type is char
		 //  R a m u
		 //  0 1 2 3
		 System.out.println("charAtIndex0=" + charAtIndex0);// charAtIndex0=R
		 
//		 ex2:
		char charatindex2=  s.charAt(1); //  a
		System.out.println("charatindex2="+charatindex2);
		 
			// ex3:  
//				s.charAt(4);//java.lang.StringIndexOutOfBoundsException: String index out of range: 4
				//  error  as we dont have index no = 4. Here String index no is varying from 0 to 3
				
		 // Hw get 3rd character from String 	
		
		// HW get all characters one by one and display it using for loop and for each loop
		
		
		
					 
//			indexof(String val): gets index no of given String  and return type int
		    // if given String is not found in main String , it returns -1
			int indexNo = s.indexOf("R");
			     // indexno=  0
			System.out.println("indexNo =" + indexNo); // indexNo =0
			
			s.indexOf("a");// 1
			s.indexOf("m"); // 2
			s.indexOf("u"); // 3
			
			int indexno2 = s.indexOf("p"); // -1
			System.out.println("indexno2= " +indexno2); // -1
			 //  R a m u
			 //  0 1 2 3
			int indexno3 = s.indexOf("Ra"); // 0 
			System.out.println("indexno3= " +indexno3); 
					
//			substring(int) :
			String substfrom0=  s.substring(0);// getting some part of string from index no = 0
			System.out.println("substfrom0 =" + substfrom0); // Ramu
			
			String substfrom1 =  s.substring(1);// get substring from index no =1 i.e amu
			System.out.println("substfrom1  =" +substfrom1); // amu
			String substfrom2 = s.substring(2);//get sub string from index no=2  i.e mu
			System.out.println("substfrom2 = "+ substfrom2);
			
//			substring(0,2) :  gets substring from index no =0  to 2-1  i.e 0 to 1
			String substrfromindex02 = s.substring(0, 2);
			System.out.println("substrfromindex02 ="+ substrfromindex02); // Ra
			
			String substrfromindex03 = s.substring(0, 3);// get sub string from index 0 to (3-1)  2
			System.out.println("substrfromindex03 ="+ substrfromindex03);// Ram
			
			String substrfromindex13 = s.substring(1, 3);// get sub string from index 1 to (3-1)  2
			System.out.println("substrfromindex13 ="+ substrfromindex13);// am
			
			// index no =4
			
			String substrfromindex4 = s.substring(4);// get sub string from index 
			System.out.println("substrfromindex4 ="+ substrfromindex4);//  no error But We  get empty value
			// substrfromindex4 =
			
				
//			s.equals(substrfromindex4); - to compare 2 string values
//			s1  and s2 
			String s1 = "Ramu";
			String s22 = "Ramu";
			
			boolean  valuesEqual =	s1.equals(s22);
		// Ramu        Ramu  --  true 
			// if 2 string values are equal -  equals() returns true
			// if both values are not equal --  return false
			System.out.println("valuesEqual =" +valuesEqual);// valuesEqual =true
			
			String s3 = "sita" ;
			boolean valuesEqual2 =  s1.equals(s3);
		// Ramu		 sita	 --  return false
			System.out.println("valuesEqual2 =" +valuesEqual2);// false
			
//			FAQ    difference b/w == and equals()?
//			10 == 20 to compare values
//			"Ramu"  == "Ramu"    dont use == to commpare String Values
			//  To check String values are equal or not --  use equals()  only but not == operator
		
//			s.concat(substrfromindex4); // 
			//  join 2 string values  s1 and s3
			String join= s1.concat(s3);
		//  Ramu       sita	 =  Ramusita
			System.out.println("concat s1 and s3 ="+ join);// concat s1 and s3 =Ramusita
		
//			s.contains(substrfromindex4)
			String s4 = "Ram is good boy";
			boolean contains = s4.contains("is");// s4 string contains given value "is" . it returns true
			//  if given string is available in main string , it returns true
			// else false
			System.out.println("contains = "+contains);// true
			
			boolean contains2 = s4.contains("bad");
			//         "Ram is good boy"   contains "bad" -- it return false
			System.out.println("conatin 2= "+contains2);
		
//			s.trim(); //  remove spaces in String 
			String s5=  "  sita is good girl   ";
			
//			s5.trim();
			String s6=  s5.trim();// "sita is good girl"  remove spaces in string and store results into left side var i.e s6			
			System.out.println("s6="+ s6);
			
//			s.toCharArray();
			char[]   chararr = s.toCharArray();
			 for(int i=0; i <= chararr.length-1 ;i++)
			 {
				 System.out.println(chararr[i]);
			 }
			
//			 R
//			 a
//			 m
//			 u
			
//			s.split(substrfromindex4)/
//			
		
			
//		Swap 2 nos
//		Reverse of String
//			s.replace(charAtIndex0, charatindex2)
		
		
		
		
	}

}

****************************************
		29-Aug-22
**************************************
package StringBasics;

public class StringBasics2 {

	public static void main(String[] args) {

//			s.startsWith(s6)
		String s = "Ram is good boy";
		//  String starts with 'Ram'
		boolean startswithRam=  s.startsWith("Ram");// true else false
		      //      "Ram is good boy.";        "Ram"  - true 
		//    true is stored in left side var i.e startswithRam. so startswithRam =  true
		System.out.println("startswithRam= " +startswithRam);// startswithRam= true
		
		//  check string starts with Swathi
		
		boolean startsWithSwathi=  s.startsWith("Swathi");
	// 	"Ram is good boy."     "Swathi"  -- fasle
		//     false result si stored in left side var o.e startsWithSwathi . so startsWithSwathi =  false
		System.out.println("startsWithSwathi=" +startsWithSwathi);// startsWithSwathi=false
		
//			s.endsWith("");
		// check string ends with given value "boy"
		boolean  endsWithboy = s.endsWith("boy");
		//"Ram is good boy"    --   true
		System.out.println("endsWithboy=" + endsWithboy);// true
		
		
		boolean endsWithRaju = s.endsWith("Raju");
		//"Ram is good boy"    --   false
		System.out.println("endsWithRaju=" + endsWithRaju); // false
		
		
//          s = "Ram is good boy"; /
		 //      Pam is good boy         -- R --> P   , o --> L
//			replace()
		String replace= s.replace("R", "P");
		System.out.println("replace=" +replace);
		// replace=Pam is good boy
		
		// o --> L
		String replace2=  s.replace("o", "L");
		// "Ram is good boy"
		//  Ram is gLLd bLy
		System.out.println("replace2=" + replace2);
		//replace2=Ram is gLLd bLy
		
		s= "Ram is good boy. Ram";
		String replace3 =  s.replace("Ram", "Swathi");
		//"Ram is good boy. Ram"
		// Swathi is good boy. Swathi 
		System.out.println("replace3= " +replace3);
		// replace3= Swathi is good boy. Swathi
		
			
		String s2 = "10,20,30,40,50";
		String[] sArr =   s2.split(",");
		System.out.println("sarr[0]=" + sArr[0]);
		System.out.println("sarr[1]=" + sArr[1]);
		System.out.println("sarr[2]=" + sArr[2]);
		
		//  HW  WAP to display values from Sarr
		
		for(int i=0;i<=sArr.length-1;i++)
		{
			System.out.println("values from string array=" + sArr[i]);
				
		}
//		values from string array=10
//				values from string array=20
//				values from string array=30
//				values from string array=40
//				values from string array=50
		
		// HW use for each loop., to get all values from String arry
//		for(Datatype   eachVal :  arrayvarName/ arrayListobj)
//		{
//			
//		}
		
		for(String eachVal :  sArr)
		{
			System.out.println("Values from String ar using for each loop="+ eachVal);
		}
//		Values from String ar using for each loop=10
//				Values from String ar using for each loop=20
//				Values from String ar using for each loop=30
//				Values from String ar using for each loop=40
//				Values from String ar using for each loop=50
//		
//		
		
		
	
//		Swap 2 nos
//		Reverse of String			
		
		
		
		
	}

}

-----------------------------------

FAQ Swap 2 nos using 3rd variable 
package StringBasics;

public class Swap2Nos {

	public static void main(String[] args) {
		
		int a=10;
		int b=20;
		
		int temp;
		System.out.println("Before swapping , a=" + a + ", b=" + b);
		//---------------------
		temp = a ;
		a = b;
		b = temp;
		System.out.println("after swapping , a=" + a + ", b=" + b);
		System.out.println("temp ="+ temp);

	}

}
----------------------------------------
FAQ Swap 2 nos with out using 3rd variable?
package StringBasics;

public class Swap2NoWithOutTempVar {

	public static void main(String[] args) {

		int a =  3;
		int b=  6 ;
		//	   int temp; 
		System.out.println("Before  swappting , a="+ a +", b="+b);
		a =  a-b;
		b = a + b;
		a=  -(a-b);
		System.out.println("after swappting , a="+ a +", b="+b);	

	}

}


--------------------------------------------
FAQ Reverse of the string :
    "RAM"--> "MAR"

package StringBasics;

public class ReverseOfString {

	public static void main(String[] args) {

		//		String s= "RAM";
		String s= "RAMA";
		//         012	
		char ch=	s.charAt(2);
		System.out.println("ch="+ ch);// M

		ch=	s.charAt(1);// A
		System.out.println("ch="+ ch);

		System.out.println("Reverse of string");
		//	for(int i=2;i>=0;i--)
		for(int i=s.length()-1;i>=0;i--)
		{
			char ch2= s.charAt(i);
			//		System.out.println("ch2="+ ch2);
			System.out.print(ch2); // MAR
		}


	}

}

--------------------------

package StringBasics;

public class ReverseOfStringUsingCharArray {

	public static void main(String[] args) {

		//		String s= "RAM";
		String s= "RAMA";
		char [] chArr =  s.toCharArray();
		               // "RAMA"   to char array
		// chArr[0] = R
		// chArr[1] = A
		//.. etc
		//  length of ch arra=  4
		System.out.println("length of arr=" + chArr.length);// 4
		
//		for(int i= chArr.length-1; i>=0 ;i++ )// i =3 +1 = 4
		for(int i= chArr.length-1; i>=0 ;i-- )// i =3 +1 = 4
		{      //     4-1 =3      3>=0
			 // 				  4>=0 true
			System.out.print(chArr[i]);// A
			//                       [4]    arr length = 4,   from 0- 3 indexno 
			// lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4
		}
		// AMAR


	}

}
-------------------------------
package StringBasics;

public class ArrayInitialisation {

	public static void main(String[] args) {
		
		int arr[]   = new int [3];
		//   we can store max 3 values , index no starts from 0  and ends with 2 . Index no range is o-2
		
		//   store values
//		[]   subscript operator
		arr [0] =10;
		arr [1] =20;
		//   etc.
		
		// 2 nd way   to store values without index no
		int barr []  = {11 ,22 ,33 };
		//              0    1    2
		
		for(int i=0;i<=barr.length-1; i++)
		{
			System.out.println(barr[i]);
		}
//		11
//		22
//		33
		

	}

}

------------------------------
package ArrayBasics;

public class TwoDimArray {

	public static void main(String[] args) {
			// Two Dimmensionall array --  rows and columns
		
		int arr [] [] = new int [2] [3];
		//  2 represents - rows -  o -1
		// 3 - columns   0- 2
		/// get rows cnt 
		System.out.println("get rows cnt=" + arr.length);// get rows cnt=2
		// get columns cnt 
		System.out.println("columns cnt=" +  arr[0].length);// columns cnt=3
		
		//  asisgn values in array
		
		// 1st row
		arr [0] [0] = 00;
		arr [0] [1] = 01;
		arr [0] [2] = 02;
		
		// 2nd row
		arr [1] [0] = 10;
		arr [1] [1] = 11;
		arr [1] [2] = 12;
		
		System.out.println("arr [0] [1]=" + arr[0] [1]);//arr [0] [1]=1
		
		// get all vals from 2 Dim array using for looop
		
		for(int i=0;i<=1;i++)//   to iterate rows data i= 0 +1 =1 +1 =2
		{//        // 0<=1 true
			//  1<=1 true
			// 2<=1  false
			for(int j=0;j<=2;j++) // to iterate columns  j =0 +1 =1 +1 =2 +1 =3
			{          // 0<=2 true  
						// 1<=2 true
				// 2<=2 tr
				// 3<=2 false
				System.out.println("values="+ arr [i] [j]);
			}
			
		}
				
		// arr [0] [0] -0 
		// arr [0] [1] -1
		// arr [0] [2]  -2
		
 		// arr [1] [0] -10
		// arr [1] [1] -11
		// arr [1] [2] -12
		
		
		
//		int a=00;
//		a= 0.1;
//		System.out.println("a="+a);// a=0
		
		
		// HW   WAP  to declare 2 D array of size [3] [2]   and store some values and display it
		//  3 - rows. 2 columns
		
//Note :  MAx values in 2 d Arr =   rows * columns  =3 *2 = 6 values (Max)

	}

}


***************************************
	1-Sep -2022
***************************************

WAP  to define method and get reverse of String ?

package StringBasics;

public class ReverseOfStringUsingMethod {

	
	// return / get the o.p from method
	public static String getReverseOfString(String s)
	{										// RAM
		String rev = "";
			for(int i=s.length() -1; i>=0;i--)// 
			{      //  3-1 =2        2>=0
				//System.out.print(s.charAt(i));
					rev = rev + s.charAt(i); //
					//     "" + 'M' =  join/ conacatenate -
					//  rev =  "M" + A = MA + R =  MAR
			}
		return rev;	//  return "MAR";		
	}
	
	
	public static void main(String[] args) {
		
		String s =  "RAM";
		//           012
		// M A R
//		s.charAt(2);//  M
//		s.charAt(1); // A
//		s.charAt(0); // R
		
	   String result =  	getReverseOfString(s);
		//  gievs some o.p i.e MAR
		System.out.println("Result=" + result);
	   
		String result2= getReverseOfString("Google");
		System.out.println("result2 =" +result2);
	
		System.out.println("ends");
		
	}

}


------------------------------------

OOPS Basics:

OOPS  -Object Orienetd Programming System

In Java , Everything is represneted in form object and classes

OOPS features:

1. Object and class
2. Inheritance
3. Polymorhism

4. Abstraction

5.Encapsulation


   if any programming lang, which supports above features- we can say that lang -is object oriented programing lang


1. Object and Class :

Object:    is any thing that is visible   and it has some characterstics or properties or attributes  and it has some behaviour or functiionality

            ex:  Dog 

    charactersttics or propetries:
  each dog -   some name
		color
		weight 

 behaviour:
	  barking ();
              Jump();
	IdentifyPersons()  -- professional or trained  dog

ex2:  Pen is also object  -  some properties +   some behaviour

Charactetics of Pen:

   Brandname  :  Reynold, Cello
color		:  Blue. black, Red
Shape :   Reactange, Circle
NibSize:     0.2cm

Behaviour of Pen :
	WritingOnPAper()
	WritingonPlasticPaper()
	WritngOnDabba()  -- Steel, platic
	
	changeRiffle()
	ChangeInk()

ex3:Student is an obj 
   charcaterstic :
	name:  RAMU
	Color : Black
	Height :  5.8cm
	gender	:  Male or Female
	
Behaviour:
	  playCricket();
	 run()
	jump()
	getmarks()

Ex4:   empployee   


2. Object is instance of class 
                 copy of class   -

3.  characterstic or properties or attributes -- usullay  represnted in the form of variables in program

Student obj has some name
	        int x= 10
		int y =  x + 10
		//   10 + 10 
//		y =	20
	what is value of y = ?
         String name;
         float height;
	String color;
	Char gender;

	behaviour or functionlaity of an obj --  usually represented in the form of Method or Function in program
	
		public static void playCricket()
		{
		

		}

	public static void Run()
	{

	}


- if we want to create an object ,  We must define class.  / write class first

Define class:
  class  A   // A - class name
{



}


with out defining the class/  writing class, we cannnot create an object

Class :    describes  object  charcaterstics  and Behaviour 
			variables                 +   Method

class A
{
	declare variables:

	Declare some methods;

}


eX:
class student
{
	String name;
	float height;
	char gender;

	//  Behaviour 
 public sttaic void PlayCricket()  // Method

{


}

public sttaic void Run () // Method -2

{


}



}

So class  conatains variables and Methods
		
Class Describes the object characterstics and object behaviour..

- class is blue print -
	ex:   construct some house-  engineer gives some blue print or sample design
	
Create object:
first we should define/ write class.

class A
{


}
syntax:
	className  ObjeRefVar = new className();
	A   aobjRefVar =  new A(); //  creating obj for class- A

Class B
{

}

create obj for class - B:

B bobjRefVar = new B(); // 


ex3:
class student
{
      String name;
      float height;
      p s v playCricket()
	{

	}
	

}

Student s1 =  new Student();

new --  predefined keyword in java - can be used to create object for given class name  and return address of object
 and store address into left side variable 

//  object is instance of class or copy of class

--------------------------
package OOPSBasics;

public class Dog {
		// varaibles -- Instance variables  :  declared inside class and outside method -
		String name;
		float weight;
	
	
	// Methods
		public  void barking()
		{
			System.out.println("bow - bow");
		}
		
		
	public static void main(String[] args) {
		
		//   create obj for class - dog
		 //synatx:  classname objref=  new classname();
			Dog  dref = new Dog();
			
			// assigne some name to dog
			dref.name = "Dolly";
			dref.weight = 5.7f;
			
			//  dsiplat values
			System.out.println("name =" +  dref.name);
			System.out.println("weight = " +  dref.weight);
			
//			name =Dolly
//			
//			weight = 5.7
			// calling method 
			dref.barking();
			
			// We can create muliple objects for class		
			Dog d2 = new Dog();
			
			d2.name = "Puppy";
			d2.weight = 5.5f;
			System.out.println("name =" +  d2.name);
			System.out.println("weight = " +  d2.weight);			
			
			Dog d3 = new Dog();
			
			
		

	}

}

o/p:
name =Dolly
weight = 5.7
bow - bow
name =Puppy
weight = 5.5


// HW create Employee  class and create object

// HW Create Student class and create object 


**************************************************** 
	2-Sep-2022
****************************************************


// HW Create Student class and create object 

ex3:Student is an obj 
   charcaterstics or prpeties or attributes of object:  ---> represnted   in the form of variables in java
	name:  RAM
	Color : Black
	Height :  5.8cm
	gender	:  Male or Female / 'M' or 'F'
	
Behaviour: or  functionlaity :  ---> represnted   in the form of 'Methods'  in java
	  playCricket();
	 run()
	jump()
	getmarks()

----------------------------
package OOPSBasics;

public class Student {
	
	//  instance variable
	String name;  //  charactertics of obj
	String color;
	float height;
	char gender;
	
	// instance Methods
    void playCricket()
	{
		System.out.println("in playCricket ");
	}
	
    void run()
    {
    	System.out.println("in Run");
    }
    
    void jump()
    {
    	System.out.println("in Jump");
    }

	public static void main(String[] args) 
	{
		// create object for student class
//		syntax:
		//  className  objRefNAme =  new className();
		Student  s1 =  new Student();
		// when we create obj for student class,  it gets copy of instance variables and Instance Methods
		
		//  assigning value to instance variables
		//  objrefername.varname;
		s1.name = "Ramu";
		s1.height  = 5.3f;
		System.out.println("name=" + s1.name);
		System.out.println("height=" + s1.height);
		//  calling method 
//		objref.MethodNAme();
		s1.playCricket();
		
		//  We can create multiple objects  for student class
		Student s2  = new Student();
		s2.name = "Sita";
		System.out.println("s2 name=" + s2.name);
		s2.run();
		

	}

}



// HW create Employee  class and create object

-----------------------------
Creating object inside other class:
-------------------------------------
package OOPSBasics;

public class TestStudent {

	public static void main(String[] args) {
		
		// creating object inside some other clas
		 //  Create obj fro student class
		Student s1 = new Student();
		s1.name = "Swathi";
		System.out.println("s1 name =" + s1.name);
		s1.jump();
		
		

	}

}

o/p:
s1 name =Swathi
in Jump
-------------------------
Default value to instance variable: 
-----------------------------
package OOPSBasics;

public class A {

	//  declare instance variable
	int sid; //   default value - 0
	
	float height;	// -->  0.0
	double esal; //  0.0
	
	char gender;  //  space
	
	String sname;// null
	boolean local ; // false  FAQ:  what is default value for boolean instance varaiable?
	
	public static void main(String[] args) 
	{
		// create obj for Class - A
		A aobj = new A();
		
		System.out.println("Default value for int -> aobj.sid=" +  aobj.sid);// 0 
		System.out.println("Default value for float->  aobj.height=" +  aobj.height);// 0.0
		
		System.out.println("Default value for double ->  aobj.esal=" +  aobj.esal);// 0.0
		System.out.println("Default value for char ->  aobj.gender=" +  aobj.gender);// space
		
		System.out.println("Default value for String ->  aobj.sname=" +  aobj.sname);// null
		System.out.println("Default value for boolean ->  aobj.local=" +  aobj.local);// false
		// Local var :   the varaibles which are declared inside main () or any other method -
		int eid; // local variable -  it does not have any default value
		//  local var  must be initialsed else we will get compile time error 
		//eid = 101;// to fix above erro , we must store some value to local var
//		System.out.println("eid="+ eid);
		// The local variable eid may not have been initialized
		
		// FAQ what is the diff b/w instance variables and local var:
		

	}

}

------------------------
package OOPSBasics;

public class Student {
	
	//  instance variable
	String name;  //  charactertics of obj
	String color;
	float height;
	char gender;
	
	// instance Methods
    void playCricket()
	{
		System.out.println("in playCricket ");
	}
	
    void run()
    {
    	System.out.println("in Run");
    }
    
    void jump()
    {
    	System.out.println("in Jump");
    }

	public static void main(String[] args) 
	{
		// create object for student class
//		syntax:
		//  className  objRefNAme =  new className();
		Student  s1 =  new Student();
		// when we create obj for student class,  it gets copy of instance variables and Instance Methods
		
		//  assigning value to instance variables
		//  objrefername.varname;
		s1.name = "Ramu";
		s1.height  = 5.3f;
		System.out.println("name=" + s1.name);
		System.out.println("height=" + s1.height);
		//  calling method 
//		objref.MethodNAme();
		s1.playCricket();
		
		//  We can create multiple objects  for student class
		Student s2  = new Student();
		s2.name = "Sita";
		System.out.println("s2 name=" + s2.name);
		s2.run();
		
		
		// hashcode() -can be used to  get addreess of object 
//		s1 --   diff address 101x
//		s2  --   diff address  -- 103x
		int addressOfS1 =  s1.hashCode();
		System.out.println("addressOfS1 =" +addressOfS1); // addressOfS1 =1869997857
		
		int addressOfS2 = s2.hashCode();
		System.out.println("addressOfS2 = " +addressOfS2);// addressOfS2 = 1763847188
		// Each object has some unique address but not same address except String objects
		

	}

}

------------------------------------
package OOPSBasics;

public class FinalVariable {

	public static void main(String[] args) {
		 int eid =10 ;
		 System.out.println("eid=" + eid);// 10
		 
		 eid  = 103;
		 System.out.println("eid=" + eid); // 103
		 
		 eid = eid  +2 ;
		 //    103 + 2 = 105
		 //  eid =105
		 System.out.println("eid=" + eid); // 105
		 //---------------------------------------------------------------
		 // final var :  
		 // final - k/w in java-  means final var value  - is const  - we cannot chnage final var val
		 
		 final float PI = 3.14f; //  final var declaration
		 System.out.println("Pi=" + PI);
		// PI = 203.23f;// The final local variable PI cannot be assigned. It must be blank and not using a compound assignment
		 
		 // We can declare and assignement  in diff lines 
		 final float pi2;
		 pi2 = 1.7f;
		 
		 System.out.println("pi2 =" + pi2);
		 
		 // note :  final k/w is applicable for variable, Method, class
		 //  define final var
		 //  define final method
		 //define  final class
		 
	}

}
----------------------
Diff b/w instance var and local var ?
----------------------------------------------------------------
•	Instance (Global) and local variables
 - the var which are declared inisde class and outside method are called instance variables.
-  for all instance , we have default values based on data type -
- it is not compulsory to assigne values for instance variables

Local Variables:
the variables which are declared inside the method - are ccalleed local variables
   M1()
{
  int a; // local var
}
-  local var  - do not have defualt values
-  Local var must be initiliased with some value other wise we will get compile time error.
local variables can be accessed inside mehod where it is declared only .
 but cannot be accessed out side of method
------------------------------------------



**************************************************** 
	3-Sep-22
****************************************************

Method Over loading :

 writing same method with diff no of arguments  -

     	M1()
     	M1 (int a) //  1 arg
	M1(int a , in b)  //   2 args 
	M1(string s, String 2)  2 args  - String 

---------------------
'package MethodOverLaodingBasics;

public class MetohdOverLoading {



	// M OL :  writgin same method name   with doff no args and diff data type 
	public static void add()		
	{
		System.out.println("in add " + (10+20));//  30 	
	}

	public static void add(int  a, int b)		
	{						// a =10   b= 20 
		System.out.println(a+b);	//  10+ 20 == 30
	}
	// Note :  to indent code properly  - sleect all lines :  ctrl + I  -  indentation
	
	public static void add(int  a, char ch)		
	{				//         10        'A' -  65  
		System.out.println(a+ch);	// 10 + 65 = 75
	}
	
	public static void add(String  a, int b)		
	{			//               "Ramu"    10 
 		System.out.println(a+b);	// "Ramu" + 10 =  Concatenate or join 2 values - Ramu10
	}

	public static void main(String[] args) 
	{
		add();
		add(10,20);
		add(10 , 'A');
		
		add("Ramu", 10);
		

	}

}

//in add 30
//30
//75
//Ramu10

-----------------

/ Note : duplicate method name with same signtaure is not allowed in java
//	public static void add()   //  error :  it has beeen already defined add () with same signature		
//	{
//		System.out.println("in add " + (10+20));//  30 	
//	}
	
	
//	public static void add(int  a, int b)	 //  error : 	
//	{						// a =10   b= 20 
//		System.out.println(a+b);	//  10+ 20 == 30
//	}


Variable must have unique name - duplicate var names is  not allowed in java
int a;
float a; // error 

---------------------------------
package MethodOverLaodingBasics;

public class MultiplicationWithMethodOverLoad {

	
	public static void multiplication(int a , int b)
	{
		
		System.out.println(a*b);// 6
	}
	
	public static void multiplication(int a , int b, int c)
	{		
		System.out.println(a*b*c); // 24
	}
	
	
	public static void main(String[] args) {
		
		multiplication(2,3);
		multiplication(2,3,4);
		
		
	}

}


add();
Multiplication(2,3)
Multiplication(2,3,4)
same task can be done  diff ways  --

----------------------------
Can we over load main()?
package MethodOverLaodingBasics;

public class TestMain {

	public static void main()
	{
		System.out.println("main - with no args");
	}
	
	public static void main(int a)
	{
		System.out.println("main - 1 args");
	}
	
	public static void main(int a, int b)
	{
		System.out.println("main - 2 args");
	}
	
	
	public static void main(String[] args) {
	  main();
	  main(10);
	  main(10,20);  

	}

}

//main - with no args
//main - 1 args
//main - 2 args

------------------------
package MethodOverLaodingBasics;

public class StaticVar {
		//int empid; // instance var
		// static var :     static  is k/w in java --
	//   is applicable for var , Method ,   block
	//   we can define static var
//							Method
//							block
	//  declate static var :
	//  static    string ename; ///  sttaic var
	static String ename  ; //    creates only one copy in memory --   in static area
//	static String ename = "Ramu" ;
	
	public static void main(String[] args) {
		//   ways to access sttaic variables
		//1.  directly 
		//2 .  create Object -  use obj ref.staticvar;
		// 3 . classname.staticvarName ;
		
		//1 		
		System.out.println("Accessing static var ename="+ ename); //  null
		
		//2  create obj for class - StaticVar
		//   classname objref=  new clasanem();
		StaticVar  sref =  new StaticVar();
//		sref.ename
		System.out.println("accesssing static var ename using Objeref ="+ sref.ename);//  null
		
		// 3. 
//		StaticVar.ename
		System.out.println("accessing static var using Class name =" +  StaticVar.ename);// null

	}

}


---------------
package MethodOverLaodingBasics;

import OOPSBasics.Student;

public class student {

	// declate static var

	//	Static String CollegeName = "JNTU";
	// Note: all k/ws in java must be lower case letters // Static  -  invalid
	static String CollegeName = "JNTU";

	public static void main(String[] args) {

		//  create obj for student clas
		student  s1 = new student();
		System.out.println("Colleg name =" + s1.CollegeName);//Colleg name =JNTU
		
		s1.CollegeName = "Osmania";		
		//  note:  if we try to change static var value ,   then it will reflect for all objects  s2 ,s3

		student  s2 = new student();
		System.out.println("s2 college name =" + s2.CollegeName);
		System.out.println("Colleg name =" + s1.CollegeName);

		student  s3 = new student();
		//
		System.out.println("Colleg name =" + s3.CollegeName); // osmania
		
		System.out.println(CollegeName);// osmania
		
		// HW   s3.coll = "Oxford";
//		/  s1.CollegeName ,
		// s2 .colege name

	}

}

//Colleg name =JNTU
//s2 college name =Osmania
//Colleg name =Osmania
//Colleg name =Osmania


----------------
package MethodOverLaodingBasics;

public class TestMain {

	public static void main()
	{
		System.out.println("main - with no args");
	}
	
	public static void main(int a)
	{
		System.out.println("main - 1 args");
	}
	
	public static void main(int a, int b)
	{
		System.out.println("main - 2 args");
	}
	
	
	public static void main(String[] args) {
	  main();
	  main(10);
	  main(10,20);  

	}

}

//main - with no args
//main - 1 args
//main - 2 args


-----------------------
static Method:
package MethodOverLaodingBasics;

public class StaticVar {
		//int empid; // instance var
		// static var :     static  is k/w in java --
	//   is applicable for var , Method ,   block
	//   we can define static var
//							Method
//							block
	//  declate static var :
	//  static    string ename; ///  sttaic var
	static String ename  ; //    creates only one copy in memory --   in static area
//	static String ename = "Ramu" ;
	
	//  Define static method  
	public static void  M1() //  sttaic method :   if u define static k/w before retrun type -  
	{
		System.out.println("This is static method");
	}
	
	public static void main(String[] args) {
		//   ways to access sttaic variables/ Method
		//1.  directly 
		//2 .  create Object -  use obj ref.staticvar;
		// 3 . classname.staticvarName ;
		
		//1 		
		System.out.println("Accessing static var ename="+ ename); //  null
		
		//2  create obj for class - StaticVar
		//   classname objref=  new clasanem();
		StaticVar  sref =  new StaticVar();
//		sref.ename
		System.out.println("accesssing static var ename using Objeref ="+ sref.ename);//  null
		
		// 3. 
//		StaticVar.ename
		System.out.println("accessing static var using Class name =" +  StaticVar.ename);// null
		
		// Access static Methods
		//  
		M1();
		
		//2 
		sref.M1();
		
		// 3 class anne
		StaticVar.M1();
		
		
		

	}

}

o/p:
Accessing static var ename=null
accesssing static var ename using Objeref =null
accessing static var using Class name =null
This is static method
This is static method
This is static method

----------------------------
static block:
---------
package MethodOverLaodingBasics;

public class StaticBlockBasics {


	static {
		System.out.println("Executing this stmt before main ");		
		System.out.println("stm-2 before main()");
	}

	//  JVM check do we static block inside class ,  if we have any static -  1st  it executes static block only
	//  then  it executes   main() statements 
	public static void main(String[] args) {	
		System.out.println("I am in main()");
		// note :	
	}

}
//Executing this stmt before main 
//stm-2 before main()
//I am in main()


---------------------
package MethodOverLaodingBasics;

public class StaticBlockBasics {

	
	static {
		System.out.println("Executing this stmt before main ");		
		System.out.println("stm-2 before main()");
		 if(10>5)
		 {
			 System.out.println("true");			 
		 }
		 else
		 {
			 System.out.println("false");
		 }
		 //  Can I call any other Method ?
		 M2();		 
	}
	
	public static void M2()
	{
		System.out.println("in M2");
	}
	
	
	//  JVM check do we static block inside class ,  if we have any static -  1st  it executes static block only
	//  then  it executes   main() statements 
	public static void main(String[] args) {	
			System.out.println("I am in main()");
			// note :	

	}

}
o/p:
Executing this stmt before main 
stm-2 before main()
true
in M2
I am in main()

*********************************************
	06- Sep 
*********************************************

package ConstructorBasics;

public class A {
	
	//   constructor :  is similar to method or sepcial method
	// which can be used to initiliaze instance variable 
	// ex:
	//define   constr -->  class name and constr name must be same
	A()
	{
		System.out.println("calling constructor");
	}
	
	public static void M1()
	{
		System.out.println("in M1 ");
	}
	

	public static void main(String[] args) {
		 // Call method 
		M1();
		
		// create object for class - A --  const will be called automatically -   doont need to call explicitly
		A aref =  new A();		
		//  
		A aref2  = new A();
		
		

	}

}


//Notew:
A aref2  = new A();
		
		//  Dont write any return type for const
		//  Method - can return some val or may not 
		//  int, String ....   void
		// 
		int A()
		{
			
		}


package ConstructorBasics;

public class Student {
	
	String sname  ;
	String Address = "Chennai"; // 2 
	
	Student()  //  Default constructor-   if const does not have any args --  DC
	{
		sname  = "Swathi";
		Address = "Pune";	
	}
	
	void displayStudentDetails()
	{
		System.out.println("name= " + sname + ", address= " + Address);
	}
	
	public static void main(String[] args) {
		//  initilase instane var  with some values
		// 1. 
		Student s1  = new Student();
		s1.sname = "Ramu";
		s1.Address = "BNG";
		s1.displayStudentDetails();
		
		// 3   using constr -  we can inistialse instance var 
		Student s2 = new Student(); 		
		s2.displayStudentDetails();

	}

}

//name= Ramu, address= BNG
//name= Swathi, address= Pune


FAQ: What is constructor?

Types of constr :
1. Default constr :
		if constr  does not have any arguemnts -  it is called default constr.

	Student()  //  Default constructor-   if const does not have any args --  DC
	{
		sname  = "Swathi";
		Address = "Pune";	
	}
	
2. Paramter constructor:
		//  if we pass any paramters or any arguments - it is calles paramter cosnstr

	Student(String sname, String add)//   passing 2 args or parameters
{


}	

ex:
package ConstructorBasics;

public class Student {
	// int - 0 
	//  flaot  -  0.0
	// String  -- null 
	String sname  ; //  String  - defa val :  null 
	String Address = "Chennai"; // 2 
//	
//	Student()  //  Default constructor-   if const does not have any args --  DC
//	{
////		sname  = "Swathi";
//		Address = "Pune";	
//	}
	
	void M1()
	{
		Address = "Pune";
		System.out.println("Address = " +  Address);
	}
	
	void displayStudentDetails()
	{
		System.out.println("name= " + sname + ", address= " + Address);
	}
	
	public static void main(String[] args) {
		//  initilase instane var  with some values
//		// 1. 
//		Student s1  = new Student();
//		s1.sname = "Ramu";
//		s1.Address = "BNG";
//		s1.displayStudentDetails();
//		
//		// 3   using constr -  we can inistialse instance var 
//		Student s2 = new Student(); 		
//		s2.displayStudentDetails();
		
		Student s1  = new Student();
		s1.displayStudentDetails();
		
		Student s2  = new Student();
		s2.displayStudentDetails();
		
		s1.M1();
		s1.displayStudentDetails();

	}

}

//name= Ramu, address= BNG
//name= Swathi, address= Pune


-------------
package ConstructorBasics;

public class Student2 {
	
	String sname  ;  // instance var
	String Address = "Chennai"; // 2 
	int sid;
	
	// Static var  or non insatcne var 
	
	/// define single param constr
	Student2(String add)
	{
		System.out.println("1 PC ");	
		Address = add;
	}
	
	//  2 param constr
	Student2(String name , int id)
	{        //    "Swathi"       102
		System.out.println("calling 2 Param constr");
		 sname  = name; 
		 //       "Swathi" 
		 sid = id;
		 //     102 copied to ledft side var ie sid . so sid contains 102
		 System.out.println("name  =" + sname + ", id=" + sid);
	}
	
		
	public static void main(String[] args) {
				// calling 1 PC
		Student2 s  = new Student2("BNG");
		
		//  create object  -- 2 PC
		Student2 s1 =  new Student2("Raju", 101);
		
		// Create obje2
		Student2 s2 =  new Student2("Swathi", 102);		
				
	}

}

o/p:
1 PC 
calling 2 Param constr
name  =Raju, id=101
calling 2 Param constr
name  =Swathi, id=102



•	Constructor Over loading :  
FAq :  can we over laod constructor?
YEs.
  writing  same const name with diff no of arguments and diff no of data types - is called constr over loading..



This:
		/// this is a k/w in java 
		//   can be used to respresent the current class obj 
		// this -  refer current class instance var 
		//                              instance Methods
		//                              constructor
		
		// this.sname ="Raju";// errro: Cannot use this in a static context
		 // Note : this k/w should not be used in static Method -. main ()  is static method
		
//		this.display();//Cannot use this in a static context
		
//		this();// Constructor call must be the first statement in a constructor


***************************************************
	7-Sep-2022
***************************************************

This :
  is predefined k/w  in java.
 --  used to refer the  current class obj
1.  refer current class instance variables
  ex:  this.instancevarName

2.  refer currrent class instance methods

     this.M1();

3. refer the current class constructor
    this(); //  DC 
    this("Raju" , 101); //  2  PC

package ConstructorBasics;

public class Student4 {
	String sname; //  instacne vara
	int sid;
	
	// define constr
	Student4(String name, int id)
	{       // "Raju"         101  
		sname  =  name;
		//        Raju copied into left side var sname
		sid  = id;
		//    101
	}
	
	void M1() //  non static  method or Instance Method
	{
		System.out.println("sname =" +  this.sname + ", sid="+  this.sid);
		this.sname = "Swathi";
		this.sid = 201 ;		
		System.out.println("sname =" +  this.sname + ", sid="+  this.sid);
		this.M2();
	}
	
	void M2()  // Instance Method
	{
		System.out.println("Calling M2 Method");
	}
	
	
	public static void main(String[] args) {
		
		//   create obj for the class -Student4
		Student4  s1 =  new Student4("Raju", 101);
		// this  -- refer current intance var
//		this.sname = "Sam";
		// Cannot use this in a static context
		// Note:   This k/w , we should not use in static method
		//  this k/w cannot be used in static method
		
//		M1(); // Error
		//  if we want to call non-static method or Instance, We have to create obj, then call method
		
		s1.M1();
		
//		this.M1(); // Cannot use this in a static context
		
		
	}

}


--------------------

package ConstructorBasics;

public class Student4 {
	String sname; //  instacne vara
	int sid;
	
	Student4()
	{
			System.out.println("Default constructor");

	}
	
	// define constr
	Student4(String name, int id)
	{       // "Raju"         101  
		this(); //  must be first stmt inside constr only
		sname  =  name;
		//        Raju copied into left side var sname
		sid  = id;
		//    101
//		this();// error  it must be defiend as fist stmt
	}
	
	 void M1() //  non static  method or Instance Method
	{
		System.out.println("sname =" +  this.sname + ", sid="+  this.sid);
		this.sname = "Swathi";
		this.sid = 201 ;		
		System.out.println("sname =" +  this.sname + ", sid="+  this.sid);
		this.M2();
//		this();// Constructor call must be the first statement in a constructor
	}
	
	void M2()  // Instance Method
	{
		System.out.println("Calling M2 Method");
	}
	
	
	public static void main(String[] args) {
		
		//   create obj for the class -Student4
		Student4  s1 =  new Student4("Raju", 101);
		// this  -- refer current intance var
//		this.sname = "Sam";
		// Cannot use this in a static context
		// Note:   This k/w , we should not use in static method
		//  this k/w cannot be used in static method
		
//		M1(); // Error
		//  if we want to call non-static method or Instance, We have to create obj, then call method
		
		s1.M1();
		
//		this.M1(); // Cannot use this in a static context
		
		
	}

}

o/p:
Default constructor
sname =Raju, sid=101
sname =Swathi, sid=201
Calling M2 Method

-----------------
Calling 2 Paramter constructror:

package ConstructorBasics;

public class Student5 {
	String sname; //  instacne vara
	int sid;

	Student5()  // DEfault  const -- no args 
	{
		this("Ram",  101); // calling 2 PC
		System.out.println("Default constructor");		
	}

	// define constr
	Student5(String name, int id)
	{  
		System.out.println("Calling 2- parameter constructor");
	}


	public static void main(String[] args) {

		//  call 2 PC using thi 
		//		this();
		//		this("Ram",101);
		Student5 s1 =  new Student5(); //  Call DC  first	


	}

}


o/p:
Calling 2- parameter constructor
Default constructor

FAQ:  what is constructor in Java ?
 
FAQ:   what is the use of this ?
      var, Mtehod, constr 
   this.var
this. M1();
 this();
this("Ram", 101);

--------------------------------------------------
•	Constructor vs Method

1.  Def :   special method -    constr name must be same as class name

 package ConstructorBasics;

public class D {
		int id;
	  // 
	D()  //  class name and constr name must be same 
	{
		System.out.println("Default constr");
		id = 101; // initialising the instance var
	}
	
	//constr   cannot have return type void, int , String ,float

	void M1() //  to perform specific task
	{
		 //Method can have some return type void, int , String ...etc
		System.out.println("in M1 Method");
	}
	
	public static void main(String[] args) {
		
		//  call constr -   have to create obj for class
		D d1 = new D(); //   calls automatically Default constr
		//   no need to call constr explicitly
		
		// IF we want to call method M1() ,  We ahve to call Method by name explicilty
		d1.M1();
		
		
		
	}

}

//Default constr
//in M1 Method

FAQ What is difference b/w constructor and Method? 
1. Def   
2. return type  -   
3. call    ,  
4. constr -  class anme   ,,    Method -  name - class anme  +   any other class
5.    args  -  
package ConstructorBasics;

public class D {
		int id;
	  // 
	D()  //  class name and constr name must be same 
	{
		System.out.println("Default constr");
		id = 101; // initialising the instance var
	}
	
	//constr   cannot have return type void, int , String ,float

	void M1() //  to perform specific task
	{
		 //Method can have some return type void, int , String ...etc
		System.out.println("in M1 Method");
	}
	
	void D()  // This is not constr but this is method  as we gave return type (void) for method
	 //  Method name -  can be class name as well as other name
	{
		System.out.println("in Method");
	}
	
	public static void main(String[] args) {
		
		//  call constr -   have to create obj for class
		D d1 = new D(); //   calls automatically Default constr
		//   no need to call constr explicitly
		
		// IF we want to call method M1() ,  We ahve to call Method by name explicilty
		d1.M1();
		d1.D();
		
	}

}

//Default constr
//in M1 Method


*******************************************
Inheritance :

package InheritanceBasics;

import ConstructorBasics.Student4;

class Parent
{
	 int land = 5;
	 int cars = 4;	 
	 int houses = 2;
	 
	 void M1()
	 {
		 System.out.println("Parent class - M1 ()");
	 }		
}


public class Child extends Parent
{  
				//	 int land = 5;
				//	 int cars = 4;	 
				//	 int houses = 2;
				//	 
				//	 void M1()
				//	 {
				//		 System.out.println("Parent class - M1 ()");
				//	 }
					 	 
	public static void main(String[] args) {
		
		// create obj for child class
		Child  ch  = new Child();	
		
		System.out.println("-----> land =" + ch.land);		
		System.out.println("cars =" + ch.cars);
		System.out.println("houses =" + ch.houses);		
		
		//  call method M1
		ch.M1();			
	}

}

o/p:
-----> land =5
cars =4
houses =2
Parent class - M1 ()


------------------------------------
b1.b=20
in M2 Method
b1.a=10
Parent Class - M1

--------------------------------
ex2:
package InheritanceBasics;

public class A {
	
	int a =10; 
	
	void M1()
	{
		System.out.println("Parent Class - M1");
	}
		

}

-------------
package InheritanceBasics;

public class B extends A // parent 
{  //  B - child class   //   getting parent class -"A:  instance var + Mehod  from  'A' class into child Class -B 

	// A- parent class
//				int a =10; 
//					
//					void M1()
//					{
//						System.out.println("Parent Class - M1");
//					}
				
	
	int b =20;
	void M2() 
	{
		System.out.println("in M2 Method");
	}

	public static void main(String[] args) {
		// create object  for class - B
		//  classNAme  objRefVar  =  new classNAme();
		B  b1 =  new B();
		//    objref.instanceVarNAme
		///  objref.MethodNAme();
		
		System.out.println("b1.b=" +  b1.b);// 20 
//		System.out.println("b1.M2() =" +  b1.M2());
		b1.M2();
		
		// callling parent clas  var  and Method
		System.out.println("b1.a="+ b1.a);
		b1.M1();	  
		
	}

}




*************************************************
	9-Sep-2022
*************************************************

package InheritanceBasics;

import ConstructorBasics.Student4;

class Parent
{
	 int land = 5;
	 int cars = 4;	 
	 int houses = 2;
	 
	 void M1()
	 {
		 System.out.println("Parent class - M1 ()");
	 }		
}


public class Child extends Parent
{  
				//	 int land = 5; //   copy of parent class var  + Methods
				//	 int cars = 4;	 
				//	 int houses = 2;
				//	 
				//	 void M1()
				//	 {
				//		 System.out.println("Parent class - M1 ()");
				//	 }
	int id  = 10;	
	void M2()
	{
		System.out.println("in M2");
	}
	
	public static void main(String[] args) {
		
//		//create obj for parent class 
//		Parent  p  = new Parent();
//		System.out.println("p.land=" +  p.land);
//		
//		// call M1()
//		p.M1();
		
		
//		// create obj for child class
		Child  ch  = new Child();	
//		
		System.out.println("-----> land =" + ch.land);	// 5	
		System.out.println("cars =" + ch.cars);// 4
		System.out.println("houses =" + ch.houses);		// 2
	
//		
//		//  call method M1
		ch.M1();			
	}

}

o/p:
-----> land =5
cars =4
houses =2
Parent class - M1 ()

------------------------
package InheritanceBasics;

public class B extends A // parent 
{  //  B - child class   //   getting parent class -"A:  instance var + Mehod  from  'A' class into child Class -B 

	// A- parent class
//				int a =10; 
//					
//					void M1()
//					{
//						System.out.println("Parent Class - M1");
//					}
				
	
	int b =20;
	void M2() 
	{
		System.out.println("in M2 Method");
	}

	public static void main(String[] args) {
		// create object  for class - B
		//  classNAme  objRefVar  =  new classNAme();
		B  b1 =  new B();
		//    objref.instanceVarNAme
		///  objref.MethodNAme();
		
		System.out.println("b1.b=" +  b1.b);// 20 
//		System.out.println("b1.M2() =" +  b1.M2());
		b1.M2();
		
		// callling parent clas  var  and Method
		System.out.println("b1.a="+ b1.a);
		b1.M1();	  
		
	}

}

------------------------------
Multi Level Inheritance:
package InheritanceBasics;

 class A1
 {
	 
	 int a= 10;
 }
 
 class B1 extends A1
 {
	  //  copy of class - A1 - var into child class -B1
	 // int a= 10;
	 int b=20;
 }
 
 class C1 extends B1 
 {
	 // copy of B1 class var + Methodss into child class B1
	 //  copy of class - A1 - var into child class -B1
	 // int a= 10;
//	 int b=20;
	 
	 int c=30;
	 
 }

public class TestMultiLevel 
{

	public static void main(String[] args) {
	
		 A1 aref=  new A1();
		 System.out.println("aref.a=" + aref.a);// 10 
		 
		 // Create obj for B1 clas
		 B1 b1 = new B1();
		 System.out.println("b1.a=" + b1.a); //10 
		 System.out.println("b1.b=" + b1.b);// 20
		 
		 // create obj for class C1
		 C1 c1 = new C1();
		 
		 System.out.println("c1.a=" + c1.a); //10 
		 System.out.println("c1.b=" + c1.b);// 20 
		 System.out.println("c1.c=" + c1.c); // 30
		 
		
	}

}

------------------------------------
package InheritanceBasics;

class A3
{
	int a=10;
	
}

class B3 extends A3
{  //  Child class - B3
	// PArent class - A3
	// copy of   int a=10;
	int b= 20;
	
}

class C3  extends A3
{
	//  copy of A3 var + Method
	// 	int a=10;
//  Child class - C3
	// PArent class - A3
	int c= 20;	
}

public class testHierarchicalInheritance {

	public static void main(String[] args) {
		// HW  
		A3 a3 = new A3();
		System.out.println("a3.a=" + a3.a); // 10
		
		// crate obj for class B3
		B3 b3 = new B3();
		System.out.println("b3.a = " + b3.a);// 10
		System.out.println("b3.b = " + b3.b);//20
		
		// HW create obj for class C3 ;; check we are able to access variables a, b
		
		
	}

}

o	Multiple : 

FAQ: why Multiple Inheritance  is not possible in Java  through classes  ?

  
package InheritanceBasics;

class A4
{
	int a=10;
}

class B4
{
	 int a=20;
	
}

class c4 extends A4, B4  // invalid synatx 
{ // Note:  after extends k/w , we have to write only one class name
	// We cannot write multiple  class names after extends k/w
	
	//  copy of A4 class - var + Method  --   a  =10
	// copy of B4 class - var + Method   --   a =20;
	// JVM will be confused whether I ahve to access A4 class var a=10
	//or                                              B4 class var  -  a=20
	
	
}

public class testMultipleInheriatcne {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}


Note:
 Multiple  - not possible by class concept
            - possible by Interface concept 
--------------------------------------------------
•	Terminologies used Inheritance:

parent class  or super class or base class
child class  or  sub class  or derived class 


FAQ What is the use of super k/w in Java ?


package InheritanceBasics;

class A5
{
	int a=10;
	void M1()
	{
		System.out.println("calling M1() ");
	}
}

class B5 extends A5
{
//				copy of A5 class Var + Methods M1()
//						int a=10;
//						void M1()
//						{
//							System.out.println("calling M1() ");
//						}
	
	// Define constr 
	B5()
	{
		System.out.println("Parent class -Def const  from B5");
	}
	
	int b=20;
	void M2()
	{
		System.out.println("calling M2()");
	}
	
}

public class TestSuper extends B5
{

							//	copy of A5 class Var + Methods M1()
							//			int a=10;
							//			void M1()
							//			{
							//				System.out.println("calling M1() ");
							//			}
							//
							//int b=20;
							//void M2()
							//{
							//System.out.println("calling M2()");
							//}
							//	
	// define constr
	TestSuper()  // Def const -   no args
	{
		super();// call parent class constr
		System.out.println("Calling Def constr from child class");
		//this();// Constructor call must be the first statement in a constructor
	}
	
	//
	
	void M3() //  non static Methods
	{
		System.out.println("parent class var -a using super =" + super.a);// 10
		System.out.println("parent class var - b using super =" + super.b); // 20
		
		// 2 calling super class Method
		super.M2();
		super.M1();
		// 3 calling parent class const
//		this(); //  def constr
//		this(10); //   1 PC
//		this("Raju", 101);  //  2 PC
		
		// Constructor call must be the first statement in a constructor
//		super(); //  call parent class Def const
//		super(10)//   call parent class  -  1 PC
//		super("Ram" ,102);// call Parent class  -  2 PC
		
	}
	
	public static void main(String[] args)  // static Method
	{
		//  this is k/w in java - 
		 //   refer current class insatnce var
		//                         instance Methods
		//                    constructor
		
		// Super is predefined k/w in java
		// 1.Super  can be used to refer parent class var 
		// 2.                      parent class Method
		// 3. 						parent class constructor
		
		//1 
		
//		System.out.println("parebt class Var =" + super.b);
		// Cannot use super in a static context
		// Note : super k/w cannot be used in sttaic method
		//  this k/w  ""
		
		TestSuper  t1  = new TestSuper();
		t1.M3();
		
		// 2 
//		super.M2(); //  Cannot use super in a static context
		
		
	}

}

o/p:
Parent class -Def const  from B5
Calling Def constr from child class
parent class var -a using super =10
parent class var - b using super =20
calling M2()
calling M1() 

*********************************************************
	9-Sep-2022
*********************************************************
if Parent class and child has same var names and same methods::

package InheritanceBasics;

class A2
{
	int a=10;
	void M1()
	{
		System.out.println("Parent class M1()");
	}
}

public class testSuper2 extends A2
{ 
								// getting from A2 class

										//	int a=10;
										//	void M1()
										//	{
										//		System.out.println("Parent class M1()");
										//	}

	int a=20;
	void M1()
	{
		System.out.println("Child class M1()");
	}
	
	public static void main(String[] args)
	{
		testSuper2 t = new testSuper2();
		t.M1(); // calls child class method
		// if Parent class and child has same var names and same methods,  first priority will be given to child class Method
		
		System.out.println("var a= " + t.a);// 20		
		
	}

}


o/p:
Child class M1()
var a= 20


----------------------------

package InheritanceBasics;

class A2
{
	int a=10;
	void M1()
	{
		System.out.println("Parent class M1()");
	}
}

public class testSuper2 extends A2
{ 
								// getting from A2 class

										//	int a=10;
										//	void M1()
										//	{
										//		System.out.println("Parent class M1()");
										//	}

	int a=20;
	void M1()
	{
		System.out.println("Child class M1()");
		
	}
	
	public static void main(String[] args)
	{
		testSuper2 t = new testSuper2();
		t.M1(); // calls child class method
		// if Parent class and child has same var names and same methods,  first priority will be given to child class Method
		
		System.out.println("var a= " + t.a);// 20	
		
		
		// HW   call parent class methods and Parent class var 
//		this, super
//		super.a;
		
		
	}

}

-----------------------------------
HW :Can we call static method using this k/w?

 this -- >  to call current class instance var
				   instance method
				     constructor


-----------------------------------------------------
package InheritanceBasics;

class  A7
{
	//  Define const
	A7()
	{
		System.out.println("A7 -calling DEf constr from class -A7");
	}	
}

class B7  extends A7
{
	// Note: before executing child class constructor,   it checks first  parent class has any const or not
	//  if parebt class has any constr, it executes first parent class constr, then it executes child class constr 2nd
	
	// define constr
	B7()
	{
		System.out.println("B7 -calling DEf constr from class -B7");
	}
}


public class testSuperImplicitCall 
{

	public static void main(String[] args) 
	{
		//  create obj for B7 class
		 B7 b7ref =  new B7();
		 //  call DEf constr 
		 
		
	}

}

//A7 -calling DEf constr from class -A7
//B7 -calling DEf constr from class -B7

--------------------------------------------------
package InheritanceBasics;

class  A7
{
	//  Define const
	A7()
	{
		System.out.println("A7 -calling DEf constr from class -A7");
	}	
}

class B7  extends A7
{
	// Note: before executing child class constructor,   it checks first  parent class has any const or not
	//  if parebt class has any constr, it executes first parent class constr, then it executes child class constr 2nd
	
	// define constr
	B7()
	{
		//super(); // call parent class - DC  A7()
		//  This is optional-  even if dont write super() ;  calls parent class def const automatically
		System.out.println("B7 -calling DEf constr from class -B7");
	}
}


public class testSuperImplicitCall 
{

	public static void main(String[] args) 
	{
		//  create obj for B7 class
		 B7 b7ref =  new B7();
		 //  call DEf constr 
		 
		
	}

}

//A7 -calling DEf constr from class -A7
//B7 -calling DEf constr from class -B7

************************************************************************

Method Overriding:
package InheritanceBasics;

class parent2
{
	 void M1() //  parent class Method
	 {
		 System.out.println("PArebt class M1() ");		 
	 }
	
}

// Rename class name ?
//  move mouse over on class name-  >  click 'Rename File to Parent2Rename.java'
//  file will be renames -
public class child2 extends parent2
{
	
	// Method over riding
	 void M1() //  parent class Method
	 {
		 System.out.println("Overirding parent class Method in child class with Diff implementations ");		 
	 }
	
	public static void main(String[] args) {
		
		//  Method over loading : 
				//   add();
				//  add(10);
				// add(10,20);
				// add(String s, int a)
		
		// Method over riding :
//			  writing same method from parent class in child class  with diff logic or diff implmentation
		//  dont chnage nethod signature
		//   dont chnage return type -- void , int ,String ...
		
		child2 ch  = new child2();		
		ch.M1();	

	}
}

//Overirding parent class Method in child class with Diff implementations 
FAQ: What is method overriding ?



class car
{

        start()
	{
	   sop(" Insert keys and turn to right side");	
	}

	stop()
	{
	  sop("Tutn keys to left side")	
	}

}

class Maruthi  extends car
{
	 start()
	{
	   sop("Insert Keys and turn to left side");	
	}
		
//    over irding
	stop()
	{
	  sop(" Automatic Key -  stop Option  ")	
	}


}


class BMW
{
  start()
	{
	   sop(" Automated - options -  start butoon - press start button");	
	}

	stop()
	{
	 sop(" Automated - options -  stop button - press stop button");	
	}

}
//**************************************************************
Abstraction:
   showing only  functionlaity to user but not implementation -   this is called abstraction
                                               complete details
ex :   project report -- abstraction

Abstraction cna be achieved by 2 ways in Java
1. Abstract class:
2. Interface

1. Abstract class :

 abstract is predeifned k/w in java. 
-  useed  to define abstract class

abstract  class A  ///  abstract class
{


}
 

class   A 
{

//  var   // instance variables 

// Method s
	public sttaic void M1()	 // static method
	{
	
	}

	void M1() //  non static method
	{

	}

		
}

- Abstract  class can  contain abstract Methods  and non abstract Methods

package AbstractBasics;

//   define abstract class
abstract class AB1  //   abstr class
{
	//  abstr methods : 
	//     is incomplete method - 
	//   it does not have any body --  so dont write method body
	//  showing only functionlaity to user  but not implementation
	  abstract void M1();
//	  {
//		  // Method obody
//		  
//	  }
	  
	  //  define one more abstr method
	  abstract void M2();
		
	// non abstr methods -- define method body -- normal method
	  void M3() //  non abstr methods -- complete method -  can define body of method
	  {
		  System.out.println("calling M3");
	  }
}


public class TestAbstr {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}


************************************************************
	11-Sep-2022
**************************************************************
package AbstractBasics;

//   define abstract class
abstract class AB1  //   abstr class
{
	//  abstr methods : 
	//     is incomplete method - 
	//   it does not have any body --  so dont write method body
	//  showing only functionlaity to user  but not implementation
	
	  abstract void M1(); //  we have to define M1()  some where
	  //    in child class  or implemnting method 
//	  {
//		  // Method obody
//		  
//	  }
	  
	  //  define one more abstr method
	  abstract void M2();
		
	// non abstr methods -- define method body -- normal method
	  void M3() //  non abstr methods -- complete method -  can define body of method
	  {
		  System.out.println("calling M3");
	  }
}


public class TestAbstr extends AB1 // The type TestAbstr must implement the inherited abstract method AB1.M1()
{
	//  child class gets copy of parent class var + parent clas Method
	//                                                  M3()  
	void M1() //   
	{
		System.out.println("Definining body for abstarct methd -M1()");
	}
	
	void M2() 
	{
		System.out.println("Defining body for abstarct metho - M2 ");
		System.out.println("stmt-2");
	}
	
	public static void main(String[] args) {
		
		//   normal class Student- create obj 
		//   for abtsrct class- we cannot create an obj
		
//		AB1   abref=  new AB1();
		//Error :  Cannot instantiate the type AB1
		
		TestAbstr  t1 = new TestAbstr();
		t1.M1();
		t1.M2();
		
		t1.M3();

	}

}


FAQ: When to Go for abstract  class ?
when we dont want to define method body/ impment some methods  and  some methods we want to define, We will go for abstarct class ..
************************************************************
Interface :

package InterfaceBasics;

public interface I1 
{
	// Interface is simpilar to class 
	//   define class:   class  Student
	//  interface is predefined k/w in java
	//        can be used to create/define interface
//	Syntax :  interface  someName
	//  it contains only Abstract Methods
	
	//   abs -  method-   not complete methd-  dont define method
	//  just show method name-  dont define body
	abstract void M1();//     some where I have to define /  implement this method
	abstract void M2();//
	
	//   if we define non abstract method,,  it throws error: Abstract methods do not specify a body
//	void M3() // Abstract methods do not specify a body
//	{
//		System.out.println("in M3");
//	}
	
	//  Interface : dont define any non abstract methods. i.e dont define metho with body
	
	//  

}

---------------------------------------------

package InterfaceBasics;

//  if we want to define / implmnet abstarct of Interface, we have to use 'implements ' k/w in class
public class C1  implements I1
{

	@Override
	public void M1() {
		// TODO Auto-generated method stub
		System.out.println("Defining/ Implementig abstrcat method M1-   in Class- C1");
	}

	@Override
	public void M2() {
		// TODO Auto-generated method stub
		System.out.println("Defining/ implementing abstr Method - M2 in class - C1");
	}


	public static void main(String[] args) {
		
		//  FAQ Can we create obj for an Interface
		// Note:   we can create obj for class only but not for interface,  abstract class
//		I1 i1 = new I1();
		//  erro :   we cannot create object/ instantiate for Interface I1
		
		//  new Student()
		//  new A();
		//Note:   after 'new' k/w, we have to use only class Name but not abstract class name (AB1) and Interface name (I1)
		
		// create obj for class - C1
		C1 c1ref =  new C1();
		c1ref.M1();
		c1ref.M2();	
		
	}

	
	
}

o/p:
Defining/ Implementig abstrcat method M1-   in Class- C1
Defining/ implementing abstr Method - M2 in class - C1


----------------------------------------------------
Revise:
Interface :
what :   
abstract Method -  

class C1 implements I1
{
    void M1()
{

}

}

--------------
	@Override
	public void M2() {
		// TODO Auto-generated method stub
//		System.out.println("Defining/ implementing abstr Method - M2 in class - C1");
		// Note :  if we dont write any stmts inside M2 () , it is acceptible -   no error
		//  at least we should define body without stmts i.e  simply with curly braces is also fine
	}

FAQ :  What is interface ?
FAQ When should We go Interface ?
wehn We dont want  to define any method body for all methods, We will go for interface.
 we are leaving implmenattaion for  class - C1 completely,  .....

Abstract class -   abst Method  +     non abst Methods
            dont define body         - define body

------------------------------
package InterfaceBasics;

public interface I2 
{
	//  var  - "public static final"  
	public static final String sname = "";
	 String sid ="";
	
	//  Abstr Methods only
	abstract void M3();
	 void M4();// if we dont absract k/w in method--   this method is abstarct method
	 //   abstact  k/w  will be added by default in interface
	
	 

}

---------------------
package InterfaceBasics;

public class C2 implements I2
{

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		C2 c2 = new C2();
		c2.M3();
		c2.M4();
	}

	// Adding unimplemented methods 
	@Override
	public void M3() {
		// TODO Auto-generated method stub
		System.out.println(" Implments M3 () ");
	}

	@Override
	public void M4() {
		// TODO Auto-generated method stub
		System.out.println("Implementing M4");
		
	}

}

*************************************************************************
FAQ What is the difference b/w abstract class and Interface ?
1. Def  
  I -  abstrac Methods
2. where do u define abstract methods -in child
   I -   implments in class - we have to sue implements k/w
3. if we  todefine  abstr methods-    we should use inheritance
   I -   no need inhertance
4.  when to 

*************************************************************
	
100% abstraction can be achieved through interface only 
******************************************************
	12-Sep-2022
******************************************************
Interface Examples:
----------------------
1.printable   HP ,Dell
-----------------------
package InterfaceBasics;

interface printer
{
	void print();//	
}

class HPprinter implements printer  // implementation class 
{  // it is the class , where we are providing implementation to method
	//                             defininig method body
	@Override
	public void print() {
		System.out.println("HP printer prints pages using logic -1");
	}	
}

class DellPrinter implements printer  //  // implementation class 
{
	@Override
	public void print() {
		System.out.println("Dell printer prints pages using logic -2");
	}	
}

public class testPrinter {

	public static void main(String[] args) {
		
		// create obj for HPPrinter clas
		HPprinter  hpRef=  new HPprinter();
		hpRef.print();// HP printer prints pages using logic -1
		
		// HW  Create obj for DellPrinter - class and call print() 
		
	}

}

------------------------------------
2.Car , Maruthi , BMW, Tesla
--------------
package InterfaceBasics;

 abstract  class car
{
 	abstract void startCar(); //  abstr method -- incomplete methods
 	
	 // non abstract metod -- can define  body
 	void stopCar()
 	{
 		System.out.println("Turn Keys to left side - it stops car");
 	}
 	
 	void Accelerate() //   non abstr method
 	{
 		System.out.println("increate speeed to 60 Km/per hour");
 	}
 	
}
 
class Maruthi extends car
{
   //  we must defibe interface methods in child class else it throws error
	void startCar()
	{
		System.out.println("Turn keys to right side - start car");
	}	
}

class Tesla  extends car
{
	@Override
	void startCar() {
		System.out.println( "Press Start buttontor use Googgle Voice recognition technologies or Some AI technologies");		
	}	
}

public class testCarAbstractclass {

	public static void main(String[] args) {
		
		Maruthi m=  new Maruthi();
		m.startCar();
		
		
		// 
		Tesla  t  =  new Tesla();
		t.startCar();		
	}

}

//
//Turn keys to right side - start car
//Press Start buttontor use Googgle Voice recognition technologies or Some AI technologies
-------------------------------------------

HW : 3. mobile : Intrface  -   dailNo() , SendMsg()

 classes:  Samsung, one plus, iphone 
----------------------------------------------------------

Class A  implements I1 

Class A implements I1, I2 , I3 -- possible:
-----------------------
package InterfaceBasics;

public interface I1 
{
	// Interface is simpilar to class 
	//   define class:   class  Student
	//  interface is predefined k/w in java
	//        can be used to create/define interface
//	Syntax :  interface  someName
	//  it contains only Abstract Methods
	
	//   abs -  method-   not complete methd-  dont define method
	//  just show method name-  dont define body
	abstract void M1();//     some where I have to define /  implement this method
	abstract void M2();//
	
	//   if we define non abstract method,,  it throws error: Abstract methods do not specify a body
//	void M3() // Abstract methods do not specify a body
//	{
//		System.out.println("in M3");
//	}
	
	//  Interface : dont define any non abstract methods. i.e dont define metho with body
	
	//  

}

--------------------
package InterfaceBasics;

public interface I2 
{
	//  var  - "public static final"  
	public static final String sname = "";
	 String sid ="";
	
	//  Abstr Methods only
	abstract void M3();
	 void M4();// if we dont absract k/w in method--   this method is abstarct method
	 //   abstact  k/w  will be added by default in interface
	
	 

}

--------------------
package InterfaceBasics;



public class testMultipleInterfaces  implements I1, I2
{

	@Override
	public void M1() {  //  defining body for M1()   from I1
	
		System.out.println("defining body in child class - for M1()");	
	}

	@Override
	public void M2() { //  defining body for M2()   from I1
		System.out.println("defining body in child class - for M2()");			
	}
	
	
	@Override
	public void M3()  //  defining body for M3()   from I2
	{
		System.out.println("defining body in child class - for M3()");	
	}

	@Override
	public void M4() { //  defining body for M4()   from I2
		
		System.out.println("defining body in child class - for M4()");	
	}

	public static void main(String[] args) {
		
		testMultipleInterfaces t  = new testMultipleInterfaces();
		t.M1();
		// HW call M2(), M3() , M4()
		
	}


}

o/p:
defining body in child class - for M1()

---------------------------
Interface Inheirtance :

Class A  extends B   -- class inheritance 
Interface I1 extends I2 // An interface can extend another Java interface only.
-----------------
package InterfaceBasics2;

interface I1
{
	void M1();
}

// Class B extends A 
interface I2  extends I1
{  //   child Intergace  - I2
	//  parent interface - I1
	//  getting parent interface I1 method in child interface  I2
	// void M1();
	void M2();
}


public class testInterfaceInheritance implements I2
{
	public void M1()
	{
		System.out.println("Defining Method body for abstarct Method - M1() from Interface -I1 ");
	}
	public void M2()
	{
		System.out.println("Defining Method body for abstarct Method - M2() from Interface -I2 ");
	}

	public static void main(String[] args) {
		testInterfaceInheritance  t =  new testInterfaceInheritance();
		t.M1();
		
	}

}

---------------------------------------------------------------
Interface -  support Multiple inheritance
valid :   class B extends A implemnts I1, I2   -- we dont use much in automation
------------------------------------------
•	Polymorphism:
	poly - many 
	morph -  forms

2 types of poly morphism :
1. static poly morphism or compile time polymorphism:
 During compilation time,  we will come to know which method has to be called  - compile time
     ex:  Method over loading
   
2 .Dynamic poly morphism or Run time polymorphism:
--------------------------
During run time, We will come to know which method has to be called -  Run time polymorphism
ex: Method over riding:


ex:  method over loading 
 

o	Method Overloading :  Writing same method name with diff no of argumnets  or parameters ,  diff data types
		add();
		add(int a)
		add(int a, int b);
		add(String s, int b)

ex:
package MethodOverLaodingBasics;

public class MetohdOverLoading {



	// M OL :  writgin same method name   with diff no args and diff data types 
	public static void add()		
	{
		System.out.println("in add " + (10+20));//  30 	
	}

// Note : duplicate method name with same signtaure is not allowed in java
//	public static void add()   //  error :  it has beeen already defined add () with same signature		
//	{
//		System.out.println("in add " + (10+20));//  30 	
//	}
	
	
	public static void add(int  a, int b)		
	{						// a =10   b= 20 
		System.out.println(a+b);	//  10+ 20 == 30
	}
	
//	public static void add(int  a, int b)	 //  error : 	
//	{						// a =10   b= 20 
//		System.out.println(a+b);	//  10+ 20 == 30
//	}
	
	// Note :  to indent code properly  - sleect all lines :  ctrl + I  -  indentation
	
	public static void add(int  a, char ch)		
	{				//         10        'A' -  65  
		System.out.println(a+ch);	// 10 + 65 = 75
	}
	
	public static void add(String  a, int b)		
	{			//               "Ramu"    10 
 		System.out.println(a+b);	// "Ramu" + 10 =  Concatenate or join 2 values - Ramu10
	}

	public static void main(String[] args) 
	{
		add();
		add(10,20);
		add(10 , 'A');		
		add("Ramu", 10);
		

	}

}

//in add 30
//30
//75
//Ramu10



------------------------------	
	
o	Method over riding :   ex for Run time polymorphism
package InterfaceBasics2;

//Method over riding :  writing parent class Method in child class with diff logic
//						Defining ""
class p // parent class or super or base class
{
	  void startCar()
	  {
		  System.out.println("insert keys - turn keys to right side -");
	  }
}

class c extends p  // child class or sub class or Derived class
{
	// get copy of parebt class metod startCar();
	 void startCar()
	  {
		  System.out.println(" Press 'Start' button");
	  }
}

public class TestMethodOverRiding {

	public static void main(String[] args) {
		c cref = new c();
		cref.startCar();
		
	}

}
//  Press 'Start' button

********************************************	
FAQ:   Method Overloading vs Method overriding
1. Def:
   M OL: Writing or Defining same methd anme with diff no of args or diff no data types 

	// M OL :  writgin same method name   with diff no args and diff data types 
	public static void add()		
	{
		System.out.println("in add " + (10+20));//  30 	
	}

// Note : duplicate method name with same signtaure is not allowed in java
//	public static void add()   //  error :  it has beeen already defined add () with same signature		
//	{
//		System.out.println("in add " + (10+20));//  30 	
//	}
	
	
	public static void add(int  a, int b)		
	{						// a =10   b= 20 
		System.out.println(a+b);	//  10+ 20 == 30
	}

   M OR: writing parent class method in child class with diff logic or diff implemntation

2. MOL:   can  be done in the same class .
    M OR : can be done in child class 

3 .MOL :  Do we need inheritance --- same class -  no need 2 classes
  M OR :   needs Inheritance  
4.  MOL:     ex for compile time polymorphism
   MOE:  ex for  Dynamic polymorphism

5.  In java, method overloading can't be performed by changing return type of the method only. Return type can be same or different in method overloading. But you must have to change the parameter.
	void add()  //
         int add(int );

MOR:   child class method Return type must be same as Parent class Method
    child class method 	arguments must be as same as parent class Method

Note:
// get copy of parebt class metod startCar();
	 void startCar()
//	int startCar()  --  This is not Method over riding
//	String startCar()  -- This is not Method over riding
	  {
		  System.out.println(" Press 'Start' button");
	  }

******************************************
		13-Sep-22
*****************************************	
Multiple Inheritance through Interface : -   possible 
				Class  --   is not possible 

Multiple Inheritance through Classes :
package MultipleInheritanceBasics;

class A
{
	int a =10;
	
}


class B 
{
	int a =20;
}

class C extends A,B // assume  --  
{   // Note :  after extends k/w , we have to give only class name but not multiple
	// getting parent class A - var int  a=10; into child class
	// 			"			B  int a =20;
	//  
	
}

public class testMultiple 
{
	public static void main(String[] args) {
	   
	   C cobj = new C();
//	   cobj.a ;  JVM will be confused whether I Have to acces  A class var a,  B- class var a
	   

	}

}


---------------------
package MultipleInheritanceBasics;

interface I1
{
	int a=10;
	void M1();// // Abs method
}

interface I2
{
	int a=20;
	void M1(); // Abs methods
}

public class testMultipleInheritabceUsingInterface implements I1, I2
{

	public static void main(String[] args) {
		  // accesing I1  interface var  
//		Synatx:  inetrfaceNAme.Var;
		
		System.out.println("Inetrface I1 var a=" + I1.a );		
		System.out.println("Inetrface I2 var a=" + I2.a ); 
		// there is no confusion  --  to acces parent interfaces I1 and I2 varaibles

	}

	@Override
	public void M1() {
		// TODO Auto-generated method stub

	}

}

o/p:
Inetrface I1 var a=10
Inetrface I2 var a=20

-----------------------------------

package MultipleInheritanceBasics;

interface Father
{
	float height =6.2f;
	void height();
}

interface Mother
{
	float height =5.8f;
	void height();	
}

class Child  implements Father, Mother
{
	@Override
	public void height() {
		//  avg height of child  =  father ht  + Mother /2
		float avgHeight = 	(Father.height + Mother.height)/2 ;
		System.out.println("Avg height of child = "+  avgHeight);
		// Avg height of child = 6.0
	}
}

public class Multi {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// create  obje for child class
		Child ch  =  new Child();
		ch.height();
	}

}

// FAQ  why  multiple inheritance can be achieved through  interfaces?


FAQ:  Can one interface  implements  other interface  ?

package MultipleInheritanceBasics;
//FAQ:  Can one interface  implements  other interface  ?
interface I1A
{
	void M1(); // abst Methods only
}

interface I2A implements I1A //  invalid
{  //  one Interface cannot implement other interface 
	
	void M2();
//	
//	void M1()	 //   only abstr  method- we cannot define body for method M1
//	{		
//		
//	}
}


public class testInetrface {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

-------------------------------------------
Object class:
package MultipleInheritanceBasics;


//class A // extends Object
//{
//	
//}
//
//class String  // extends Object
//{
//	
     // s1.equals("Ram"); 
//}

public class TestObject {

	public static void main(String[] args) {
//		Object :  is predefined  class in java 
		//  is the super class for all classes ( userdefined class  and predfined classes)
		// FAq What is super class for all classes ?
		
		int a[]  = {10 ,20 ,30};	 //  store only intger vals	
		float farr [] = {1.1f, 2.2f ,3.3f}; //   stire only decimla nos 
		
		//   If we want to store mixed no f values  one intger val +   1 float  +  string Val
		// then we We will object class
		/// declaring Object Array
		
		Object [] oArr = {10 , 2.3f, "Ram", 'A'};
		
		// We can store any data type value in object array
		// get all values from Object arr
		for(int i=0; i<= oArr.length-1; i++)
		{
			System.out.println("vals from Obj arr=" + oArr[i]);
		}
		///   vals from Obj arr=10
//		vals from Obj arr=2.3
//				vals from Obj arr=Ram
//				vals from Obj arr=A
		
		//  get all vlaues from Object arr using for each loop
		for( Object eachVal : oArr )
		{
			System.out.println("Val from Obj arr using for each loop=" + eachVal);
		}
		
//		Val from Obj arr using for each loop=10
//				Val from Obj arr using for each loop=2.3
//				Val from Obj arr using for each loop=Ram
//				Val from Obj arr using for each loop=A

	}

}

https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html
https://docs.oracle.com/javase/7/docs/api/java/lang/String.html

public final class String extends Object

----------------------------------------

*********************************
	14-Sep -22 Wed
*********************************
package EncapsulationBasics;
//
class A
{
//	Enacapsualtion :   combining  Data  +   methods in a single unit 
//	ex:  class is example of encaspulation
	//  data hiding :   declaring var as private 
	// private is predefiend  k/w in java 
	//   
  private String  ename = "Ram"; // private var 
  int id=10;
  //   private var can be accessed in the same class only  but not outisde classes
	
	void M1()
	{
		System.out.println("ename = " + ename);
	}
	
}

public class testEncapsulation 
{

	public static void main(String[] args) {
			// create obj for class- A
		A aobj =  new A();
//		aobj.a 
		System.out.println("acces  private var from class-A" + aobj.ename);	
		// The field A.ename is not visible
		// ename is private var of class -A - ,  we cannot access in other class i.e testEncapsulation
		// private varibales can be accessed in the same class wherre we declared
		
			
	}

}

FAQ: what is encapsulation:

-------------------------------------------
Access Specifiers(public, protected, private, default):
      4 types of access specifiers in java

1. public 
2. private
3. protected
4. default

Access specifiers means specify access level of variables and methods (data members of class).. etc

- Access Specifiers are usually applicable for  instance variables and instance methods, constrcuctor , class.   etc

PackageA
	Class A
	Class B

PakcageB
	Class C
	Class D (inheritance) 
-----------------------------------------
package PackageA;

public class A {
	
//	public   is predefined k.w in java
	// used declare var and methods as public
	// if u declare var with public k.w - it is public var
	//              method   with public k/w - it is public method
	public int pubid =1; // public var
	private int priId =2; // private var
	protected int proId =3; // protected var
	int defId= 4; //  if we dont specify access specifier -  it is defaut var
	
		
	 //  public method
	public  void M1()
	{
		System.out.println("in M1");
	}

	public static void main(String[] args) {
		
		//  public variblaes can be accessed inside the same class  
		// create oj for class - A
		A a  = new A();
		System.out.println("public var can be accessed inside the same class =" + a.pubid);
		
		System.out.println("Private var can be accessed in the same class only=" + a.priId);
		System.out.println("Protceted var can be accessed =" + a.proId);
		
		System.out.println("Default var can be accessed =" + a.defId);

	}

}


---------------------
package PackageA;

public class B {

	public static void main(String[] args) {
		
	//  public variblaes can be accessed  the other class  -B
			// create oj for class - A
			A a  = new A();
			System.out.println("public var can be accessed inside the same class =" + a.pubid);
		
//			System.out.println("Private var can be accessed in the same class only=" + a.priId);
			// The field A.priId is not visible
			// Error:   we cannot acccses privtae var i.e priId in other classes B,C,D
			System.out.println("Protceted var can be accessed in class -B=" + a.proId);
			
			System.out.println("Default var can be accessed =" + a.defId);
			// Defaulr var --  scope is defined as same pakakge level but not outisde package - package -B
			
			
	}

}

----------------------------
package PackageB;

import PackageA.A;

public class C 
{

	public static void main(String[] args) {

		
	//  public variblaes can be accessed in other class - Pakcage-B  
			// create oj for class - A
			A a  = new A();
			System.out.println("public var can be accessed inside the same class =" + a.pubid);
			
//			System.out.println("Private var can not  be accessed in the same class only=" + a.priId);
			// The field A.priId is not visible
			// Error:   we cannot acccses privtae var i.e priId in other classes C

//			System.out.println("Protceted var can be accessed in class -B=" + a.proId);
			// error protected var cannnot be accesed  in class - C  with out using inheritance
			
//			System.out.println("Default var can be accessed =" + a.defId);
			// The field A.defId is not visible
			// Defaulr var --  scope is defined as same pakakge level but not outisde package - package -B
	}

}

package PackageB;

import PackageA.A;

public class D extends A
{   //   gets Class - A   varibles into child class -D

	public static void main(String[] args) {

		//  public variblaes can be accessed in other class - Pakcage-B  
		// create oj for class - A
		A a  = new A();
		System.out.println("public var can be accessed inside the same class =" + a.pubid);

//		System.out.println("Private var can not  be accessed in the same class only=" + a.priId);
		// The field A.priId is not visible
		// Error:   we cannot acccses privtae var i.e priId in other classes C
		
//		System.out.println("Protceted var can be accessed in class -B=" + a.proId);
		// error protected var cannnot be accesed  in class - C  with out using inheritance
		D d  = new D();
		System.out.println("Protceted var can be accessed in class -B=" + d.proId);
		
//		System.out.println("Default var can be accessed =" + a.defId);
		// The field A.defId is not visible
		// Defaulr var --  scope is defined as same pakakge level but not outisde package - package -B
			

	}

}

*******************************************************
			Pkg-A			Pkg-B
		class A		Class B		Class-C		Class D(inheritance)
Public 		yes		  yes		 yes		  yes
private 	yes		   No		No		  No
Default		yes		 yes		No		   No  --Same pkg level
Protected	yes		 yes		No		  Yes  -- Use inheritance

*********************************************************************************
•	Exception Handling: 
----------------------------

	package ExceptionHandlingBasics;

public class testExceptionHandlingBasics {

	public static void main(String[] args) {
		
		System.out.println("stmt-1");
		System.out.println("stmt-2");
		//  due to some reason - some time 
		int a=10/0;//  in java ,  it throws error /Exception
		// java.lang.ArithmeticException: / by zero
		System.out.println("stmt-3");
		System.out.println("stmt-4");
		// We have to go for exception hanlding - 
		// Excpetion :  is run time error it comes during program execution
		// hanlde excpetion :   we can use try catch block		
		
		

	}

}


--  try catch()
-------------
package ExceptionHandlingBasics;

public class testExceptionHandlingBasics {

	public static void main(String[] args) {

		System.out.println("stmt-1");
		System.out.println("stmt-2");
		//  due to some reason - some time 

		try 
		{
			int a = 10/0;//  in java ,  it throws error /Exception -  program execution terminates/ stops there itself
		}
		//  it will not contniue to exeute 
		catch (Exception e) {
			System.out.println("ctaching Exception = "  + e);
		}
		

		// java.lang.ArithmeticException: / by zero
		System.out.println("stmt-3");
		System.out.println("stmt-4");
		// We have to go for exception hanlding - 
		// Excpetion :  is run time error it comes during program execution
		// hanlde excpetion :   we can use try catch block		

	}

}
---------------------
package ExceptionHandlingBasics;

public class ArrayIndexOutofBoundsException {

	public static void main(String[] args) {

//		System.out.println("stmt-1");
//		System.out.println("stmt-2");
//
//		int a []  =  {10,20,30};
//		//  stored 3 values index no  - starts o,1,2  -   there is no index no = 3 here
//		a [3]  = 40 ;
//		///ava.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
////		at ExceptionHandlingBasics.ArrayIndexOutofBoundsException.main(ArrayIndexOutofBoundsException.java:12)
//		System.out.println(" index no =3 +" + a[3]);
//		
//		System.out.println("stmt-3");
//		System.out.println("stmt-4");
		
		//******************************
		System.out.println("stmt-1");
		System.out.println("stmt-2");

		int a []  =  {10,20,30};
		//  stored 3 values index no  - starts o,1,2  -   there is no index no = 3 here
		
		try {
			a [3]  = 40 ;
			System.out.println(" index no =3 +" + a[3]);
		}
		// If we write try block- we must write catch block- else u will get error 
		catch (Exception e) {
			System.out.println("Catching Array Index of out of bounds of exception :"+ e);			
		}
		
		///ava.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
//		at ExceptionHandlingBasics.ArrayIndexOutofBoundsException.main(ArrayIndexOutofBoundsException.java:12)
		
		
		System.out.println("stmt-3");
		System.out.println("stmt-4");
	}

}

***********************

package ExceptionHandlingBasics;

public class StringIndexOutofBoundsException {

	public static void main(String[] args) {

//		System.out.println("stmt-1");
//		System.out.println("stmt-2");
//		
//		String s = "Rama";
//		//          0123  --   4 is not there
//		char ch = s.charAt(4);
//		// java.lang.StringIndexOutOfBoundsException: String index out of range: 4
//	
//		System.out.println("stmt-3");
//		System.out.println("stmt-4");
		
		//************************
		System.out.println("stmt-1");
		System.out.println("stmt-2");
		
		String s = "Rama";
		//          0123  --   4 is not there
		
		try {
			char ch = s.charAt(4);
		// java.lang.StringIndexOutOfBoundsException: String index out of range: 4
		}
		catch(Exception e1)
		{
			System.out.println("Catching Exception= " + e1);
		}
		
		System.out.println("stmt-3");
		System.out.println("stmt-4");	

	}

}

o/p:
stmt-1
stmt-2
Catching Exception= java.lang.StringIndexOutOfBoundsException: String index out of range: 4
stmt-3
stmt-4
---------------------------------

Nullpointer Exception:
package ExceptionHandlingBasics;

public class NullPointerException {

	public static void main(String[] args) {

		System.out.println("stmt-1");
		System.out.println("stmt-2");
		
		String s = "Ram";
		System.out.println("s="+s);// Ram
		System.out.println("s="+ s.length()); // 3
		
		s = null; //   s does not refer 'Ram'
		System.out.println("s="+s);// null
		System.out.println("length os String" + s.length());
		//                                      null.length() ;
		//  java.lang.NullPointerException: Cannot invoke "String.length()" because "s" is null
			
		System.out.println("stmt-3");
		System.out.println("stmt-4");
		
		//************************
	

	}

}
--------------------
package ExceptionHandlingBasics;

public class NullPointerException {

	public static void main(String[] args) {

//		System.out.println("stmt-1");
//		System.out.println("stmt-2");
//		
//		String s = "Ram";
//		System.out.println("s="+s);// Ram
//		System.out.println("s="+ s.length()); // 3
//		
//		s = null; //   s does not refer 'Ram'
//		System.out.println("s="+s);// null
//		System.out.println("length os String" + s.length());
//		//                                      null.length() ;
//		//  java.lang.NullPointerException: Cannot invoke "String.length()" because "s" is null
//			
//		System.out.println("stmt-3");
//		System.out.println("stmt-4");
		
		//************************
		
		System.out.println("stmt-1");
		System.out.println("stmt-2");
		
		String s = "Ram";
		System.out.println("s="+s);// Ram
		System.out.println("s="+ s.length()); // 3
		
		s = null; //   s does not refer 'Ram'
		System.out.println("s="+s);// null
		try {
			
			System.out.println("length os String" + s.length());
		}
		catch(Exception e)
		{
			System.out.println("Catching Exception  = " +e );
			System.out.println("Please check Object refrence value is null");
		}
		
		//                                      null.length() ;
		//  java.lang.NullPointerException: Cannot invoke "String.length()" because "s" is null
			
		System.out.println("stmt-3");
		System.out.println("stmt-4");
	

	}

}

o/p:
----------------
stmt-1
stmt-2
s=Ram
s=3
s=null
Catching Exception  = java.lang.NullPointerException: Cannot invoke "String.length()" because "s" is null
Please check Object refrence value is null
stmt-3
stmt-4

************************************************************************
	15-Sep-2022
************************************************************************
HW  : Define public, private,protected, default methods in Class - A and check whether we are able to access those methods in class -B, C ,D?

HW Define public, private,protected, default -"constructors" in Class - A and check whether we are able to access those constructors in class -B, C ,D?

--------------------------------------
HW :Can Private variables  be inherited  or not?
Class A
{
  private mobileno = 85538601231;

}

class B extends A
{  //   


}

-------------------------------------
Multiple Catch Blocks:
---------------------------
package ExceptionHandlingBasics;

public class MultipleCatchBlocks {

	public static void main(String[] args) {

		System.out.println("stmt-1");
		System.out.println("stmt-2");
		// We can define single try block and mulitple catch blocks
		
		try
		{
			// ArithmeticException
//			int a = 10 /0;
			// ArrayIndexOutof bouncds	
//			int a[]  = new int [3]; //  o - 2   but no index no =3
//			a[3] =10;
			// StringIndex out of bounds Excpetion
//			String s = "rama";
//			char ch=	s.charAt(4);///  string index no  =4  is notvailable  . out of range 
			// Null pointerException
			String s = null;
			System.out.println("Length =" +s.length());
		}		
		
	
		catch (ArithmeticException ae) {
			System.out.println("Catching ArithmeticException= " + ae);
		}
		
		// define one more catch block
		catch(ArrayIndexOutOfBoundsException arrExc)
		{
			System.out.println("Catching ArrayIndexOutOfBoundsException =" + arrExc);
		}
		
		// Define catch block
		catch(StringIndexOutOfBoundsException se)
		{
			System.out.println("Catching StringIndexOutOfBoundsException = " + se);
		}
		
//		catch(NullPointerException  ne) // error ??????
//		{
//			System.out.println("Catching NullPointerException = " + ne);
//		}
		
		catch(Exception e)  // Note : always write catch block with Exception at last
		{
			System.out.println("Catching ant type of exception =" +  e);
		}
		

		// java.lang.ArithmeticException: / by zero
		System.out.println("stmt-3");
		System.out.println("stmt-4");

	}

}

o/p:
stmt-1
stmt-2
Catching ant type of exception =java.lang.NullPointerException: Cannot invoke "String.length()" because "s" is null
stmt-3
stmt-4

***************************************
Exception Hierarchy (Throwable Class) :

	Object -(c)
	Throwable -Class - is Super class for all exceptions and Error
Exception (C)     error (C) 

FAQ: what super class for all Exception and Error

------------------------------------------------------------
finally:
----------------
package ExceptionHandlingBasics;

public class FinallyBlockBasics {

	public static void main(String[] args) {

		System.out.println("stmt-1");
		System.out.println("stmt-2");
		//  finally is predefined k/w in java
		//  can be used define finally block
		// finally block gets executed always if exception is there or even if exception is not there
		
		try
		{
//			int a=10/0;	
			System.out.println("Hi Java");
		}
		catch (ArithmeticException ae)
		{
			System.out.println("Catching ArithmeticException =" + ae);
		}
		
		// define finally block
		finally  //  this finally block always gets executes
		{
			System.out.println("Finally block always gets executed if exception occurs or if exception does not occur also");
		}
		
		System.out.println("stmt-3");
		System.out.println("stmt-4");

	}

}

********************************************************


package ExceptionHandlingBasics;

public class FinallyBlockBasics {

	public static void main(String[] args) {

		System.out.println("stmt-1");
		System.out.println("stmt-2");
		//  finally is predefined k/w in java
		//  can be used define finally block
		// finally block gets executed always if exception is there or even if exception is not there
		
		try
		{
//			int a=10/0;	
			System.out.println("Hi Java");
		}
//		System.out.println("check-1"); Note:  b/w try and catch block, we should not write any stmts
		catch (ArithmeticException ae)
		{
			System.out.println("Catching ArithmeticException =" + ae);
		}
		
//		System.out.println("check-2");// Erro : we should not any stmt catch and finally
		
		// define finally block
		finally  //  this finally block always gets executes
		{
			System.out.println("Finally block always gets executed if exception occurs or if exception does not occur also");
		}
		//  Note:  finally is not compulsory to define
		// even if we dont write finally block, there is no error in program
		
		System.out.println("stmt-3");
		System.out.println("stmt-4");
		
		// FAQ:  Can we define catch - block - with out try- block
		
//		try {
//			System.out.println("hi");
//		}
		
//		catch (Exception e) {
//			// TODO: handle exception
//		}
		
		// FAQ Can we write try block without catch - block
//		try
//		{
//			
//		}
		// We must define catch block  ele it throws error
		
		// Note:
		// try and finally-  we can use with out catch -   (try -catch) , (try-finally) ,  (try -catch- catch-catch- finally)
		try
		{
			System.out.println("Hi check -4");
		}
		 // Catch - block is not compulsory - if we use try  and finally 
		finally
		{
			System.out.println("check -5");
		}
		
//		finally // error
//		{
//			System.out.println("check -6");
//		}
		
		

	}

}

*************************************
package ExceptionHandlingBasics;

class A
{
	final void M2() //  metod def is final --  We cannot change nethod definition or we canot change method  body
	{
		System.out.println("parebt class Method - from class -A ");
	}
}


public class testfinalMethods extends A
{
	// gets parebt class ( A)  - var + Methods into child class - i.e testfinalMethods
	
//	 void M2() //  metod def is final --  We cannot change nethod definition or we canot change method  body
//	{  // Error : cannot override final method from class -A
//		System.out.println("Over riding final method - is not possible");
//	}
	
	final void M1()  //  final method
	{
		System.out.println("Final Method - M1");
	}
	
	public static void main(String[] args) {
		
		// final - k/w in java
		//   used to declare constr var
		//   is applicable for variables  and methods ..
		
		final float pi = 3.14f; // final var
		int eid =101;
		
//		pi = pi + 2; //  we cannot change final  var value
		//   final var is fixed or const , if we try to change final var val, it throws error
	
		testfinalMethods t = new testfinalMethods();
		t.M1();
	}

}


FAQ:  what is the difference b/w  finally  and final ?

final var  --  we canot change
final method -  we cannot method def - or cannot change method body
FAq:  Can we override final method ?
overriding  method -  changing method body  

**************************************************************

throw :
-----------
package ExceptionHandlingBasics;

public class ThrowBasics1 {

	public static void main(String[] args) {
			// Throw :  is predefined k//w 
		//  used to throw given Exception  explicitly 
// If we want to throw ArithmeticException ,  I can use throw
// If we want to throw ArrayIndexOutOfBoundsException,  I can use throw
//
//		synatx:  throw new PredefineExceptionClass()
		
		try
		{
			// int a= 10/0:
//		 throw new ArithmeticException();
//		 throw new ArrayIndexOutOfBoundsException();
//		 throw new StringIndexOutOfBoundsException();
//		 throw new java.lang.NullPointerException(); // erorr as it is unreachable code
		 // note :  at a time we can write only one throw stmt in try- block
			throw new java.lang.NullPointerException();
			
		}
		
		catch(ArithmeticException ae)
		{
			System.out.println("catching ArithmeticException =" + ae);
		}
		catch (ArrayIndexOutOfBoundsException ae) {
			System.out.println("catching ArrayIndexOutOfBoundsException =" + ae);
		}
		
		catch(StringIndexOutOfBoundsException se)
		{
			System.out.println("catching StringIndexOutOfBoundsException =" + se);
		}
		
		catch(Exception e)
		{
			System.out.println("catching any type of Excpetion =" + e);
		}
		 
		System.out.println("ends here");
		//throw  new NullPointerException();// Error:  throw  k/e must be used in try -block

	}

}

FAQ: What is the use of throw k/w in exception?

throw  new NullPointerException();// Error:  throw  k/w must be used in try -block



***************************************************
	16 -Sep-22
***************************************************
package ExceptionHandlingBasics;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class ThrowsBasics {

	public static void main(String[] args) throws FileNotFoundException , IOException
	{

		//  throws  :    is  predefined  k/w  in java  
		///  can be used to throw away excpetion with out hanlding it  --

		//  throws k/w will be added after metod name 

		File f  =  new File("C:test.txt");
		//		FileInputStream  fis  = new FileInputStream(f);	 // throws FileNotFoundException

		try
		{
			FileInputStream  fis  = new FileInputStream(f);	
		}
		catch (Exception e) {
			System.out.println("Catching Excpetion");
		}

		//		  throw   StringIndexOutOfBoundsException(); --  must be handled by using try and catch block

	}

}


Note:
 throws  excep1, expe2, excpe3;
                                  
----------------------------------
•	Different Types of Exceptions:
  1. checked Excpetion:
	 -  are found / indetifed at compilation time  (while wrting code only)
	-  found /   identified compiler
        ex: 
	FileNotFoundException, IOException, Interrupted Exception (thread.sleep(3000))

package ExceptionHandlingBasics;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class CheckedExceptions1 {

	public static void main(String[] args)   {
		
		 File  f  = new File("C: test.txt");
//		 FileInputStream  fis = new FileInputStream(f);// throws FileNotFoundException
		
		 
		 // Interrupted Exception
//		 Thread.sleep(3000); // throws InterruptedException
		
	}

}


2. Unchecked Exception  or RunTimeException 	
	-  these exception are identified / found / occurs in run time only
	-   identified by JVM 
	ex: 
		ArithematicException -  100/0
		ArrayIndexOutofBounds - 
		StringIndexOutofBoundsException
		NullpointerException

FAQ: Diff b/w throw and throws ?

FAQ diff b/w checked Exception and unchecked Exception ?

HW :  Go  through all Exceptions  and  note down ?
  //   InvalidArgumentExcption , SQLException, IOException , , NumberFormatException etc


Exception Propogation:
---------------------------------	
package ExceptionHandlingBasics;

public class ExceptionPropogationBasics {

	static void M1()
	{
		throw new ArithmeticException();
		//System.out.println("stmt-1");
	}
	
	public static void main(String[] args) {
		
			// Calling Method - M1()
		M1();//  // Note:  excpetion will be propogated from one method to another method
		System.out.println("check it exeuttes");
		
	}

}


o/.p:
Exception in thread "main" java.lang.ArithmeticException
	at ExceptionHandlingBasics.ExceptionPropogationBasics.M1(ExceptionPropogationBasics.java:7)
	at ExceptionHandlingBasics.ExceptionPropogationBasics.main(ExceptionPropogationBasics.java:23)


-----------------------
package ExceptionHandlingBasics;

public class ExceptionPropogationBasics {

	static void M1()
	{
		throw new ArithmeticException();
		
//		try
//		{
//			throw new ArithmeticException();
//		}
//		catch (Exception e) {
//			System.out.println("Catching ArithmeticException");
//		}
		
		//System.out.println("stmt-1");
	}
	
	public static void main(String[] args) {
		
			// Calling Method - M1()
		M1();//  // Note:  excpetion will be propogated from one method to another method
		System.out.println("check it exeuttes");
		
	}

}

o/p:
Catching ArithmeticException
check it exeuttes
--------------------------------------
 ArithmeticException - class
ArrayIndex  --  class

•	User defined exception : or custom Exception:
              the execptions which are defined by user is called user defined exception 
		  InvalidAgeException , InvalidNumberEntered, BalanceAmountLessThan500

*************************************
USer defined Excpetion:
package ExceptionHandlingBasics;

//  to define user defined Excpetion 
//  Rules :  1 . must extend using Exception class 
// 2 . 2. Define constr
class InvalidAgeException extends Exception
{
	// 2. Define constr
	InvalidAgeException(String msg)
	{
		super(msg);
	}
	
}

public class testUserDefinedException {

	public static void main(String[] args) {
		try
		{
			throw new InvalidAgeException("Age is < 18 not eligible to vote");
		}
		

//		catch (Exception e) 
		catch (InvalidAgeException e)
		{
			 System.out.println("Catching InvalidAgeException . e=" + e);
		}

	}

}

FAQ  HCL :  How can u generate ur own Exception  ?


//  BalanceAmountLessThan500
package ExceptionHandlingBasics;

//1 class must extends Exception
class BalanceAmountLessThan500 extends Exception
{
	
	//  2.   define constr  and call super(str)
	BalanceAmountLessThan500(String msg)
	{
		super(msg);
	}
	
}


public class testBalanceLessThan500 {

	public static void main(String[] args) {
		
		// Note:  try catch block at a time - type  'try'   and press control + space - select 1st option try_catch  and press enter
//		//  it adds try catch block  in code
//	try {
//		
//	} 
//	catch (Exception e) {
//		
//	}
				
		try {
			throw new BalanceAmountLessThan500("Please check check ur account balance as it is <500 . u cannot withdrawl");
		} catch (BalanceAmountLessThan500 e) {
			
			System.out.println("Catching - BalanceAmountLessThan500. e=  " +e  );
		}
		
		

	}

}

o/p:
Catching - BalanceAmountLessThan500. e=  ExceptionHandlingBasics.BalanceAmountLessThan500: Please check check ur account balance as it is <500 . u cannot withdrawl

-----------------------------------------------------------------------
HW .Define user defined Exception i.e InvalidNumberEntered,  u defines some msg  " Please enter valid amount"


--------------------------------------------------------------------

package WrpaperClassBasics;

public class WrapperClassBasics1 {

	public static void main(String[] args) {
		// wrapper class :  can be used convert primtive data type to class
		//     int  --> Integer  -Class
		// long 	--> Long 
		// byte		--> Byte
		// short 	--> Short
		
	//  float 	--> Float  - Class
		// double --> Double - class
		
		// char --> Charcater - class
		 // boolean  -->   Boolean 
//		Integer
//		Long
//		Byte
//		Short
		
//		Float
//		Double
		
//		Character
		
//		Boolean
		
		
		
		

	}

}



***************************************************
	17-Sep -2021
***************************************************
Wrapper classes :
Can be used to convert primitive data type to class 

   int i=10 ; //  primitive data type ----> Integer class Obj
		
   	Integer class Obj --> int (primitive data type)

data type	Wrapper Class
-----------------------------------
byte		Byte
short		Short
int		Integer
long		Long

float		Float
double		Double

char		Character
boolean		Boolean

Note:
String -  predfined class --  but usually it is defined in the form data type
******************************************
package WrpaperClassBasics;

public class WrapperClassBasics1 {

	public static void main(String[] args) {
		// wrapper class :  can be used convert primtive data type to class
		//     int  --> Integer  -Class
		// long 	--> Long 
		// byte		--> Byte
		// short 	--> Short
		
	//  float 	--> Float  - Class
		// double --> Double - class
		
		// char --> Charcater - class
		 // boolean  -->   Boolean 
//		Integer
//		Long
//		Byte
//		Short
		
//		Float
//		Double
		
//		Character
		
//		Boolean
		
		//1.   converting int > Integer class obj
		int i =10;
		Integer iobj=  Integer.valueOf(i);
		
		System.out.println("iobj="+ iobj);//  10	
		
		
		// HW  byte  ---> Byte
		
		// HW  repeat 
		
		// 2 convert Integer class obj to  to  int data type
		
		// create obj for Integer class 
		Integer iobj2 =  new Integer(10);
		System.out.println("obj2="+ iobj2);
		
		int i2 = iobj2.intValue();
//		int i2 = iobj2;// 
		System.out.println("i2=" + i2);// 10
		
		// HW   Convertint Long class obj to long data type 
		Long l = new Long(19);
		
		
			
		
		

	}

}


------------------------------------------------------
Charcter-Class Methods:
--------------------
package WrpaperClassBasics;

public class CharcterClassBasics1 {

	public static void main(String[] args) {
		//		  Character  :  predefined class  in java
		// has some methods which can be used to tell given character is digit or alphaber

		char ch = 'a';

		boolean   isDigit= Character.isDigit(ch);
		//                                   'a' -- false
		System.out.println("isDigit=" + isDigit);//  false


		isDigit= Character.isDigit('1');
		//                      true		
		System.out.println("isDigit=" + isDigit);
		// isDigit=true


		boolean isAlphabetic=  Character.isAlphabetic('A');	
		//                                true             
		System.out.println("isAlphabetic= "+ isAlphabetic);

		isAlphabetic=  Character.isAlphabetic('2');	
		//                                false          
		System.out.println("isAlphabetic= "+ isAlphabetic);


		boolean isLetter=  Character.isLetter('A');
		//                                      A is letter- true
		System.out.println("isLetter =" +isLetter);

		isLetter=  Character.isLetter('1');
		//                             not a letter -  false
		System.out.println("isLetter =" +isLetter);

		//		Character.isLetterOrDigit(ch)
		boolean isLetterOrDigit=  Character.isLetterOrDigit('A');
		// 												 'A'  is ltter -true
		System.out.println("isLetterOrDigit =" +isLetterOrDigit);


		isLetterOrDigit=  Character.isLetterOrDigit('1');
		// 												 '1'  is digit -true
		System.out.println("isLetterOrDigit =" +isLetterOrDigit);

		isLetterOrDigit=  Character.isLetterOrDigit('$');		//
		// 												 'S'  is special char  not a letter or not a digit  - false
		System.out.println("isLetterOrDigit =" +isLetterOrDigit);
		
		isLetterOrDigit=  Character.isLetterOrDigit('$');		//
		// 												 'S'  is special char  not a letter or not a digit  - false
		System.out.println("isLetterOrDigit =" +isLetterOrDigit);
		
		
	}

}

o/p:

isDigit=false
isDigit=true
isAlphabetic= true
isAlphabetic= false
isLetter =true
isLetter =false
isLetterOrDigit =true
isLetterOrDigit =true
isLetterOrDigit =false
isLetterOrDigit =false


**********************************
FAQ: WAP  to get charcters count   from string s= "ab12(.*cd34";
//  o/p:  4 
package WrpaperClassBasics;

public class GetCharctersCountFromString {

	public static void main(String[] args) {
		
//		FAQ: WAP  to get charcters count   from string s= "ab12(.*cd34";
	//  o/p:  4 
		
		String s  ="ab12(.*cd34";
		//          012345678910
		//  get   each char from string 
			
//	     char ch=	s.charAt(1);// a
//	     System.out.println("ch="+ ch);
	    int alphabetsCnt= 0; 
		System.out.println("length="+s.length());//11
		for(int i=0;i<= s.length()-1;i++)
		{          // 5 <=  10   true 
			char ch= s.charAt(i);
			//                5 i.e  .
			//  check it is alpabet
			if(Character.isAlphabetic(ch))
			{ //                    . -false  --
				System.out.println("Given Charcter =" + ch + " is alphabet");
				alphabetsCnt =  alphabetsCnt +1;// 0 + 1 =1 +1 =2 
				
			}
			
		}		
		System.out.println("alphabetsCnt ="+ alphabetsCnt);
		

	}

}


--------------------------------------------------
//*** FAQ WAP  to get digits count   from string s= "ab12(.*cd34";
o/p: 5

package WrpaperClassBasics;

public class GetDigitsCountFromString {

	public static void main(String[] args) {
		
//		FAQ: WAP  to get charcters count   from string s= "ab12(.*cd34";
	//  o/p:  4 
		
		String s  ="ab12(.*cd34";
		//          012345678910
		//  get   each char from string 
			
//	     char ch=	s.charAt(1);// a
//	     System.out.println("ch="+ ch);
	    int digitsCnt= 0; 
		System.out.println("length="+s.length());//11
		for(int i=0;i<= s.length()-1;i++)
		{          // 5 <=  10   true 
			char ch= s.charAt(i);
			//                5 i.e  .
			//  check it is alpabet
			if(Character.isDigit(ch))
			{ //                   
				System.out.println("Given Charcter =" + ch + " is Digit");
				digitsCnt =  digitsCnt +1;// 0 + 1 =1 +1 =2 
				
			}
			
		}		
		System.out.println("digitsCnt ="+ digitsCnt);
		

	}

}

--------------------------------------
FAQ: Get indexno OF given Charcater

package WrpaperClassBasics;

public class GetDigitsCountFromString2 {

	
	public static int getIndexNoOfGivenCharacter(String s , char Expectechar)
	{
//		String s  ="ab12(.*cd34";
//		String s  ="ab12(.*cd3 4";
		//          0123456789 10
		// a -0 , b -1
		//  get   each char from string 
			
//	     char ch=	s.charAt(1);// a
//	     System.out.println("ch="+ ch);
	    int digitsCnt= 0; 
//	    char Expectechar = '3';
//	    char Expectechar = 'z';
		System.out.println("length="+s.length());//11
		int i;
		int indexNo = -1;
		for( i=0;i<= s.length()-1;i++)
		{          // 5 <=  10   true 
			char ch= s.charAt(i);
				if(ch == Expectechar)
				{
					 indexNo = i;
					break;
				}
		}		
		
		if(indexNo == -1)
		{
			System.out.println("Given charcter='"+ Expectechar + "' is not found. so index no=" +  indexNo);	
		}
		else
			
		{
			System.out.println("Given charcter='"+ Expectechar + "' is  found. so index no=" +  indexNo);
		}
		return indexNo;
		
	}
	
	
	public static void main(String[] args) {
		
//		FAQ: WAP  to get charcters count   from string s= "ab12(.*cd34";
	//  o/p:  4 
		
//	
		int indexno = getIndexNoOfGivenCharacter("=\"ab12(.*cd34\"", 'a');
		System.out.println("indexno =" +indexno);
		
		indexno  = getIndexNoOfGivenCharacter("=\"ab12(.*cd34\"", 'b');
		System.out.println("indexno =" +indexno);
		
		indexno =	getIndexNoOfGivenCharacter("=\"ab12(.*cd34\"", 'z');
		System.out.println("indexno =" +indexno);
		
	
	}

}

o/p:
Given charcter='a' is  found. so index no=2
indexno =2
Given charcter='b' is  found. so index no=3
indexno =3
Given charcter='z' is not found. so index no=-1
indexno =-1




-----------------------------------------------------------------------------


FAQ: *****  get numbers from String   s= "ab12(.*cd34";
o/p:  1234

package WrpaperClassBasics;

public class GetDigitsFromString3 {

	public static String getNumbersFromString(String s)
	{//                                         a1b22
		char [] chArr= 	s.toCharArray();

		String numberString = "";
		for(int i=0;i<=chArr.length-1;i++)
		{ //       // 1 < =4  
			char ch = chArr[i];
			if(Character.isDigit(ch)) // check given char is digit or not
			{  //               '2'
				numberString = numberString +	ch ;
				//              ""      +  1 =  "1" + '2' =  12 + '2' = 122
				// 
			}	    	 
		}	
		System.out.println("numberString="+numberString);
		return numberString;		
	}


	public static void main(String[] args) {
		//		FAQ: get numbers from String   s= "ab12(.*cd34";
		//		o/p:  1234

		String val =	getNumbersFromString("a1b22");
		System.out.println("val= " + val);



	}

}

o/p:
numberString=122
val= 122

--------------------------------------------
------------------------------------------------------------------
// HW FAQ WAP to get special charcter count from string s= "ab12(.cd*34";
special charcters  ( . *
o/p:  3


// HW  get all special charcters from String s= "a(.b"
o/p:  (.

// HW get alpabets from strings= "a(.bc"
o/p: abc

***************************************************
	19-Sep-2022
***************************************************
•	File Handling:
----------------------------
o	Reading Properties File in Java:
--------------------

create properties file : 
----------------------------
Select pkg  folder >  rt click > New > Other > Search 'file' option > under 'General' select 'File' option >
Enter  any file name with '.properties'  file extension  ( config.properties)
---------------
 
   config.properties --  extension
 define data :  Key = value
--------------------------------------------------
Browser = Chrome
ApplicationURL = http://desktop-sstga1b:88/tasks/otasklist.do
QA1Environment =   http://desktopQA1-sstga1b:88/tasks/otasklist.do
QA2Environment =  http://desktopQA2-sstga1b:88/tasks/otasklist.do
PreProdEnv = http://desktopPreProd-sstga1b:88/tasks/otasklist.do
ProdEnv = http://desktopProd-sstga1b:88/tasks/otasklist.do
RunEnvironment = QA1Environment

Read properties file :
package FileHandlingBasics;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

public class ReadPropertiesFile {

	
//	readPropertiesFile("C: condig.properties" , "Browser");
	public static void readPropertiesFile(String filePath , String keyName)
	{
		
	}


	public static void main(String[] args) throws IOException {

		String propsFile = "C:\\brahma\\Practise\\SelniumPractiseNew\\Aug2022BatchWorkSpace\\SampleJavaProject\\src\\FileHandlingBasics\\config.properties";

		// create obj for class - Properties
		Properties props =  new Properties();
		FileInputStream  fis  =  new FileInputStream(propsFile);
		props.load(fis);

		String  browser = props.getProperty("Browser");// Chrome
		System.out.println("Browser=" +browser);

		// read ApplicationURL
		String URL = props.getProperty("ApplicationURL");
		System.out.println("URL=" +URL);
		// http://desktop-sstga1b:88/tasks/otasklist.do

		// Note:  if given key or property name is not available  in config.properties file , it returns 'null' value
		String val= 	props.getProperty("TestResultsFolder");//  null
		System.out.println("val=" + val);
		
		 browser = props.getProperty("browser");//  null    as we dont browser ' key name is not there in config.props fiel
		 // Check config.properties give same name exactly i.e  Browser
			System.out.println("Browser=" +browser);

		// HW  create new properties withname 'testdata.properties'
		// Define data and read data 
			
		// HW Write separate method to read properties file by passing property name / key name ?
			


	}

}

o/p:
Browser=Chrome
URL=http://desktop-sstga1b:88/tasks/otasklist.do
val=null
Browser=null

Properties - class 
	
  create obj for props
FileInputStream fis = new Fileinputstream("file path");
props.load(fis);

read browser
props.getProperty("browser") ; 

FAQ How can you read proprties file ?

---------------------------------
Reading/Writing Text Files :
------------------------
  testdata.txt -- notepad 

File - class -  can be used to handle files and folders in our system
----------------
testdat.txt
------------------
This is Line-1.
This is Line-2.
This is Line-3.
This is Line -4.
------------

package FileHandlingBasics;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class ReadNotePadFiles1 {

	public static void main(String[] args) throws IOException {

		String NotepadFile = "C:\\brahma\\Practise\\SelniumPractiseNew\\Aug2022BatchWorkSpace\\SampleJavaProject\\src\\FileHandlingBasics\\testData.txt";


//		read file  -- filereader , buffered Reader lass
		
		File f  = new File(NotepadFile);
		FileReader  fr = new FileReader(f);
		BufferedReader  br  = new BufferedReader(fr);
		
		// read line fron notepad
		String line1 = 	br.readLine();
		System.out.println("line1=" + line1);

		String line2= br.readLine();
		System.out.println("line2=" + line2);

		String line3= br.readLine();
		System.out.println("line3=" + line3);

		String line4= br.readLine();
		System.out.println("line4=" + line4);

		String line5= br.readLine();
		System.out.println("line5=" + line5);//  null vaue  as there are no lines to read from notepad file

		// *****************************************
		
		

	}

}

//o/p:
//line1=This is Line-1.
//line2=This is Line-2.
//line3=This is Line-3.
//line4=This is Line -4.
//line5=null

----------------------------------
Read all lines using while loop:
package FileHandlingBasics;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class ReadNotePadFiles2 {

	public static void main(String[] args) throws IOException {

		String NotepadFile = "C:\\brahma\\Practise\\SelniumPractiseNew\\Aug2022BatchWorkSpace\\SampleJavaProject\\src\\FileHandlingBasics\\testData.txt";


//		read file  -- filereader , buffered Reader lass
//		
//		File f  = new File(NotepadFile);
//		FileReader  fr = new FileReader(f);
//		BufferedReader  br  = new BufferedReader(fr);
//		
//		// read line fron notepad
//		String line1 = 	br.readLine();
//		System.out.println("line1=" + line1);
//
//		String line2= br.readLine();
//		System.out.println("line2=" + line2);
//
//		String line3= br.readLine();
//		System.out.println("line3=" + line3);
//
//		String line4= br.readLine();
//		System.out.println("line4=" + line4);
//
//		String line5= br.readLine();
//		System.out.println("line5=" + line5);//  null vaue  as there are no lines to read from notepad file

		// *****************************************
//		File f  = new File(NotepadFile);
//		FileReader  fr = new FileReader(f);
//		BufferedReader  br  = new BufferedReader(fr);
//		
//		
//		while(br.readLine()!=null)
//		{  // This is Line-3.  !=  null  --  true
//			// null != null  - falsee
//			System.out.println("lines from noteapd=" + br.readLine());
//			// This is Line-2.
//			// This is Line -4.
//		}
		
		
		//**********************
		// *****************************************
		File f  = new File(NotepadFile);
		FileReader  fr = new FileReader(f);
		BufferedReader  br  = new BufferedReader(fr);
		
		String x = "";
		while((x=br.readLine()) != null)
		{  // x= This is Line-1. != null  - true
			// x=  This is Line-2.          - true
			//This is Line-3.               - true
			// This is Line -4.
			//    x= null != null - false 
			System.out.println("lines from noteapd=" + x);
			//This is Line-1.
			//This is Line-2.
			// This is Line-3.
			//This is Line -4.
		
		}		
		
		

	}

}

//o/p:
//line1=This is Line-1.
//line2=This is Line-2.
//line3=This is Line-3.
//line4=This is Line -4.
//line5=null
----------------------------------------------------------
writing Note pad file :
-----------------------
package FileHandlingBasics;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class WritingNotepadFile {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		// Read file -- >  FileReader , BufferedReader
		// Write file -- > FileWriter , BufferedWriter
//		
//		String filepath = "C:\\brahma\\Practise\\SelniumPractiseNew\\Aug2022BatchWorkSpace\\SampleJavaProject\\src\\FileHandlingBasics\\writeFileTest.txt";
//		// Note:  press ctrl + M - Maximise code Editor window
//		//        press ctrl + M - we can view  code Editor in normal mode                
//		
//		File f  = new File(filepath);
//		
//		FileWriter fw =  new FileWriter(f);
//		BufferedWriter bw =  new BufferedWriter(fw);
//		
//		bw.write("Writing Line -1");
//		bw.write("Writing Line -2");
//		bw.write("Writing Line -3");
//	
//		bw.flush();// If we dont use flush() , it does not write data to file 
//		
//		o/p:
//		Writing Line -1Writing Line -2Writing Line -3  --  o/p is coming in the same line
		
		
		//**************************
		//  write lines  in a new line 
//		String filepath = "C:\\brahma\\Practise\\SelniumPractiseNew\\Aug2022BatchWorkSpace\\SampleJavaProject\\src\\FileHandlingBasics\\writeFileTest.txt";
//		
//		File f  = new File(filepath);
//		
//		FileWriter fw = new FileWriter(f);
//		BufferedWriter bw =  new BufferedWriter(fw);
//		
//		bw.write("writing line -1");
//		//   go to new line 
//		bw.newLine();
//		
//		bw.write("writing line -2");
//		bw.newLine();
//		
//		bw.write("writing line -3");
//		bw.newLine();
//		
//		bw.write("writing line -4");
//		bw.newLine();
//		
//		bw.flush();
		
//		o/p:
//			writing line -1
//			writing line -2
//			writing line -3
//			writing line -4

		
		//******************************************
//		or 
		
	String filepath = "C:\\brahma\\Practise\\SelniumPractiseNew\\Aug2022BatchWorkSpace\\SampleJavaProject\\src\\FileHandlingBasics\\writeFileTest.txt";
		
		File f  = new File(filepath);
		
		FileWriter fw = new FileWriter(f);
		BufferedWriter bw =  new BufferedWriter(fw);
		
		bw.write("writing line -1\n"); //  \n - new line
		
		bw.write("Write new line -2 \n");
		bw.write("Write new line -3 \n");
		bw.write("Write new line -4 \n");
		bw.write("Write new line -5 \n");
		
		bw.flush();
		
		System.out.println("writing has been done");

	}

}

----------------------------------------------------------

FAQ WAP to read note pad file ?

Read Lines ---> FileReader , BufferedReader - classes
               read lines  --  bw.readLine();
				bw.readLine();
			bw.readLine(); --  if we read lines , read.line()  return null 
				

Write file -->  FileWriter, BufferedWriter
		bw.write();
		bw.newLine();
		bw.write(" line  \n");

		bw.flush();

String s  = "Ram12sita34";
FAQ:  Read lines count from note pad file ?
FAQ:  Read all characters coount   from file ?
FAQ : Read all numbers from File ?
FAQ:  Read count of words in file ?

***************************************************
	20-Sep-2022
***************************************************
Append data to File :
----------------------
package FileHandlingBasics;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class AppendingDataToExistingNotepadFile {

	public static void main(String[] args) throws IOException {

		String filepath = "C:\\brahma\\Practise\\SelniumPractiseNew\\Aug2022BatchWorkSpace\\SampleJavaProject\\src\\FileHandlingBasics\\writeFileTest.txt";

		File f = new File(filepath);

		// apend data to existing
		FileWriter fw  =  new FileWriter(f, true);// add data to existing data file 
//		FileWriter fw  =  new FileWriter(f, false);// previous data in note pad will be overwritten and new data will be entered
		BufferedWriter  bw  = new BufferedWriter(fw);

		//  write some lines
		bw.newLine();
		bw.write("append data line -5\n");
		bw.write("append data line -6\n");

		bw.flush();

		System.out.println("writing has been done");

	}

}

// HW Read CSV File ?
 CSV - Comma separated value
 extension  name  .csv
ram , 101, 1000, BNG
Sita, 102, 2000, CHN
-----------------------------------------
Collection Frame work :

Array :
int a []   =  new int [3];
 int arra-    We will store intgerr values
              same type of values 

3 --  store max 3 values  - index =  0,1,2 
- static array - array size is fixed - 

if 10 vlaues,  change array size  int [10];
100   , int [100]

-----------------
   WAP  to check arr contains given value ?
	Remove  some value from array 
	
 package CollectionFrameWorkBasics2;

public class arrayBasics {

	public static void main(String[] args) {
		// array
		int a []  =  new int [3];
		a[0] =  10;
		a[1] = 20;
		a[2] = 30;
		
		// check aray contains given val 20
		
		for(int i=0;i<= a.length-1;i++)
		{
			if(a[i] == 20)
			{
				System.out.println("array contains given value 20");
			}
			
		}
		
		
		// remove 20 value from array
		
		// get array size
		
		// Collection frame work:  predefined classes and interfaces  and which provides some ready made  methods
		//   by using those method - we can perform taks very easily efficienlty
		//  C + I + Methods - 
		
		

	}

}

Collection frame work - used to handle group of values or to handle group of objects or to handle group of elements
		
some imp collection Frame work  and Interfaces and classes :


List - Is predefined interface  in java
	- can be store group of values
    --All collection frame work classes and interfaces defined java.util package 
  -- List stores values sequentially


  interface List
{
	//abstract methods 
	void add();//   in complete method . dont define methods body

}

//  implementation class 
ArrayList - predefined class in java 
	can be used to store group of values

class ArrayList implements List
{
	void add()
{
	syso("")
	}


}

---------------------
package CollectionFrameWorkBasics2;

import java.util.ArrayList;
import java.util.Iterator;

public class ArrayListBasics {

	public static void main(String[] args) {
		//		Array List
		//		create object for array list class
		//		classname objref=  new classname();
		//  store string values
		ArrayList<String>  al =  new ArrayList<String>();
		
//		/ArrayList<int>  al2= new ArrayList<int>();
//		ArrayList<>  al2= new ArrayList<Integer>();
//		al2.add(10);
		
		
		//  create array list obj with empty list

		//  add some values in array list
		al.add("Ram");
		al.add("Sita");
		al.add("Raju");

		//  display array list obj
		System.out.println("array list ="+al );//array list =[Ram, Sita, Raju]

				
		//  allows duplicate values
		al.add("Raju");
		System.out.println("array list ="+al );//array list = [Ram, Sita, Raju, Raju]

		// get count of values in array list 
		// arr.length
		int cnt =  al.size();
		//      cnt=     4
		System.out.println("cnt =" +cnt); // 4

		// Remove 'Sita'
		al.remove("Sita");

		System.out.println("After Removing 'sita', array list ="+al ); // [Ram, Raju, Raju]

	
		
		//  array list contains Ram
		boolean  containsRam= 	al.contains("Ram");
		//          [Ram, Raju, Raju]   -- true
		System.out.println("containsRam="+ containsRam); // true

		// array list contains Sowmya
		boolean  containsSowmya = al.contains("Sowmya");
		//               [Ram, Raju, Raju]   --  false
		System.out.println("containsSowmya=" +containsSowmya);//  false

		//  adding value at given index no =1
		al.add(1, "Swathi");
		// [Ram,   Swathi,  Raju, Raju]
//		     0     1         2     3

		System.out.println("After Removing 'sita', array list ="+al ); //[Ram,   Swathi,  Raju, Raju]
		
		// HW add 'Gopi'  at eindex no  =0 
		
		
//		al.clear();
		System.out.println("after clear(), al ="+ al);  //  [ ]
		
		// [Ram, Swathi, Raju, Raju]
		//   0      1 		2	 3
		//  get 1st value from array list
		String val0  = al.get(0);//Ram,
		//       val0=     Ram
		System.out.println("val0 = " + val0); // Ram
		
		// get 2nd vlaue from array
		String val1= al.get(1);
		//            val1=      Swathi
		System.out.println("val1 = " +val1);// Swathi
		
//		val1= al.get(4);// java.lang.IndexOutOfBoundsException: Index 4 out of bounds for length 4
		// error bcoz indexno  =4  which is not there in array list
		//  check index no only
		System.out.println("val1 = " +val1);
		
		//  suupose array list 100  values
		// get all values from array list
		System.out.println("************get all values from array list using get() method ***************");
		for(int i=0;i<=al.size()-1;i++)
		{			
			String val= al.get(i);
			System.out.println("val from array list using for loop --> " + val);
		}
		
		// 2  using for each loop -  we can get values from array list or any collection obj
		//   to get values from array
//		for(datatypeOFArray eachVal : arr/ Collectionobj)
//		{
//			
//		}
		
		System.out.println("**************** getting values from array list using for each loop***********");
		for(String eachVal : al)
		{
			System.out.println("Each val from array list using for each loop="+ eachVal);
			
		}
		
		System.out.println("al = "+ al); // al = [Ram, Swathi, Raju, Raju]
		// 3 using iterator() method
		Iterator<String>  it =  al.iterator();
		// note :  ctrl + shift+ o  =  imports repective pakcages automatically
		//  get value  we have to use next()
		String val = 	it.next();
		System.out.println("val="+ val);// Ram
		
		val = 	it.next();
		System.out.println("val="+ val); // Swathi
		
		val = 	it.next();
		System.out.println("val="+ val);// Raju
		
		
		val = 	it.next();
		System.out.println("val="+ val); // Raju
		
//		val = 	it.next();
//		System.out.println("val="+ val); // 5 
		//  java.util.NoSuchElementException
		//  we dont have any values to iterate -  then we will get  java.util.NoSuchElementException
		
		//  Selenium -  NoSuchElementException
		
		//   using while loop 
		
				
		
		// 4 
		
		
		
		// HW  store group of int values in array list
		
		// // HW  store group of float values in array list
		
		// HW store group of char values in array list

	}

}


o/p:
array list =[Ram, Sita, Raju]
array list =[Ram, Sita, Raju, Raju]
cnt =4
After Removing 'sita', array list =[Ram, Raju, Raju]
containsRam=true
containsSowmya=false
After Removing 'sita', array list =[Ram, Swathi, Raju, Raju]
after clear(), al =[Ram, Swathi, Raju, Raju]
val0 = Ram
val1 = Swathi
val1 = Swathi
************get all values from array list using get() method ***************
val from array list using for loop --> Ram
val from array list using for loop --> Swathi
val from array list using for loop --> Raju
val from array list using for loop --> Raju
**************** getting values from array list using for each loop***********
Each val from array list using for each loop=Ram
Each val from array list using for each loop=Swathi
Each val from array list using for each loop=Raju
Each val from array list using for each loop=Raju
al = [Ram, Swathi, Raju, Raju]
val=Ram
val=Swathi
val=Raju
val=Raju

--------------------------------------
***************************************************
	23-Sep-2022
***************************************************

package CollectionFrameWorkBasics2;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.ListIterator;

public class ArrayListBasics {

	public static void main(String[] args) {
		//		Array List
		//		create object for array list class
		//		classname objref=  new classname();
		//  store string values
		ArrayList<String>  al =  new ArrayList<String>();
		
//		/ArrayList<int>  al2= new ArrayList<int>();
//		ArrayList<>  al2= new ArrayList<Integer>();
//		al2.add(10);
		
		
		//  create array list obj with empty list

		//  add some values in array list
		al.add("Ram");
		al.add("Sita");
		al.add("Raju");

		//  display array list obj
		System.out.println("array list ="+al );//array list =[Ram, Sita, Raju]

				
		//  allows duplicate values
		al.add("Raju");
		System.out.println("array list ="+al );//array list = [Ram, Sita, Raju, Raju]

		// get count of values in array list 
		// arr.length
		int cnt =  al.size();
		//      cnt=     4
		System.out.println("cnt =" +cnt); // 4

		// Remove 'Sita'
		al.remove("Sita");

		System.out.println("After Removing 'sita', array list ="+al ); // [Ram, Raju, Raju]

	
		
		//  array list contains Ram
		boolean  containsRam= 	al.contains("Ram");
		//          [Ram, Raju, Raju]   -- true
		System.out.println("containsRam="+ containsRam); // true

		// array list contains Sowmya
		boolean  containsSowmya = al.contains("Sowmya");
		//               [Ram, Raju, Raju]   --  false
		System.out.println("containsSowmya=" +containsSowmya);//  false

		//  adding value at given index no =1
		al.add(1, "Swathi");
		// [Ram,   Swathi,  Raju, Raju]
//		     0     1         2     3

		System.out.println("After Removing 'sita', array list ="+al ); //[Ram,   Swathi,  Raju, Raju]
		
		// HW add 'Gopi'  at eindex no  =0 
		
		
//		al.clear();
		System.out.println("after clear(), al ="+ al);  //  [ ]
		
		// [Ram, Swathi, Raju, Raju]
		//   0      1 		2	 3
		//  get 1st value from array list
		String val0  = al.get(0);//Ram,
		//       val0=     Ram
		System.out.println("val0 = " + val0); // Ram
		
		// get 2nd vlaue from array
		String val1= al.get(1);
		//            val1=      Swathi
		System.out.println("val1 = " +val1);// Swathi
		
//		val1= al.get(4);// java.lang.IndexOutOfBoundsException: Index 4 out of bounds for length 4
		// error bcoz indexno  =4  which is not there in array list
		//  check index no only
		System.out.println("val1 = " +val1);
		
		//  suupose array list 100  values
		// get all values from array list
		System.out.println("************get all values from array list using get() method ***************");
		for(int i=0;i<=al.size()-1;i++)
		{			
			String val= al.get(i);
			System.out.println("val from array list using for loop --> " + val);
		}
		
		// 2  using for each loop -  we can get values from array list or any collection obj
		//   to get values from array
//		for(datatypeOFArray eachVal : arr/ Collectionobj)
//		{
//			
//		}
		
		System.out.println("**************** getting values from array list using for each loop***********");
		for(String eachVal : al)
		{
			System.out.println("Each val from array list using for each loop="+ eachVal);
			
		}
		
		System.out.println("al = "+ al); // al = [Ram, Swathi, Raju, Raju]
		// 3 using iterator() method
		Iterator<String>  it =  al.iterator();
		// note :  ctrl + shift+ o  =  imports repective pakcages automatically
		//  get value  we have to use next()
//		String val = 	it.next();
//		System.out.println("val="+ val);// Ram
//		
//		val = 	it.next();
//		System.out.println("val="+ val); // Swathi
//		
//		val = 	it.next();
//		System.out.println("val="+ val);// Raju
//		
//		
//		val = 	it.next();
//		System.out.println("val="+ val); // Raju
		
//		val = 	it.next();
//		System.out.println("val="+ val); // 5 
		//  java.util.NoSuchElementException
		//  we dont have any values to iterate -  then we will get  java.util.NoSuchElementException
		
		//  Selenium -  NoSuchElementException
		
		//   using while loop 
		
		System.out.println("*************** Using while loop");
		while(it.hasNext()) // true 
		{
			// get val
			String val2=  it.next();
			System.out.println("val2= " + val2);
		}
				
		
		
		
		// 4  get all vlaues using  list iterator 
		
		ListIterator<String>  lit = al.listIterator();
	
		System.out.println("*************** Using while loop - ListIterator");
		while(lit.hasNext()) //   true
		{
			String val3= lit.next();// get val  from al
			System.out.println("val3= " + val3);
		}
		
//		 Note :   --
//		 iterator()  - we can iterate or get values in forward direction
		//listIterator()-  get values in forward direction and reverse direction
		System.out.println("*************** Using while loop - ListIterator ");
		while(lit.hasPrevious())
		{
			String revVal= lit.previous();
			System.out.println("revVal="+ revVal);
		}
		
		
		
		
		// HW  store group of int values in array list
		
		// // HW  store group of float values in array list
		
		// HW store group of char values in array list

	}

}


//**************************************

package CollectionFrameWorkBasics2;

import java.util.ArrayList;
import java.util.Iterator;

public class ArrayListOfInteger {

	public static void main(String[] args) {
			// HW  store group of int values in array list
		//   10,20,30 ...etc
//		ArrayList<int>  al  =  new ArrayList<int>() ;
		//   int  - Integer
		// float 	- Float
		// char  -  Character
		ArrayList<Integer>   al  = new ArrayList<Integer>();
		
		// add  10 , 20 , 30 
		al.add(10);
		al.add(20);
		al.add(30);
		
		System.out.println("array list of Integer values :" + al);		
		//array list of Integer values :[10, 20, 30]
		
		// HW Repeat all methods  for above one ?
		
		
		
		//HW  get all values from array  list
		
		
		
		// HW   get all values from array  list uusing for each loop
//		for(int eachval : al) // ok
		for(Integer eachval : al) // ok
		{
			System.out.println("eachval=" +eachval);
		}
			
//			eachval=10
//					eachval=20
//					eachval=30
//		
		
		
		// // HW  store group of float values in array list
		
		// HW store group of char values in array list

	// HW store group of char values in array list
//		ArrayList<char>   alchar = ArrayList<char>(); //  dont use primitive data type
		ArrayList<Character>   alchar = new  ArrayList<Character>();
		


	}

}

-------------------------------------------------


package CollectionFrameWorkBasics2;

import java.util.HashSet;
import java.util.Iterator;

public class HashSetBasics1 {

	public static void main(String[] args) {

		// Set -  is predefiend interface in java.
		//    interface -  Abst method
		//   can be used to store group of values 
		// does not allow duplicate values
		// does not store vALUES  in sequantially   it stores values  in random order

		// HAshset is predefined class in java
		//   can be used store group  of values

		//  create hashset of String values
		HashSet<String>  hs  = new HashSet<String>();

		//  to check isempty()
		boolean 	isEmpty= hs.isEmpty();//  true 


		// add  some string vlaues
		hs.add("Ram");
		hs.add("sita");
		hs.add("Raju");
		hs.add("Raju"); //  Duplciate values are not allowed
     // 2 . hash shet does not store duplicate values
		// 3. HAsh set stores values in randomly  but not sequentially
		// 4. Insertion order is not preserved 
		
		System.out.println("hs =" + hs);// hs =[sita, Raju, Ram]
		//   diaplys values randomly

		//  get count of values 
		int count= hs.size();
		System.out.println("count=" + count); // 3
		
		// HW check contains 'Ram'
		
		// Hw check hs conatins "Swathi"

		//HW  Remove "Sita"
		
		//  get  all vals from hash set 
//		hs.get(0); //  error :   there is not get() in hashset class
		
//		1 for loop ,2. for each loop 3.   iterator()   4. listIterator()
		
		// 2 
		for(String  val : hs)
		{
			System.out.println("vals from hashset uing for each loop="+ val);
		}
//		vals from hashset uing for each loop=sita
//				vals from hashset uing for each loop=Raju
//				vals from hashset uing for each loop=Ram
		
		// 3 . iterator()
		// iterate vals from hashset
		//  get val from hashset
		Iterator<String>   it =	hs.iterator();
		// Iterator - interface in java 
		System.out.println("hs =" + hs);// hs =[sita, Raju, Ram]
		while(it.hasNext())
		{
			String val2 = it.next(); //  get value from hs
			System.out.println("vals from hash set using iterataor Method =" + val2);
		}
//		
//		vals from hash set using iterataor Method =sita
//				vals from hash set using iterataor Method =Raju
//				vals from hash set using iterataor Method =Ram
		
		
		// 4 . using Listiertaror()
//		hs.listIterator();//CE:  The method listIterator() is undefined for the type HashSet<String>
		//   Listiertaror ()   to iterate values in reverse directioon
		
		
		
		//Note:  how to open API file or help file   : 
		//Press ctrl +  mouse mouse over Iterator/ or anyclass ,  select 'Open Declaration' option
		
		
		// Note:  To  view all methods defined in current class / Interafce :   Ctrl +  o
		
		Object  o = hs.clone();//  copy vals from hs  -- stores into left var  object o
		System.out.println("o ="+ o);// o=o =[Raju, sita, Ram]
		
		// HW Explore some  methods in hash set 
		Object[] oArr =	hs.toArray();
		// get all vals from array
		
		for(int i=0 ;i<=oArr.length-1; i++ )
		{
			System.out.println("vals from  Object array="  + oArr[i]);
		}
		
	
		
		
		
	  //   clear all vlaues in hs
		
		
		
		
		
		



	}

}

----------------------------------
FAQ What is List . 
1. List is interface in java 
2. can be used to store group of values
3. store values sequentially
4. insertion order is preserved
5. allows duplictae vals

is List class or Interface ?
List is interface 
ArrayList -(C)  implements List interface methods
Arraylist - is implementation class for List-

FAQ What is set . Is Set class or Interface?

1.Set is interface in java 
2. Set can be used to store group of values
3. does not store values sequentially .  randomly
4. insertion order is not  preserved
5. does not allow duplicate values

FAQ Difff b/w List and set ?

FAQ :Difference b/w arraylist and HAshset ?
-------------------------------------------
1. arrayList is predefine class in java   and implements List interface methods 
2. arrayList  can be used to store group of values
3.arrayList   store values sequentially
4. arrayList ,insertion order is preserved
5. arrayList  allows duplicate vals

1.HAshset  is predefined class  in java 
2. HAshset can be used to store group of values
3. HAshset  does not store values sequentially .  randomly
4. HAshset , insertion order is not  preserved
5. HAshset  does not allow duplicate values
-----------------------------------------------------------

Diff b/w List and ArrayList?
-----------------------------
List is interface 
Arraylist is class : 

Diff b/w Set and HAshset ?
Set is interface 
HAshset is class  - implements all methods of of Set Interface 
----------------------------------------------------

// HW LinkedHAshset   add some values , check all methods 
// store values sequentially 

// HW Treeset  : 
//  arranage values in ordeer
apple, cat, ball --Ascending order / Descnedig order
// HW  create treeset with some int values  check whther numbers are in Asc/ Desc order?

*********************************************

package CollectionFrameWorkBasics2;

import java.util.HashMap;

public class HashMapBasics {

	public static void main(String[] args) {
	  
		//Map :  is predefined interface in java
	// can be used to store values in the form of key and values pair 
 	
		// HAshMap : is predefined class in Java and implements 'Map' interface methods
//  can be used  to store values in the form of key and values pair
		
		// create obj for HAshMap -class
		HashMap<String, String> hm  =   new HashMap<String, String>();
		//  check hahs map is  empty or not
		
		//  insert / put some values in hash map
		
		hm.put("A", "Apple");
		hm.put("B", "Ball");
		hm.put("C", "Cat");
		hm.put("D", "Dog");
		
		System.out.println("Hash map  store values in form Key: Value pair .=" + hm);
		//   {A=Apple, B=Ball, C=Cat, D=Dog}

		//  check hahs map contains  given Key i.e  A
		boolean 	containsKey = hm.containsKey("A");
		//                          =  True
		System.out.println("containsKey -A ="+ containsKey);// true
		
		// check hash mpa contains given key i.e Z 
		boolean 	containsKeyZ =  hm.containsKey("Z");		//  false 
		System.out.println("containsKeyZ - ="+ containsKeyZ);// False
		
		//HW  check hash map contains given value i.e Apple
		
		
		// HW check hash map contains given value i.e Elephant
		
		
		//   allows duplicate keys  or not
		hm.put("D", "Dolphin"); //  Change val  to Dolphin
		// It over writes previous val and store new values
		System.out.println("HAsh map ="+ hm);
		
		// Can we insrt  duplicate values in hash map
		
		hm.put("P", "Apple");
		System.out.println("HAsh map ="+ hm); // HAsh map ={A=Apple, B=Ball, C=Cat, D=Dolphin}
		
		// HAsh map does allow duplicate keys
		//  and it allows duplicate valiues
//		HAsh map ={P=Apple, A=Apple, B=Ball, C=Cat, D=Dolphin}
		
			
		

	}

}




 





		










***************************************************
	24-Sep-2022
***************************************************

HAshmap basics:
package CollectionFrameWorkBasics2;

import java.util.Collection;
import java.util.HashMap;
import java.util.Set;

public class HashMapBasics {

	public static void main(String[] args) {

		//Map :  is predefined interface in java
		// can be used to store values in the form of key and values pair 

		// HAshMap : is predefined class in Java and implements 'Map' interface methods
		//  can be used  to store values in the form of key and values pair

		// create obj for HAshMap -class
		HashMap<String, String> hm  =   new HashMap<String, String>();
		//  check hahs map is  empty or not

		//  insert / put some values in hash map

		hm.put("A", "Apple");
		hm.put("B", "Ball");
		hm.put("C", "Cat");
		hm.put("D", "Dog");

		System.out.println("Hash map  store values in form Key: Value pair .=" + hm);
		//   {A=Apple, B=Ball, C=Cat, D=Dog}

		//  check hahs map contains  given Key i.e  A
		boolean 	containsKey = hm.containsKey("A");
		//                          =  True
		System.out.println("containsKey -A ="+ containsKey);// true

		// check hash mpa contains given key i.e Z 
		boolean 	containsKeyZ =  hm.containsKey("Z");		//  false 
		System.out.println("containsKeyZ - ="+ containsKeyZ);// False

		//HW  check hash map contains given value i.e Apple


		// HW check hash map contains given value i.e Elephant


		//   allows duplicate keys  or not
		hm.put("D", "Dolphin"); //  Change val  to Dolphin
		// It over writes previous val and store new values
		System.out.println("HAsh map ="+ hm);

		// Can we insrt  duplicate values in hash map

		hm.put("P", "Apple");
		System.out.println("HAsh map ="+ hm); // HAsh map ={A=Apple, B=Ball, C=Cat, D=Dolphin}

		// HAsh map does allow duplicate keys
		//  and it allows duplicate valiues
		//		HAsh map ={P=Apple, A=Apple, B=Ball, C=Cat, D=Dolphin}



		// hahs map allows to insert Null keys, null val
		hm.put(null, null);
		System.out.println("hm after inserting null key and null val -1=" + hm);
		//		hm after inserting null key and null val -1={P=Apple, null=null, A=Apple, B=Ball, C=Cat, D=Dolphin}


		// insert duplicate null key, null val
		hm.put(null, null);
		System.out.println("hm after inserting null key and null val -2 =" + hm);
		//		hm after inserting null key and null val -2 ={P=Apple, null=null, A=Apple, B=Ball, C=Cat, D=Dolphin}

		// null key ,  "Test"  value 
		hm.put(null, "Test");		
		System.out.println("hm after inserting null key and null val -3=" + hm);
		//{P=Apple, null=Test, A=Apple, B=Ball, C=Cat, D=Dolphin}

		// Note:  HAsh map stores  only one null key.   i.e does not store duplicate key names
		// Key names are unique 

		//count o
		int HMvalscount = hm.size(); // 6
		System.out.println("HMvalscount=" +HMvalscount);

		// get val by giving key name
		//   A - Apple 
		String valA =	hm.get("A");// Apple
		System.out.println("valA=" + valA); // valA=Apple

		// HW  get value of given Key name i.e B

		// HW  get value of given Key name i.e B

		// Note : if give key name is not in hash map, it returns null value
		String valZ= hm.get("Z");
		System.out.println("valZ="+valZ);// valZ=null

		// remove key name
		hm.remove("C");
		System.out.println("hm after deleting C-=" + hm);
		//hm after deleting C-={P=Apple, null=Test, A=Apple, B=Ball, D=Dolphin}
		
		// HW  Remove key name - D -

		// get  all key names from  hashmap
		Set<String>  sobj=   hm.keySet();
		// 1 for loop winth index  2 for each 3 iterator 4 listiteraror()
		
		// HW use for each  loop
	
		for(String eachVal : sobj)
		{			
			System.out.println("get all key names from hashmap using forEach loop:"+  eachVal);
		}
//		get all key names from hashmap using forEach loop:P
//		get all key names from hashmap using forEach loop:null
//		get all key names from hashmap using forEach loop:A
//		get all key names from hashmap using forEach loop:B
//		get all key names from hashmap using forEach loop:D
		
		// HW  		3 iterator 
		
		
		// HW 4 listiteraror()
		

		// get all values from hash map	
		Collection<String>   col =	hm.values();
		// Collection is predefined interface in java
		//  4 ways
		// 1 cannot used
		// 2 for each 
		for(String eachVal : col)
		{
			System.out.println("get all values from hm using for each="+ eachVal);
		}
//				get all values from hm using for each=Apple
//				get all values from hm using for each=Test
//				get all values from hm using for each=Apple
//				get all values from hm using for each=Ball
//				get all values from hm using for each=Dolphin
//		
		//3.  HW  use iterator()
		

		// get all values from hashmap using Lambda Expressions	
		// Java 8 , introduced lambda expressions
		hm.forEach((keyName,valName)-> {
			// any stmt
			System.out.println("key name="+ keyName +  ", val = " + valName);
		}
		);
//		key name=P, val = Apple
//				key name=null, val = Test
//				key name=A, val = Apple
//				key name=B, val = Ball
//				key name=D, val = Dolphin
		
		
		// hm.entrySet();
		

	}

}

********************************************
HashTable:
package CollectionFrameWorkBasics2;

import java.util.HashMap;
import java.util.Hashtable;

import VariablesBasics.booleanBascics;

public class HashTableBasics {

	public static void main(String[] args) {
		// HAshTable is predefiend class in java
		// can be used to store values in the form key and value pair
		// Haash table does not allow null key -- Null pointer Excpetion
		//                            null value  --Null pointer Excpetion

		// create obj for HAshtable
		Hashtable<String, String>  ht =  new Hashtable<String, String>() ;

		boolean isEmpty=	ht.isEmpty(); //  true
		System.out.println("isEmpty= " + isEmpty);// isEmpty= true

		int cntHT= ht.size(); // 0
		System.out.println("cntHT=" +cntHT); // cntHT=0
		
		// add  some values in hash table
		ht.put("A", "Apple");
		ht.put("B", "Ball");
		ht.put("C", "Cat");
		
		System.out.println("hashtable =" + ht);
		// hashtable ={A=Apple, C=Cat, B=Ball}
		
		//  HAsh table does not allow dupliccate key names
		ht.put("C", "Copy");
		System.out.println("hashtable =" + ht);
		//// hashtable ={A=Apple, C=Copy, B=Ball}
		
		//  hash table - we can insert duplicate values
		ht.put("D", "Apple");
		System.out.println("hashtable =" + ht);
		// hashtable ={A=Apple, D=Apple, C=Copy, B=Ball}
		
		String valA= ht.get("A");// valA=Apple		
		System.out.println("valA="+valA);
		
//		ht.put(null, "Test-1");// error :  We cannot insert null key in hash table
		// " java.lang.NullPointerException: Cannot invoke "Object.hashCode()" because "key" is null
		
//		ht.put("E", null);// "main" java.lang.NullPointerException
		// error as We cannot insert null value in hash table 
		
		//HW  get all key names from  hash table 
		
		// HW get all values from hash table
		
		// get all values keys and values using Lambda expression:
		
		ht.forEach((keyNAme, ValueName) -> {
			System.out.println("key name = " + keyNAme + ", value:"+ValueName);
		}
		);
		
//				Key name = B, value:Ball
//				key name = C, value:Copy
//				key name = D, value:Apple
//				key name = A, value:Apple
		
		// HW  Explore some of methods in hash table 
		
		
	}

}


---------------------

FAQ Diff b/w HashMap and HashTable ?

HW Explore differences?

------------------------------

Date class:
package DateBasics;

import java.util.Date;

public class DateBasics1 {

	public static void main(String[] args) {
		//  get current system date and time
		Date d = new Date();
		System.out.println("date =" + d);
		// date =Sat Sep 24 19:43:58 IST 2022

		// get 
		System.out.println("todays date =" + d.getDate());//    24 

		// get month
		int month = 	d.getMonth();
		System.out.println("month ="+ month); // month =8   + 1 = 9  // Note :  diaplsys current month -1

		// to get actual month 
		month = month +1;
		System.out.println("Actual month ="+ month); //   9

		// get year
		int  year = d.getYear();
		System.out.println("year =" + year); // year =122  Care::  it dsiplayes diff no 
		//   supposed to display current year 2022
		//2022
		// 122
//		---------------
//		   1 9 0 0
		
		//  to get actual year 
		year = year +  1900;
		System.out.println("Actual year ="+ year);// Actual year =2022
		

		// get hoours
		System.out.println("get hh :" + d.getHours()); // get hh :19
		// get mm
		System.out.println("get mm:" + d.getMinutes()); // get mm:51
		// get ss
		
		System.out.println("get ss:" + d.getSeconds());// get ss:25

	}

}


******************************
package DateBasics;

import java.text.SimpleDateFormat;
import java.util.Date;

public class SimepleDateFormatBasics {

	public static void main(String[] args) {
		// SimpleDateFormat  --  to display date in diff formats
		
		//  dd/MM/YYYY
		// MM/dd/YYY
		Date d  = new Date();
		System.out.println("d="+ d);
//		d=Sat Sep 24 20:01:09 IST 2022
		SimpleDateFormat sdf  =  new SimpleDateFormat("dd/MM/yyyy");
				
		String  ddMMyyyy = sdf.format(d);
		System.out.println("ddMMyyyy=" +ddMMyyyy);// ddMMyyyy=24/09/2022
		
		// //   MM/dd/yyyy  09/24 / 2022
		sdf = new SimpleDateFormat("MM/dd/yyyy");
		String MMddyyyy= sdf.format(d);
		System.out.println("MMddyyyy=" + MMddyyyy);// 09/24/2022
		
		//HW  yyyy/ dd/MM
		
		// d/M/yy  / 09/24/2022  --> 
		sdf = new SimpleDateFormat("d/M/yy");
		String val= sdf.format(d); // val=24/9/22
		System.out.println("val=" + val);
		
		//HW  dd-MM-yy
		
		// HW   hh:mm:ss  20:01:09		
		

	}

}

******************************************
	25-Sep-2022
******************************************
package DateBasics;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class SimepleDateFormatBasics {

	public static void main(String[] args) throws ParseException {
		// SimpleDateFormat  --  to display date in diff formats
		
		//  dd/MM/YYYY
		// MM/dd/YYY
		Date d  = new Date();
		System.out.println("d="+ d);
//		d=Sat Sep 24 20:01:09 IST 2022
		
		SimpleDateFormat sdf  =  new SimpleDateFormat("dd/MM/yyyy");//  MM - Month dont give 'mm' --  minutes
				
		String  ddMMyyyy = sdf.format(d);
		System.out.println("ddMMyyyy=" +ddMMyyyy);// ddMMyyyy=24/09/2022
		
		// //   MM/dd/yyyy  09/24 / 2022
		sdf = new SimpleDateFormat("MM/dd/yyyy");
		String MMddyyyy= sdf.format(d);
		System.out.println("MMddyyyy=" + MMddyyyy);// 09/24/2022
		
		//HW  yyyy/ dd/MM
		sdf = new SimpleDateFormat("yyyy/dd/MM");
		String    yyyyddMM  = sdf.format(d);
		System.out.println("HW yyyyddMM ="+yyyyddMM);// HW yyyyddMM =2022/25/09
		
		
		// d/M/yy  / 09/24/2022  --> 
		sdf = new SimpleDateFormat("d/M/yy");
		String val= sdf.format(d); // val=  24/9/22
		System.out.println("val=" + val);
		
		//HW  dd-MM-yy  - Care :   writing eifen symbo; 25-09-2022  or 25/09/2022
		sdf = new SimpleDateFormat("dd-MM-yy");
		 val= sdf.format(d); // val=  25-09-22
		System.out.println("HW 2 val=" + val); // HW 2 val=25-09-22
		
		// HW   hh:mm:ss  20:01:09	
//		sdf = new SimpleDateFormat("hh:mm:ss");
//		 val= sdf.format(d); // val=  18:22: 10
//		System.out.println("HW 2 val=" + val); // HW 2 val=06:22:38
		
		//  parse(); //  to convert string value to date 
		Date d2 = sdf.parse(val); // "25-09-22"
//		Date d2 = sdf.parse("Ram");
		//main" java.text.ParseException: Unparseable date: "Ram"
		System.out.println("d2= "+ d2); //d2= Sun Sep 25 00:00:00 IST 2022
		
		// if we dont give String data properly - it throws ParseException
		
		
		
//		// parse()
//		Date d2= sdf.parse(val);// val=25/9/22 -- > d2= Sun Sep 25 00:00:00 IST 2022
//		System.out.println("d2= " + d2);
//		

	}

}

------------------------------
HW create Hashmap  with Char, String 
HW Create hashmap  with String, Integer  store some names and mobile numbers:

------------------------------------------------

Calendar class:

package DateBasics;

import java.util.Calendar;
import java.util.Date;


public class CalendarBasics {

	public static void main(String[] args) {
		// Calendar - predefiend class in java
		// can be used to get current systen date and time
		//  Defined in java.util. pkg
		Calendar cal =  Calendar.getInstance();
		
		Date  d =cal.getTime();// current system data and time 
		System.out.println("date =" + d); // date =Sun Sep 25 18:35:53 IST 2022
		
		//  add 2 days to curent system data
	// 	void v= 	cal.add(Calendar.DAY_OF_MONTH, 2);// error this method return nothing . so dont declare any var left side
		
		cal.add(Calendar.DAY_OF_MONTH, 2);
		System.out.println("addding 2 days =" + cal.getTime());//  27 
		//addding 2 days =Tue Sep 27 18:40:37 IST 2022
				
		//  substract 1 day 
		cal.add(Calendar.DAY_OF_MONTH, -1); // 
		System.out.println("Substract 1 days =" + cal.getTime());
//		Substract 1 days =Mon Sep 26 18:41:29 IST 2022
		
		// add 2 months
		cal.add(Calendar.MONTH, 2);
		System.out.println("add 2 months =" + cal.getTime()); // Nov
		// add 2 months =Sat Nov 26 18:43:35 IST 2022
		
		// substarct 1 month
		cal.add(Calendar.MONTH, -1);
		System.out.println("substarct in 1 months =" + cal.getTime()); // Oct
		// substarct in 1 months =Wed Oct 26 18:44:42 IST 2022
		
		//HW  add 2 years   2024
		
		//HW  Substract 1 year - 2023  or  2021 ?
		
		
	}

}

o/p:
date =Sun Sep 25 18:44:42 IST 2022
addding 2 days =Tue Sep 27 18:44:42 IST 2022
Substract 1 days =Mon Sep 26 18:44:42 IST 2022
add 2 months =Sat Nov 26 18:44:42 IST 2022
substarct in 1 months =Wed Oct 26 18:44:42 IST 2022


--------------------
package ConversionsStringtoInt;

public class StringtoIntBasics {

	public static void main(String[] args) {
		// String -- > int 
		String s  = "10";
		
		System.out.println(" s + 100 =" +  (s+100));//  s + 100 =10100
		
		//                              "10" + 100 - 10100
		
		int i =Integer.parseInt(s); //  convert given string value to int 
//		int i =Integer.parseInt("Ram");// Care : pass always some number only
		//  java.lang.NumberFormatException: For input string: "Ram"
		
		System.out.println("i="+ i);// 10
		i = i +100;
		System.out.println("i="+ i);// 110
		
		//*******************************************
		//   int -- > String 
		int i2 = 20;
		
		String  s2 =String.valueOf(i2); //  convert given int no to String 
		System.out.println("s2=" + s2); // 20
		
		
		// Note :   We can convert all fundamental/ primitives data types  to String 
		//   int , float, double, char , boolean  --- > String 
		// float --> String
		float f  =3.5f;		
		String fs = String.valueOf(f);
		System.out.println("fs =" + fs); // 3.5
		
		// HW double  --> String 
		
		// HW char   --> String 
		
		// HW boolean  --> String 
		

	}

}

*************************************
String :
package StringBasics;

public class StringBasics3 {

	public static void main(String[] args) {
		
//		String  - class in java
		// can be used to store group of character , which must be enclosed in "" dbl quotes
		// Declare String :
		//  2 ways 
		//1    directly storing value / literal
		String s = "Ram"; //  it creates object in String constant pool
		// String constant pool  --   is some area in memory
		System.out.println("s= " +s); // Ram
		//
		
		// 2nd way  :   new operator 
		String s2  = new String("Sita"); //  creates obj in hear area / memory
		System.out.println("s2=" + s2); // sita
		
		// Methods:
		// 2  Default String-  is immuatable
		// mutable --changeable 
		//  immutable  -- not changeable 
		// immutable -- once String class object is created , whose  content cannot be changed/  cannot modified in the existing object.
		// FAq String is immutable or mutable?
		s2.concat("Rao");
		//  if we try to modify value string value/ content, it creates new object only  but not changing the value in the exsting obj
		//   create  new obj -
		//   create new obj 
		// create  new object   ---   occupies more memory
		System.out.println("s2 =" +s2 );
		
		s2 = s2.concat("Rao");
		System.out.println("s2 =" +s2 );
		
		// when should:  if content is fixed - we dont want to change value  -- then we will go for String class
		
		String 	s3 =  new String ("Sita");
		//  IF u use new operator  - it always creates new object only 	
		

	}

}

--------------------------------------

package StringBasics;

public class EqualsDiff {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//FAQ  Diff b/w ==  and Equals();
//		==   :  to compare  2 numbers 
		System.out.println(10 == 10); //  true
		System.out.println(10 == 5); // false
		
		String s1 = new String("Ram");
		String s2 =  new String("Ram");
		System.out.println(s1==s2);// false
		//               101    102  // false
//		               but not comapring value  "Ram"  "Ram"
		//  ==  opeartor can be used to compare reference addresses  but not String content/ Value
		
		// Equals() -  can be used to compare String values / content
		System.out.println(s1.equals(s2));
		//			       "Ram"       "Ram" --  True 
		

	}

}

-------------------------------------------

package StringBasics;

public class StringBufferBasics {

	public static void main(String[] args) {
		
//		StringBuffer  is predefined class in java
		// can be used string value
		
//		String s = "Ram" ;
//		String s2  = new String("sita");
		// Sting - immutable 
		
		// Declare  String buffer
//		StringBuffer sb  = "Raju";// invalid 
		//Type mismatch: cannot convert from String to StringBuffer
		StringBuffer sb  = new StringBuffer("Raju");
		// StringBuffer  -  mutable
		//  if u create obj for Stringbuffer class, whose content can be changeable/  can  be modifed  in the same existing object
		// 
		//sb.concat("Swathi");// he method concat(String) is undefined for the type StringBuffer
		// Note :  no concat() in Stringbuffer class
		
		StringBuffer sb2  = new StringBuffer("Swathi");		     //   
				
		//  append
		sb.append("Swathi"); // sb=RajuSwathi
		System.out.println("sb="+ sb);
		sb = sb.append("Sowmya"); // sb=RajuSwathiSowmya
		System.out.println("sb="+ sb);
		
		// get Swathi in sb  i/p: sb=RajuSwathiSowmya
		//                           01234567891011
		
		// all methods in String buffer class -  are synchronised
		//  synhromised means  -   at a time it allows only one thread  to opearte on string buffer obj
		// increae waiting for other threads
		// perfomance is slow if we use Stringbuffer class
		// String bugffer is thread safe 
		
		
		// HW  explore some  methods in String buffer
		sb.reverse();
		// Can u Check String class has reverse () -- no 
						
		// when : if  content is varaible  --  String buffer class  and 
		// String :  if content is fixed -- 

// Introduced java 1. 0 version
	}

}

------------------
********************************************
	26-sep -2022
********************************************
String Builder:
---------------
package StringBasics;

public class StringBuilderBasics1 {

	public static void main(String[] args) {
		
//		StringBuilder  is predefined class in java
		// can be used to store string value
		
		StringBuilder  sbld =  new StringBuilder("Ram");
//		StringBuilder sbld2 = "Raju";// in valid 
		//   is   mutable  - once we create obj for Stringbuilder class - whose content can be changeable/  modifed in the same object
		//  String buuilder  is not synchronised
		// synchromised :  at a time it allows only one thread.
		//  not synchronised :   it allows all thread at a time to oprate on the String builder obj
		//  reduce its waiting time, so performabce wise String builder - is fast
		//  JAVa 1.5 version
		
		sbld.append("Sita");
		// "Ram"          ==  RamSita 
		System.out.println("sbld is mutable="+sbld); // sbld is mutable=RamSita
		sbld = sbld.append("Sita");
		System.out.println("sbld is mutable="+sbld); // sbld is mutable=RamSitaSita
		
		
		//	// all methods in String Builder  class -  are not synchronised
		
		// String builder is not thread safe 
		//
		// HW Explore Some methods in String Builder class
		
		//  length
		
		//  substring
		// split
//		
//		String :  Immutable  --  if content is fixed - 
//			String buffer: mutable : if content is changebale frequently,   then    -synchromised >   --   performance wise -slow   
//		String Builder: mutable  -- if content is changeable  frequently -     not synchromised --  perforamc is fast
				
		
		//*************************************


	}

}
------------------------------------------------


***Differences between STRING, STRINGBUFFER & STRINGBUILDER

S.
No	STRING	SRINGBUFFER	STRINGBUILDER
1.	String objects are immutable	
Stringbuffer objects are mutable	
Stringbuilder objects are mutable
2.	Objects can be created in two ways
	1.new 2.literal	
Objects can be created only using new keyword	
Objects can be created only using new keyword

3.	Objects will created in SCP or heap	
Objects will created in heap	
Objects will created in heap

4.synchronised-	Thread safe i.e at a time only one thread is allowed to operate on string object	
Synchromised :Thread safe i.e at a tie only one thread is allowed to operate on string buffer object	
String builder  - not synchromised -  Not a Thread safe

5.	If context is fixed we will go for string	
If context is varying we will go for string buffer	
If context is varying we will go for string builder

6.	equals()-compares two String by seeing content	
equals()-compares two String by seeing reference but not content	
equals()-compares two String by seeing reference  but not content

7.	performance is faster	
performance is moderate	
performance is faster

8.	For concatination we have concat()	
For concatination we have append()	
For concatination we have append()

*************************************

FAQ:
package CodingInterviewPrograms;

import java.util.HashMap;

public class CountofEachCharacterInString {

	public static void main(String[] args) {
		String s = "abbccc";
		// o/p:   a-1 , b -2 , c -3
		
		// Hashmap :  K : val
		
		HashMap<Character, Integer> hm =  new HashMap<Character, Integer>();
		
		// get each char from String 
		for(int i=0;i<=s.length()-1;i++)
		{
			char ch= s.charAt(i);
//			System.out.println("ch="+ch);			
			
			if(hm.containsKey(ch)) //
			{
				hm.put(ch, hm.get(ch)+ 1);
			}
			else
			{
				hm.put(ch, 1);
			}		
		}
		
		System.out.println("hm="+ hm);	
		// hm={a=1, b=2, c=3}

	}

}


------------------
package CodingInterviewPrograms;

import java.util.HashMap;

public class CountofEachWordrInString {

	public static void main(String[] args) {
		String s = "ram is good boy. sita is good girl";
		// o/p:   hm={sita=1, is=2, boy.=1, girl=1, good=2, ram=1}

		
		// Hashmap :  K : val
		
		HashMap<String, Integer> hm  = new HashMap<String, Integer>();
		
		// get each word from String 
		String sarr [] = s.split(" ");
		for(int i=0;i<= sarr.length-1;i++)
		{
			
			String eachWord = sarr[i];
//			System.out.println("eachWord="+eachWord);
			
			if(hm.containsKey(eachWord))
			{
				hm.put(eachWord, hm.get(eachWord) +1);
			}
			else
			{
				hm.put(eachWord, 1);
			}					
		}
		
		System.out.println("hm=" + hm);		
	
		// hm={sita=1, is=2, boy.=1, girl=1, good=2, ram=1}


	}

}

**************************************

package CodingInterviewPrograms;

import java.util.HashSet;

public class getUniqueCharcterFromString {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s = "rama is";
		//			0123456
		//  unique charcters -   no duplicate values
		
		// arrayList  --  allows duplicte vals
		// Hashset  --  does not allow duplicte vale
		HashSet<Character> hs  = new HashSet<Character>();
		System.out.println("s length-" + s.length()); // 7
		for(int i=0;i<=s.length()-1;i++)
		{             //5 <=6
			char ch = s.charAt(i);
			//       ch=   i  
			System.out.println("ch="+ ch);
			hs.add(ch);// hs = [] - = [r] = [r,a] == [m, a,r ,  ] - [m, a,r ,  , i,s]
			//   r , a , m  ,a  . " " space, i 
		}
		
		System.out.println("hs ="+  hs);// hs =[ , a, r, s, i, m]		

	}

}

// FAQ get only duplicate characters
package CodingInterviewPrograms;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

public class getDuplicatesCharcterFromString {

	public static void main(String[] args) 
	{
		String str = "beautiful beach";
		//            beau
		char[] carray = str.toCharArray();
		System.out.println("The string is:" + str.length());
		System.out.println("Duplicate Characters in above string are: ");
		String val ="";
		for (int i = 0; i < str.length(); i++) 
		{               // o < 15
//			System.out.println("*********************");
			for (int j = i + 1; j < str.length(); j++) 
			{      //     1     1 < 15
				//System.out.println("carray[i] = " +carray[i]  + ", carray[j]= " + carray[j] + "- " +(carray[i] == carray[j]));
				if (carray[i] == carray[j]) 
				{
					//val = val + carray[j]; 
					System.out.print(carray[j] + " ");
					break;
				}
			}
		}
		
//		System.out.println("val =" + val);
		
	}
}

Go through Some interview Programs:
•	Coding Interview Programs FAQ

•	Basic Programs

•	String Programs

•	Pattern Programs

•	Array Programs

---------------------
package CodingInterviewPrograms;

public class ReverseOfEachWordInString {

	public static void main(String[] args) {
		
		String s= "Ram is good";
		// o/p:    maR si doog
		
		String sarr [] = s.split(" ");
		StringBuffer sb = null ;
		String  rev = "";
		
		for(int i=0;i<=sarr.length-1;i++)
		{
			String word = sarr[i];
//			System.out.println("word =" + word);
//					word =Ram
//					word =is
//					word =good
			
			 sb  =  new StringBuffer(word);
			sb.reverse();
			System.out.println("sb=" + sb);
			
			rev  = rev + sb + " " ; // rev=maR si doog
		}
			rev = rev.trim();
		System.out.println("rev=" + rev);
		
		
		

	}

}


end of Java
***************************************************************







